
dosificador_pileta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007458  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007568  08007568  00008568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007974  08007974  000091d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007974  08007974  00008974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800797c  0800797c  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800797c  0800797c  0000897c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007980  08007980  00008980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007984  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001d8  08007b5c  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  08007b5c  00009414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c84f  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002027  00000000  00000000  00015a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00017a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5a  00000000  00000000  00018910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193f0  00000000  00000000  0001946a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a24  00000000  00000000  0003285a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e90  00000000  00000000  0004427e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d610e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000502c  00000000  00000000  000d6154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000db180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007550 	.word	0x08007550

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08007550 	.word	0x08007550

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <i2c_write>:
static void lcd_pulse_enable(uint8_t data);
static void lcd_cmd(uint8_t cmd);
static void lcd_data(uint8_t data);


static void i2c_write(uint8_t val) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af02      	add	r7, sp, #8
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDR, &val, 1, HAL_MAX_DELAY);
 800107a:	1dfa      	adds	r2, r7, #7
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	214e      	movs	r1, #78	@ 0x4e
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <i2c_write+0x24>)
 8001088:	f001 fef6 	bl	8002e78 <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20000224 	.word	0x20000224

08001098 <lcd_pulse_enable>:


static void lcd_pulse_enable(uint8_t data) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
i2c_write(data | LCD_EN | bl_state);
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <lcd_pulse_enable+0x4c>)
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffdc 	bl	8001070 <i2c_write>
HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 feb5 	bl	8001e28 <HAL_Delay>
i2c_write((data & ~LCD_EN) | bl_state);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <lcd_pulse_enable+0x4c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffce 	bl	8001070 <i2c_write>
HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 fea7 	bl	8001e28 <HAL_Delay>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000

080010e8 <lcd_write_nibble>:


static void lcd_write_nibble(uint8_t nibble, uint8_t mode_rs) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
// D7..D4 del LCD están en P7..P4 del PCF; por eso usamos (nibble & 0xF0)
uint8_t out = (nibble & 0xF0) | mode_rs; // RW=0 siempre (escritura)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	b25a      	sxtb	r2, r3
 8001102:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001106:	4313      	orrs	r3, r2
 8001108:	b25b      	sxtb	r3, r3
 800110a:	73fb      	strb	r3, [r7, #15]
i2c_write(out | bl_state);
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <lcd_write_nibble+0x44>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4313      	orrs	r3, r2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffaa 	bl	8001070 <i2c_write>
lcd_pulse_enable(out);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffba 	bl	8001098 <lcd_pulse_enable>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000

08001130 <lcd_send>:


static void lcd_send(uint8_t value, uint8_t mode_rs) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
lcd_write_nibble(value & 0xF0, mode_rs);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f023 030f 	bic.w	r3, r3, #15
 8001146:	b2db      	uxtb	r3, r3
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffcb 	bl	80010e8 <lcd_write_nibble>
lcd_write_nibble((value << 4) & 0xF0, mode_rs);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	79ba      	ldrb	r2, [r7, #6]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffc3 	bl	80010e8 <lcd_write_nibble>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <lcd_cmd>:


static void lcd_cmd(uint8_t cmd) { lcd_send(cmd, 0); }
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffd9 	bl	8001130 <lcd_send>
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <lcd_data>:
static void lcd_data(uint8_t data) { lcd_send(data, LCD_RS); }
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffcb 	bl	8001130 <lcd_send>
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <lcd_clear>:
bl_state = on ? LCD_BL : 0;
i2c_write(bl_state);
}


void lcd_clear(void) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
lcd_cmd(0x01); // clear
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ffdf 	bl	800116a <lcd_cmd>
HAL_Delay(2); // >1.53 ms
 80011ac:	2002      	movs	r0, #2
 80011ae:	f000 fe3b 	bl	8001e28 <HAL_Delay>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <lcd_put_cur>:


void lcd_put_cur(uint8_t row, uint8_t col) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	460a      	mov	r2, r1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71bb      	strb	r3, [r7, #6]
uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <lcd_put_cur+0x1a>
 80011cc:	2200      	movs	r2, #0
 80011ce:	e000      	b.n	80011d2 <lcd_put_cur+0x1c>
 80011d0:	2240      	movs	r2, #64	@ 0x40
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	73fb      	strb	r3, [r7, #15]
lcd_cmd(0x80 | addr);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffc2 	bl	800116a <lcd_cmd>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <lcd_init>:


void lcd_init(void) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
HAL_Delay(50); // >40 ms después de VCC sube
 80011f2:	2032      	movs	r0, #50	@ 0x32
 80011f4:	f000 fe18 	bl	8001e28 <HAL_Delay>


// Secuencia de arranque en 4‑bit
lcd_write_nibble(0x30, 0); HAL_Delay(5);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2030      	movs	r0, #48	@ 0x30
 80011fc:	f7ff ff74 	bl	80010e8 <lcd_write_nibble>
 8001200:	2005      	movs	r0, #5
 8001202:	f000 fe11 	bl	8001e28 <HAL_Delay>
lcd_write_nibble(0x30, 0); HAL_Delay(1);
 8001206:	2100      	movs	r1, #0
 8001208:	2030      	movs	r0, #48	@ 0x30
 800120a:	f7ff ff6d 	bl	80010e8 <lcd_write_nibble>
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fe0a 	bl	8001e28 <HAL_Delay>
lcd_write_nibble(0x30, 0); HAL_Delay(1);
 8001214:	2100      	movs	r1, #0
 8001216:	2030      	movs	r0, #48	@ 0x30
 8001218:	f7ff ff66 	bl	80010e8 <lcd_write_nibble>
 800121c:	2001      	movs	r0, #1
 800121e:	f000 fe03 	bl	8001e28 <HAL_Delay>
lcd_write_nibble(0x20, 0); HAL_Delay(1); // 4‑bit
 8001222:	2100      	movs	r1, #0
 8001224:	2020      	movs	r0, #32
 8001226:	f7ff ff5f 	bl	80010e8 <lcd_write_nibble>
 800122a:	2001      	movs	r0, #1
 800122c:	f000 fdfc 	bl	8001e28 <HAL_Delay>


// Función: 2 líneas, 5x8 dots
lcd_cmd(0x28);
 8001230:	2028      	movs	r0, #40	@ 0x28
 8001232:	f7ff ff9a 	bl	800116a <lcd_cmd>
// Display ON, cursor OFF, blink OFF
lcd_cmd(0x0C);
 8001236:	200c      	movs	r0, #12
 8001238:	f7ff ff97 	bl	800116a <lcd_cmd>
// Entry mode: incrementar, sin shift
lcd_cmd(0x06);
 800123c:	2006      	movs	r0, #6
 800123e:	f7ff ff94 	bl	800116a <lcd_cmd>
lcd_clear();
 8001242:	f7ff ffae 	bl	80011a2 <lcd_clear>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <lcd_write_char>:


void lcd_write_char(char ch) { lcd_data((uint8_t)ch); }
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff95 	bl	8001186 <lcd_data>
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <lcd_send_string>:


void lcd_send_string(const char *str) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
while (*str) {
 800126c:	e006      	b.n	800127c <lcd_send_string+0x18>
lcd_write_char(*str++);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffe7 	bl	800124a <lcd_write_char>
while (*str) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f4      	bne.n	800126e <lcd_send_string+0xa>
}
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <calcularErrorPH>:
#define PH_OFFSET 14.6f //offset
#define PH_TOLERANCIA 0.05f


//funcion para calcular el error de ph
float calcularErrorPH(float ph_actual){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	return PH_IDEAL - ph_actual;
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4804      	ldr	r0, [pc, #16]	@ (80012ac <calcularErrorPH+0x1c>)
 800129c:	f7ff fbf8 	bl	8000a90 <__aeabi_fsub>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40eccccd 	.word	0x40eccccd

080012b0 <obtenerSensibilidad>:

//determino sensibilidad segun error
float obtenerSensibilidad(float error){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	return (error < 0.0f) ? SENSIBILIDAD_BAJAR_PH : SENSIBILIDAD_SUBIR_PH;
 80012b8:	f04f 0100 	mov.w	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fe8f 	bl	8000fe0 <__aeabi_fcmplt>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <obtenerSensibilidad+0x1e>
 80012c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012cc:	e000      	b.n	80012d0 <obtenerSensibilidad+0x20>
 80012ce:	4b02      	ldr	r3, [pc, #8]	@ (80012d8 <obtenerSensibilidad+0x28>)
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	4068b924 	.word	0x4068b924

080012dc <calcularVolumen>:
 //calculo volumen
float calcularVolumen (float error, float sensibilidad){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	return error/sensibilidad;
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fd8f 	bl	8000e0c <__aeabi_fdiv>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <calcularDutyFinal>:
	return volumen/TC;
}
*/
//calculo duty final limitado

float calcularDutyFinal(float volumen, float error){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	float duty_con_ganancia;

	if (error < 0.0f){
 8001302:	f04f 0100 	mov.w	r1, #0
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7ff fe6a 	bl	8000fe0 <__aeabi_fcmplt>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <calcularDutyFinal+0x26>
		float duty_con_ganancia = volumen * KPS;
 8001312:	4916      	ldr	r1, [pc, #88]	@ (800136c <calcularDutyFinal+0x74>)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7ff fcc5 	bl	8000ca4 <__aeabi_fmul>
 800131a:	4603      	mov	r3, r0
 800131c:	617b      	str	r3, [r7, #20]
	};

	if (error > 0.0f){
 800131e:	f04f 0100 	mov.w	r1, #0
 8001322:	6838      	ldr	r0, [r7, #0]
 8001324:	f7ff fe7a 	bl	800101c <__aeabi_fcmpgt>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d005      	beq.n	800133a <calcularDutyFinal+0x42>
			float duty_con_ganancia = volumen * KPB;
 800132e:	490f      	ldr	r1, [pc, #60]	@ (800136c <calcularDutyFinal+0x74>)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff fcb7 	bl	8000ca4 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	613b      	str	r3, [r7, #16]
		};

	if (duty_con_ganancia > DUTY_MAX) return DUTY_MAX;
 800133a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800133e:	68f8      	ldr	r0, [r7, #12]
 8001340:	f7ff fe6c 	bl	800101c <__aeabi_fcmpgt>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d002      	beq.n	8001350 <calcularDutyFinal+0x58>
 800134a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800134e:	e009      	b.n	8001364 <calcularDutyFinal+0x6c>
	if (duty_con_ganancia < DUTY_MIN) return DUTY_MIN;
 8001350:	4907      	ldr	r1, [pc, #28]	@ (8001370 <calcularDutyFinal+0x78>)
 8001352:	68f8      	ldr	r0, [r7, #12]
 8001354:	f7ff fe44 	bl	8000fe0 <__aeabi_fcmplt>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <calcularDutyFinal+0x6a>
 800135e:	4b04      	ldr	r3, [pc, #16]	@ (8001370 <calcularDutyFinal+0x78>)
 8001360:	e000      	b.n	8001364 <calcularDutyFinal+0x6c>
	else return duty_con_ganancia;
 8001362:	68fb      	ldr	r3, [r7, #12]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3718      	adds	r7, #24
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	3fd9999a 	.word	0x3fd9999a
 8001370:	3e8ccccd 	.word	0x3e8ccccd

08001374 <setBombaPWM>:



void setBombaPWM(float duty, int subir) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
    uint32_t pulse = (uint32_t)(duty * htim2.Init.Period);
 800137e:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <setBombaPWM+0x5c>)
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fc36 	bl	8000bf4 <__aeabi_ui2f>
 8001388:	4603      	mov	r3, r0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fc89 	bl	8000ca4 <__aeabi_fmul>
 8001392:	4603      	mov	r3, r0
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fe4b 	bl	8001030 <__aeabi_f2uiz>
 800139a:	4603      	mov	r3, r0
 800139c:	60fb      	str	r3, [r7, #12]
    if (subir) {
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <setBombaPWM+0x42>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);  // Bomba subir pH
 80013a4:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <setBombaPWM+0x5c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);      // Apaga bomba bajar
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <setBombaPWM+0x5c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2200      	movs	r2, #0
 80013b2:	639a      	str	r2, [r3, #56]	@ 0x38
    } else {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // Apaga bomba subir
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);  // Bomba bajar pH
    }
}
 80013b4:	e007      	b.n	80013c6 <setBombaPWM+0x52>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // Apaga bomba subir
 80013b6:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <setBombaPWM+0x5c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	2200      	movs	r2, #0
 80013bc:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);  // Bomba bajar pH
 80013be:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <setBombaPWM+0x5c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000278 	.word	0x20000278

080013d4 <leerVoltaje>:

float leerVoltaje(void) {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
	uint32_t adc_raw = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 80013de:	4812      	ldr	r0, [pc, #72]	@ (8001428 <leerVoltaje+0x54>)
 80013e0:	f000 fe1e 	bl	8002020 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 80013e4:	2164      	movs	r1, #100	@ 0x64
 80013e6:	4810      	ldr	r0, [pc, #64]	@ (8001428 <leerVoltaje+0x54>)
 80013e8:	f000 fef4 	bl	80021d4 <HAL_ADC_PollForConversion>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <leerVoltaje+0x26>
		adc_raw = HAL_ADC_GetValue(&hadc1);
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <leerVoltaje+0x54>)
 80013f4:	f000 fff4 	bl	80023e0 <HAL_ADC_GetValue>
 80013f8:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 80013fa:	480b      	ldr	r0, [pc, #44]	@ (8001428 <leerVoltaje+0x54>)
 80013fc:	f000 febe 	bl	800217c <HAL_ADC_Stop>

	float volt = (adc_raw / 4095.0f) * 3.3f;
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f7ff fbf7 	bl	8000bf4 <__aeabi_ui2f>
 8001406:	4603      	mov	r3, r0
 8001408:	4908      	ldr	r1, [pc, #32]	@ (800142c <leerVoltaje+0x58>)
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fcfe 	bl	8000e0c <__aeabi_fdiv>
 8001410:	4603      	mov	r3, r0
 8001412:	4907      	ldr	r1, [pc, #28]	@ (8001430 <leerVoltaje+0x5c>)
 8001414:	4618      	mov	r0, r3
 8001416:	f7ff fc45 	bl	8000ca4 <__aeabi_fmul>
 800141a:	4603      	mov	r3, r0
 800141c:	603b      	str	r3, [r7, #0]
	return volt;
 800141e:	683b      	ldr	r3, [r7, #0]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3708      	adds	r7, #8
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	200001f4 	.word	0x200001f4
 800142c:	457ff000 	.word	0x457ff000
 8001430:	40533333 	.word	0x40533333

08001434 <leerPH>:

float leerPH(void){
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
	uint32_t adc_raw = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]

	HAL_ADC_Start(&hadc1);
 800143e:	4818      	ldr	r0, [pc, #96]	@ (80014a0 <leerPH+0x6c>)
 8001440:	f000 fdee 	bl	8002020 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 8001444:	2164      	movs	r1, #100	@ 0x64
 8001446:	4816      	ldr	r0, [pc, #88]	@ (80014a0 <leerPH+0x6c>)
 8001448:	f000 fec4 	bl	80021d4 <HAL_ADC_PollForConversion>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <leerPH+0x26>
		adc_raw = HAL_ADC_GetValue(&hadc1);
 8001452:	4813      	ldr	r0, [pc, #76]	@ (80014a0 <leerPH+0x6c>)
 8001454:	f000 ffc4 	bl	80023e0 <HAL_ADC_GetValue>
 8001458:	60f8      	str	r0, [r7, #12]
	}
	HAL_ADC_Stop(&hadc1);
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <leerPH+0x6c>)
 800145c:	f000 fe8e 	bl	800217c <HAL_ADC_Stop>

	float volt = (adc_raw / 4095.0f )* 3.3f; // convertir voltaje
 8001460:	68f8      	ldr	r0, [r7, #12]
 8001462:	f7ff fbc7 	bl	8000bf4 <__aeabi_ui2f>
 8001466:	4603      	mov	r3, r0
 8001468:	490e      	ldr	r1, [pc, #56]	@ (80014a4 <leerPH+0x70>)
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fcce 	bl	8000e0c <__aeabi_fdiv>
 8001470:	4603      	mov	r3, r0
 8001472:	490d      	ldr	r1, [pc, #52]	@ (80014a8 <leerPH+0x74>)
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fc15 	bl	8000ca4 <__aeabi_fmul>
 800147a:	4603      	mov	r3, r0
 800147c:	60bb      	str	r3, [r7, #8]
	float ph = PH_SLOPE * volt + PH_OFFSET; //formula lineal
 800147e:	490b      	ldr	r1, [pc, #44]	@ (80014ac <leerPH+0x78>)
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f7ff fc0f 	bl	8000ca4 <__aeabi_fmul>
 8001486:	4603      	mov	r3, r0
 8001488:	4909      	ldr	r1, [pc, #36]	@ (80014b0 <leerPH+0x7c>)
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fb02 	bl	8000a94 <__addsf3>
 8001490:	4603      	mov	r3, r0
 8001492:	607b      	str	r3, [r7, #4]
	return ph;
 8001494:	687b      	ldr	r3, [r7, #4]


}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200001f4 	.word	0x200001f4
 80014a4:	457ff000 	.word	0x457ff000
 80014a8:	40533333 	.word	0x40533333
 80014ac:	c03ccccd 	.word	0xc03ccccd
 80014b0:	4169999a 	.word	0x4169999a

080014b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09c      	sub	sp, #112	@ 0x70
 80014b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ba:	f000 fc53 	bl	8001d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014be:	f000 f8f7 	bl	80016b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c2:	f000 fa15 	bl	80018f0 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014c6:	f000 f981 	bl	80017cc <MX_I2C1_Init>
  MX_TIM2_Init();
 80014ca:	f000 f9ad 	bl	8001828 <MX_TIM2_Init>
  MX_ADC1_Init();
 80014ce:	f000 f93f 	bl	8001750 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 80014d2:	f7ff fe8c 	bl	80011ee <lcd_init>
  lcd_clear();
 80014d6:	f7ff fe64 	bl	80011a2 <lcd_clear>
  lcd_put_cur(0,0);
 80014da:	2100      	movs	r1, #0
 80014dc:	2000      	movs	r0, #0
 80014de:	f7ff fe6a 	bl	80011b6 <lcd_put_cur>
  lcd_send_string("Control pH ON");
 80014e2:	486a      	ldr	r0, [pc, #424]	@ (800168c <main+0x1d8>)
 80014e4:	f7ff febe 	bl	8001264 <lcd_send_string>
  HAL_Delay(2000);
 80014e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80014ec:	f000 fc9c 	bl	8001e28 <HAL_Delay>

  //arrancar los canales PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Bomba subir pH
 80014f0:	2100      	movs	r1, #0
 80014f2:	4867      	ldr	r0, [pc, #412]	@ (8001690 <main+0x1dc>)
 80014f4:	f002 fde4 	bl	80040c0 <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Bomba bajar pH
 80014f8:	2104      	movs	r1, #4
 80014fa:	4865      	ldr	r0, [pc, #404]	@ (8001690 <main+0x1dc>)
 80014fc:	f002 fde0 	bl	80040c0 <HAL_TIM_PWM_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  float volt = leerVoltaje();
 8001500:	f7ff ff68 	bl	80013d4 <leerVoltaje>
 8001504:	6678      	str	r0, [r7, #100]	@ 0x64
	  float ph_actual = leerPH();
 8001506:	f7ff ff95 	bl	8001434 <leerPH>
 800150a:	6638      	str	r0, [r7, #96]	@ 0x60
	 float error = calcularErrorPH(ph_actual);
 800150c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800150e:	f7ff febf 	bl	8001290 <calcularErrorPH>
 8001512:	65f8      	str	r0, [r7, #92]	@ 0x5c

	  //Mostrar el valor actual de ph
	   lcd_clear();
 8001514:	f7ff fe45 	bl	80011a2 <lcd_clear>
	   lcd_put_cur(0,0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fe4b 	bl	80011b6 <lcd_put_cur>
	   char line1[17];
	   snprintf(line1, sizeof(line1), "pH: %.2f", ph_actual);
 8001520:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 800152e:	e9cd 2300 	strd	r2, r3, [sp]
 8001532:	4a58      	ldr	r2, [pc, #352]	@ (8001694 <main+0x1e0>)
 8001534:	2111      	movs	r1, #17
 8001536:	f003 febb 	bl	80052b0 <sniprintf>
	   lcd_send_string(line1);
 800153a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fe90 	bl	8001264 <lcd_send_string>
	   HAL_Delay(1000);
 8001544:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001548:	f000 fc6e 	bl	8001e28 <HAL_Delay>

	   // Segunda línea: voltaje
	   	  char line2[17];
	   	  snprintf(line2, sizeof(line2), "V: %.2f", volt);
 800154c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800154e:	f7fe ff6b 	bl	8000428 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800155a:	e9cd 2300 	strd	r2, r3, [sp]
 800155e:	4a4e      	ldr	r2, [pc, #312]	@ (8001698 <main+0x1e4>)
 8001560:	2111      	movs	r1, #17
 8001562:	f003 fea5 	bl	80052b0 <sniprintf>
	   	  lcd_put_cur(1,0);
 8001566:	2100      	movs	r1, #0
 8001568:	2001      	movs	r0, #1
 800156a:	f7ff fe24 	bl	80011b6 <lcd_put_cur>
	   	  lcd_send_string(line2);
 800156e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fe76 	bl	8001264 <lcd_send_string>

	   	  HAL_Delay(1000);
 8001578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800157c:	f000 fc54 	bl	8001e28 <HAL_Delay>



	  if (fabs(error)< PH_TOLERANCIA){
 8001580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001582:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001586:	4945      	ldr	r1, [pc, #276]	@ (800169c <main+0x1e8>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fd29 	bl	8000fe0 <__aeabi_fcmplt>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d010      	beq.n	80015b6 <main+0x102>
		  lcd_put_cur(1,0);
 8001594:	2100      	movs	r1, #0
 8001596:	2001      	movs	r0, #1
 8001598:	f7ff fe0d 	bl	80011b6 <lcd_put_cur>
		  lcd_send_string("pH ideal");
 800159c:	4840      	ldr	r0, [pc, #256]	@ (80016a0 <main+0x1ec>)
 800159e:	f7ff fe61 	bl	8001264 <lcd_send_string>
		  setBombaPWM(0, 1);
 80015a2:	2101      	movs	r1, #1
 80015a4:	f04f 0000 	mov.w	r0, #0
 80015a8:	f7ff fee4 	bl	8001374 <setBombaPWM>
		  HAL_Delay(2000); // espera 2 segundos
 80015ac:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80015b0:	f000 fc3a 	bl	8001e28 <HAL_Delay>
 80015b4:	e7a4      	b.n	8001500 <main+0x4c>

	  } else {

	  float sensibilidad = obtenerSensibilidad(error);
 80015b6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80015b8:	f7ff fe7a 	bl	80012b0 <obtenerSensibilidad>
 80015bc:	65b8      	str	r0, [r7, #88]	@ 0x58
	  float volumen = calcularVolumen(error, sensibilidad);
 80015be:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80015c0:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80015c2:	f7ff fe8b 	bl	80012dc <calcularVolumen>
 80015c6:	6578      	str	r0, [r7, #84]	@ 0x54
	  float duty = calcularDutyFinal(volumen, error);
 80015c8:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80015ca:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80015cc:	f7ff fe94 	bl	80012f8 <calcularDutyFinal>
 80015d0:	6538      	str	r0, [r7, #80]	@ 0x50


	    lcd_put_cur(1,0);
 80015d2:	2100      	movs	r1, #0
 80015d4:	2001      	movs	r0, #1
 80015d6:	f7ff fdee 	bl	80011b6 <lcd_put_cur>
	    char ph_line[17];
	    if(error < 0.0f){
 80015da:	f04f 0100 	mov.w	r1, #0
 80015de:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80015e0:	f7ff fcfe 	bl	8000fe0 <__aeabi_fcmplt>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d014      	beq.n	8001614 <main+0x160>
	    snprintf(ph_line, sizeof(ph_line), "Bajar: %.2f pH", fabs(error));
 80015ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80015ec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ff19 	bl	8000428 <__aeabi_f2d>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	f107 0014 	add.w	r0, r7, #20
 80015fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001602:	4a28      	ldr	r2, [pc, #160]	@ (80016a4 <main+0x1f0>)
 8001604:	2111      	movs	r1, #17
 8001606:	f003 fe53 	bl	80052b0 <sniprintf>
	    setBombaPWM(duty, 0);
 800160a:	2100      	movs	r1, #0
 800160c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800160e:	f7ff feb1 	bl	8001374 <setBombaPWM>
 8001612:	e013      	b.n	800163c <main+0x188>
	  } else{
	     snprintf(ph_line, sizeof(ph_line), "Subir: %.2f pH", fabs(error));
 8001614:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001616:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe ff04 	bl	8000428 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	f107 0014 	add.w	r0, r7, #20
 8001628:	e9cd 2300 	strd	r2, r3, [sp]
 800162c:	4a1e      	ldr	r2, [pc, #120]	@ (80016a8 <main+0x1f4>)
 800162e:	2111      	movs	r1, #17
 8001630:	f003 fe3e 	bl	80052b0 <sniprintf>
	     setBombaPWM(duty,1);
 8001634:	2101      	movs	r1, #1
 8001636:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001638:	f7ff fe9c 	bl	8001374 <setBombaPWM>
	  }

	    lcd_send_string(ph_line);       //  mostrar el texto
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fe0f 	bl	8001264 <lcd_send_string>
	    HAL_Delay(2000);
 8001646:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800164a:	f000 fbed 	bl	8001e28 <HAL_Delay>

	    HAL_Delay(2000);
 800164e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001652:	f000 fbe9 	bl	8001e28 <HAL_Delay>

	 // Secuencia: Duty de la bomba
	     lcd_clear();
 8001656:	f7ff fda4 	bl	80011a2 <lcd_clear>
	     lcd_put_cur(0,0);
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fdaa 	bl	80011b6 <lcd_put_cur>
	     char duty_line[17];
	     snprintf(duty_line, sizeof(duty_line), "Duty: %.2f", duty);
 8001662:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001664:	f7fe fee0 	bl	8000428 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4638      	mov	r0, r7
 800166e:	e9cd 2300 	strd	r2, r3, [sp]
 8001672:	4a0e      	ldr	r2, [pc, #56]	@ (80016ac <main+0x1f8>)
 8001674:	2111      	movs	r1, #17
 8001676:	f003 fe1b 	bl	80052b0 <sniprintf>
	     lcd_send_string(duty_line);
 800167a:	463b      	mov	r3, r7
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fdf1 	bl	8001264 <lcd_send_string>
	      HAL_Delay(2000);
 8001682:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001686:	f000 fbcf 	bl	8001e28 <HAL_Delay>
  {
 800168a:	e739      	b.n	8001500 <main+0x4c>
 800168c:	08007568 	.word	0x08007568
 8001690:	20000278 	.word	0x20000278
 8001694:	08007578 	.word	0x08007578
 8001698:	08007584 	.word	0x08007584
 800169c:	3d4ccccd 	.word	0x3d4ccccd
 80016a0:	0800758c 	.word	0x0800758c
 80016a4:	08007598 	.word	0x08007598
 80016a8:	080075a8 	.word	0x080075a8
 80016ac:	080075b8 	.word	0x080075b8

080016b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b094      	sub	sp, #80	@ 0x50
 80016b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016ba:	2228      	movs	r2, #40	@ 0x28
 80016bc:	2100      	movs	r1, #0
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fe6f 	bl	80053a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e0:	2302      	movs	r3, #2
 80016e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e4:	2301      	movs	r3, #1
 80016e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e8:	2310      	movs	r3, #16
 80016ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80016f4:	4618      	mov	r0, r3
 80016f6:	f001 ff17 	bl	8003528 <HAL_RCC_OscConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001700:	f000 f918 	bl	8001934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001704:	230f      	movs	r3, #15
 8001706:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001708:	2300      	movs	r3, #0
 800170a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f002 f984 	bl	8003a2c <HAL_RCC_ClockConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800172a:	f000 f903 	bl	8001934 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800172e:	2302      	movs	r3, #2
 8001730:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	4618      	mov	r0, r3
 800173a:	f002 fb05 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001744:	f000 f8f6 	bl	8001934 <Error_Handler>
  }
}
 8001748:	bf00      	nop
 800174a:	3750      	adds	r7, #80	@ 0x50
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001760:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <MX_ADC1_Init+0x74>)
 8001762:	4a19      	ldr	r2, [pc, #100]	@ (80017c8 <MX_ADC1_Init+0x78>)
 8001764:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001766:	4b17      	ldr	r3, [pc, #92]	@ (80017c4 <MX_ADC1_Init+0x74>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800176c:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <MX_ADC1_Init+0x74>)
 800176e:	2200      	movs	r2, #0
 8001770:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001772:	4b14      	ldr	r3, [pc, #80]	@ (80017c4 <MX_ADC1_Init+0x74>)
 8001774:	2200      	movs	r2, #0
 8001776:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001778:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <MX_ADC1_Init+0x74>)
 800177a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800177e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <MX_ADC1_Init+0x74>)
 8001782:	2200      	movs	r2, #0
 8001784:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001786:	4b0f      	ldr	r3, [pc, #60]	@ (80017c4 <MX_ADC1_Init+0x74>)
 8001788:	2201      	movs	r2, #1
 800178a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800178c:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <MX_ADC1_Init+0x74>)
 800178e:	f000 fb6f 	bl	8001e70 <HAL_ADC_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001798:	f000 f8cc 	bl	8001934 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800179c:	2303      	movs	r3, #3
 800179e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	@ (80017c4 <MX_ADC1_Init+0x74>)
 80017ae:	f000 fe23 	bl	80023f8 <HAL_ADC_ConfigChannel>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017b8:	f000 f8bc 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200001f4 	.word	0x200001f4
 80017c8:	40012400 	.word	0x40012400

080017cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017d0:	4b12      	ldr	r3, [pc, #72]	@ (800181c <MX_I2C1_Init+0x50>)
 80017d2:	4a13      	ldr	r2, [pc, #76]	@ (8001820 <MX_I2C1_Init+0x54>)
 80017d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017d6:	4b11      	ldr	r3, [pc, #68]	@ (800181c <MX_I2C1_Init+0x50>)
 80017d8:	4a12      	ldr	r2, [pc, #72]	@ (8001824 <MX_I2C1_Init+0x58>)
 80017da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <MX_I2C1_Init+0x50>)
 80017de:	2200      	movs	r2, #0
 80017e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80017e2:	4b0e      	ldr	r3, [pc, #56]	@ (800181c <MX_I2C1_Init+0x50>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <MX_I2C1_Init+0x50>)
 80017ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017f0:	4b0a      	ldr	r3, [pc, #40]	@ (800181c <MX_I2C1_Init+0x50>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017f6:	4b09      	ldr	r3, [pc, #36]	@ (800181c <MX_I2C1_Init+0x50>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fc:	4b07      	ldr	r3, [pc, #28]	@ (800181c <MX_I2C1_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001802:	4b06      	ldr	r3, [pc, #24]	@ (800181c <MX_I2C1_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	@ (800181c <MX_I2C1_Init+0x50>)
 800180a:	f001 f9f1 	bl	8002bf0 <HAL_I2C_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001814:	f000 f88e 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000224 	.word	0x20000224
 8001820:	40005400 	.word	0x40005400
 8001824:	000186a0 	.word	0x000186a0

08001828 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800184a:	4b28      	ldr	r3, [pc, #160]	@ (80018ec <MX_TIM2_Init+0xc4>)
 800184c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001850:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001852:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <MX_TIM2_Init+0xc4>)
 8001854:	2207      	movs	r2, #7
 8001856:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001858:	4b24      	ldr	r3, [pc, #144]	@ (80018ec <MX_TIM2_Init+0xc4>)
 800185a:	2200      	movs	r2, #0
 800185c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800185e:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <MX_TIM2_Init+0xc4>)
 8001860:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001864:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001866:	4b21      	ldr	r3, [pc, #132]	@ (80018ec <MX_TIM2_Init+0xc4>)
 8001868:	2200      	movs	r2, #0
 800186a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186c:	4b1f      	ldr	r3, [pc, #124]	@ (80018ec <MX_TIM2_Init+0xc4>)
 800186e:	2200      	movs	r2, #0
 8001870:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001872:	481e      	ldr	r0, [pc, #120]	@ (80018ec <MX_TIM2_Init+0xc4>)
 8001874:	f002 fbd4 	bl	8004020 <HAL_TIM_PWM_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800187e:	f000 f859 	bl	8001934 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800188a:	f107 0320 	add.w	r3, r7, #32
 800188e:	4619      	mov	r1, r3
 8001890:	4816      	ldr	r0, [pc, #88]	@ (80018ec <MX_TIM2_Init+0xc4>)
 8001892:	f002 ff93 	bl	80047bc <HAL_TIMEx_MasterConfigSynchronization>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 800189c:	f000 f84a 	bl	8001934 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a0:	2360      	movs	r3, #96	@ 0x60
 80018a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b0:	1d3b      	adds	r3, r7, #4
 80018b2:	2200      	movs	r2, #0
 80018b4:	4619      	mov	r1, r3
 80018b6:	480d      	ldr	r0, [pc, #52]	@ (80018ec <MX_TIM2_Init+0xc4>)
 80018b8:	f002 fca4 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80018c2:	f000 f837 	bl	8001934 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c6:	1d3b      	adds	r3, r7, #4
 80018c8:	2204      	movs	r2, #4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4807      	ldr	r0, [pc, #28]	@ (80018ec <MX_TIM2_Init+0xc4>)
 80018ce:	f002 fc99 	bl	8004204 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80018d8:	f000 f82c 	bl	8001934 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80018dc:	4803      	ldr	r0, [pc, #12]	@ (80018ec <MX_TIM2_Init+0xc4>)
 80018de:	f000 f8f7 	bl	8001ad0 <HAL_TIM_MspPostInit>

}
 80018e2:	bf00      	nop
 80018e4:	3728      	adds	r7, #40	@ 0x28
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000278 	.word	0x20000278

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001930 <MX_GPIO_Init+0x40>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001930 <MX_GPIO_Init+0x40>)
 80018fc:	f043 0304 	orr.w	r3, r3, #4
 8001900:	6193      	str	r3, [r2, #24]
 8001902:	4b0b      	ldr	r3, [pc, #44]	@ (8001930 <MX_GPIO_Init+0x40>)
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800190e:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <MX_GPIO_Init+0x40>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a07      	ldr	r2, [pc, #28]	@ (8001930 <MX_GPIO_Init+0x40>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <MX_GPIO_Init+0x40>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0308 	and.w	r3, r3, #8
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	bc80      	pop	{r7}
 800192e:	4770      	bx	lr
 8001930:	40021000 	.word	0x40021000

08001934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001938:	b672      	cpsid	i
}
 800193a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800193c:	bf00      	nop
 800193e:	e7fd      	b.n	800193c <Error_Handler+0x8>

08001940 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <HAL_MspInit+0x5c>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a14      	ldr	r2, [pc, #80]	@ (800199c <HAL_MspInit+0x5c>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	6193      	str	r3, [r2, #24]
 8001952:	4b12      	ldr	r3, [pc, #72]	@ (800199c <HAL_MspInit+0x5c>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 0301 	and.w	r3, r3, #1
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800195e:	4b0f      	ldr	r3, [pc, #60]	@ (800199c <HAL_MspInit+0x5c>)
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	4a0e      	ldr	r2, [pc, #56]	@ (800199c <HAL_MspInit+0x5c>)
 8001964:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001968:	61d3      	str	r3, [r2, #28]
 800196a:	4b0c      	ldr	r3, [pc, #48]	@ (800199c <HAL_MspInit+0x5c>)
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001976:	4b0a      	ldr	r3, [pc, #40]	@ (80019a0 <HAL_MspInit+0x60>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	4a04      	ldr	r2, [pc, #16]	@ (80019a0 <HAL_MspInit+0x60>)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000
 80019a0:	40010000 	.word	0x40010000

080019a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 0310 	add.w	r3, r7, #16
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <HAL_ADC_MspInit+0x6c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d121      	bne.n	8001a08 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80019c4:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <HAL_ADC_MspInit+0x70>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <HAL_ADC_MspInit+0x70>)
 80019ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_ADC_MspInit+0x70>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019d8:	60fb      	str	r3, [r7, #12]
 80019da:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001a14 <HAL_ADC_MspInit+0x70>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	@ (8001a14 <HAL_ADC_MspInit+0x70>)
 80019e2:	f043 0304 	orr.w	r3, r3, #4
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_ADC_MspInit+0x70>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0304 	and.w	r3, r3, #4
 80019f0:	60bb      	str	r3, [r7, #8]
 80019f2:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80019f4:	2308      	movs	r3, #8
 80019f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019f8:	2303      	movs	r3, #3
 80019fa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	4805      	ldr	r0, [pc, #20]	@ (8001a18 <HAL_ADC_MspInit+0x74>)
 8001a04:	f000 ff70 	bl	80028e8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001a08:	bf00      	nop
 8001a0a:	3720      	adds	r7, #32
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40012400 	.word	0x40012400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010800 	.word	0x40010800

08001a1c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b088      	sub	sp, #32
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a15      	ldr	r2, [pc, #84]	@ (8001a8c <HAL_I2C_MspInit+0x70>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d123      	bne.n	8001a84 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <HAL_I2C_MspInit+0x74>)
 8001a3e:	699b      	ldr	r3, [r3, #24]
 8001a40:	4a13      	ldr	r2, [pc, #76]	@ (8001a90 <HAL_I2C_MspInit+0x74>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	6193      	str	r3, [r2, #24]
 8001a48:	4b11      	ldr	r3, [pc, #68]	@ (8001a90 <HAL_I2C_MspInit+0x74>)
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	f003 0308 	and.w	r3, r3, #8
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a54:	23c0      	movs	r3, #192	@ 0xc0
 8001a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a58:	2312      	movs	r3, #18
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0310 	add.w	r3, r7, #16
 8001a64:	4619      	mov	r1, r3
 8001a66:	480b      	ldr	r0, [pc, #44]	@ (8001a94 <HAL_I2C_MspInit+0x78>)
 8001a68:	f000 ff3e 	bl	80028e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_I2C_MspInit+0x74>)
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	4a07      	ldr	r2, [pc, #28]	@ (8001a90 <HAL_I2C_MspInit+0x74>)
 8001a72:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a76:	61d3      	str	r3, [r2, #28]
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <HAL_I2C_MspInit+0x74>)
 8001a7a:	69db      	ldr	r3, [r3, #28]
 8001a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40005400 	.word	0x40005400
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40010c00 	.word	0x40010c00

08001a98 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa8:	d10b      	bne.n	8001ac2 <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aaa:	4b08      	ldr	r3, [pc, #32]	@ (8001acc <HAL_TIM_PWM_MspInit+0x34>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	4a07      	ldr	r2, [pc, #28]	@ (8001acc <HAL_TIM_PWM_MspInit+0x34>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	61d3      	str	r3, [r2, #28]
 8001ab6:	4b05      	ldr	r3, [pc, #20]	@ (8001acc <HAL_TIM_PWM_MspInit+0x34>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b088      	sub	sp, #32
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aee:	d117      	bne.n	8001b20 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <HAL_TIM_MspPostInit+0x58>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	4a0c      	ldr	r2, [pc, #48]	@ (8001b28 <HAL_TIM_MspPostInit+0x58>)
 8001af6:	f043 0304 	orr.w	r3, r3, #4
 8001afa:	6193      	str	r3, [r2, #24]
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <HAL_TIM_MspPostInit+0x58>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0304 	and.w	r3, r3, #4
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b14:	f107 0310 	add.w	r3, r7, #16
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4804      	ldr	r0, [pc, #16]	@ (8001b2c <HAL_TIM_MspPostInit+0x5c>)
 8001b1c:	f000 fee4 	bl	80028e8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b20:	bf00      	nop
 8001b22:	3720      	adds	r7, #32
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	40010800 	.word	0x40010800

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b34:	bf00      	nop
 8001b36:	e7fd      	b.n	8001b34 <NMI_Handler+0x4>

08001b38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3c:	bf00      	nop
 8001b3e:	e7fd      	b.n	8001b3c <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <MemManage_Handler+0x4>

08001b48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <BusFault_Handler+0x4>

08001b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <UsageFault_Handler+0x4>

08001b58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr

08001b64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bc80      	pop	{r7}
 8001b6e:	4770      	bx	lr

08001b70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b80:	f000 f936 	bl	8001df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  return 1;
 8001b8c:	2301      	movs	r3, #1
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <_kill>:

int _kill(int pid, int sig)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ba0:	f003 fc52 	bl	8005448 <__errno>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2216      	movs	r2, #22
 8001ba8:	601a      	str	r2, [r3, #0]
  return -1;
 8001baa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <_exit>:

void _exit (int status)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bbe:	f04f 31ff 	mov.w	r1, #4294967295
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffe7 	bl	8001b96 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <_exit+0x12>

08001bcc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]
 8001bdc:	e00a      	b.n	8001bf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bde:	f3af 8000 	nop.w
 8001be2:	4601      	mov	r1, r0
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	60ba      	str	r2, [r7, #8]
 8001bea:	b2ca      	uxtb	r2, r1
 8001bec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	697a      	ldr	r2, [r7, #20]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dbf0      	blt.n	8001bde <_read+0x12>
  }

  return len;
 8001bfc:	687b      	ldr	r3, [r7, #4]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	e009      	b.n	8001c2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	60ba      	str	r2, [r7, #8]
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	dbf1      	blt.n	8001c18 <_write+0x12>
  }
  return len;
 8001c34:	687b      	ldr	r3, [r7, #4]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <_close>:

int _close(int file)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c64:	605a      	str	r2, [r3, #4]
  return 0;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <_isatty>:

int _isatty(int file)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c7a:	2301      	movs	r3, #1
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	60f8      	str	r0, [r7, #12]
 8001c8e:	60b9      	str	r1, [r7, #8]
 8001c90:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
	...

08001ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b086      	sub	sp, #24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ca8:	4a14      	ldr	r2, [pc, #80]	@ (8001cfc <_sbrk+0x5c>)
 8001caa:	4b15      	ldr	r3, [pc, #84]	@ (8001d00 <_sbrk+0x60>)
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cb4:	4b13      	ldr	r3, [pc, #76]	@ (8001d04 <_sbrk+0x64>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d102      	bne.n	8001cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <_sbrk+0x64>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <_sbrk+0x68>)
 8001cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <_sbrk+0x64>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4413      	add	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d207      	bcs.n	8001ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cd0:	f003 fbba 	bl	8005448 <__errno>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	220c      	movs	r2, #12
 8001cd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295
 8001cde:	e009      	b.n	8001cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <_sbrk+0x64>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	@ (8001d04 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	4a05      	ldr	r2, [pc, #20]	@ (8001d04 <_sbrk+0x64>)
 8001cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20005000 	.word	0x20005000
 8001d00:	00000400 	.word	0x00000400
 8001d04:	200002c0 	.word	0x200002c0
 8001d08:	20000418 	.word	0x20000418

08001d0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d18:	f7ff fff8 	bl	8001d0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d1c:	480b      	ldr	r0, [pc, #44]	@ (8001d4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001d1e:	490c      	ldr	r1, [pc, #48]	@ (8001d50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001d20:	4a0c      	ldr	r2, [pc, #48]	@ (8001d54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d24:	e002      	b.n	8001d2c <LoopCopyDataInit>

08001d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d2a:	3304      	adds	r3, #4

08001d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d30:	d3f9      	bcc.n	8001d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001d34:	4c09      	ldr	r4, [pc, #36]	@ (8001d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d38:	e001      	b.n	8001d3e <LoopFillZerobss>

08001d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d3c:	3204      	adds	r2, #4

08001d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d40:	d3fb      	bcc.n	8001d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d42:	f003 fb87 	bl	8005454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d46:	f7ff fbb5 	bl	80014b4 <main>
  bx lr
 8001d4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d50:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d54:	08007984 	.word	0x08007984
  ldr r2, =_sbss
 8001d58:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d5c:	20000414 	.word	0x20000414

08001d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d60:	e7fe      	b.n	8001d60 <ADC1_2_IRQHandler>
	...

08001d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d68:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <HAL_Init+0x28>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a07      	ldr	r2, [pc, #28]	@ (8001d8c <HAL_Init+0x28>)
 8001d6e:	f043 0310 	orr.w	r3, r3, #16
 8001d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d74:	2003      	movs	r0, #3
 8001d76:	f000 fd83 	bl	8002880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7a:	200f      	movs	r0, #15
 8001d7c:	f000 f808 	bl	8001d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d80:	f7ff fdde 	bl	8001940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000

08001d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_InitTick+0x54>)
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	4b12      	ldr	r3, [pc, #72]	@ (8001de8 <HAL_InitTick+0x58>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f000 fd8d 	bl	80028ce <HAL_SYSTICK_Config>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e00e      	b.n	8001ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b0f      	cmp	r3, #15
 8001dc2:	d80a      	bhi.n	8001dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dcc:	f000 fd63 	bl	8002896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd0:	4a06      	ldr	r2, [pc, #24]	@ (8001dec <HAL_InitTick+0x5c>)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	e000      	b.n	8001ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3708      	adds	r7, #8
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	20000004 	.word	0x20000004
 8001de8:	2000000c 	.word	0x2000000c
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df4:	4b05      	ldr	r3, [pc, #20]	@ (8001e0c <HAL_IncTick+0x1c>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	461a      	mov	r2, r3
 8001dfa:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_IncTick+0x20>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4413      	add	r3, r2
 8001e00:	4a03      	ldr	r2, [pc, #12]	@ (8001e10 <HAL_IncTick+0x20>)
 8001e02:	6013      	str	r3, [r2, #0]
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	2000000c 	.word	0x2000000c
 8001e10:	200002c4 	.word	0x200002c4

08001e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return uwTick;
 8001e18:	4b02      	ldr	r3, [pc, #8]	@ (8001e24 <HAL_GetTick+0x10>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	200002c4 	.word	0x200002c4

08001e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e30:	f7ff fff0 	bl	8001e14 <HAL_GetTick>
 8001e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e40:	d005      	beq.n	8001e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e42:	4b0a      	ldr	r3, [pc, #40]	@ (8001e6c <HAL_Delay+0x44>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e4e:	bf00      	nop
 8001e50:	f7ff ffe0 	bl	8001e14 <HAL_GetTick>
 8001e54:	4602      	mov	r2, r0
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	68fa      	ldr	r2, [r7, #12]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d8f7      	bhi.n	8001e50 <HAL_Delay+0x28>
  {
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	2000000c 	.word	0x2000000c

08001e70 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e0be      	b.n	8002010 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d109      	bne.n	8001eb4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff fd78 	bl	80019a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fbf1 	bl	800269c <ADC_ConversionStop_Disable>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ec2:	f003 0310 	and.w	r3, r3, #16
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f040 8099 	bne.w	8001ffe <HAL_ADC_Init+0x18e>
 8001ecc:	7dfb      	ldrb	r3, [r7, #23]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 8095 	bne.w	8001ffe <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ed8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	f043 0202 	orr.w	r2, r3, #2
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ef0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7b1b      	ldrb	r3, [r3, #12]
 8001ef6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ef8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001efa:	68ba      	ldr	r2, [r7, #8]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f08:	d003      	beq.n	8001f12 <HAL_ADC_Init+0xa2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d102      	bne.n	8001f18 <HAL_ADC_Init+0xa8>
 8001f12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f16:	e000      	b.n	8001f1a <HAL_ADC_Init+0xaa>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	7d1b      	ldrb	r3, [r3, #20]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d119      	bne.n	8001f5c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	7b1b      	ldrb	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d109      	bne.n	8001f44 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	035a      	lsls	r2, r3, #13
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	e00b      	b.n	8001f5c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f48:	f043 0220 	orr.w	r2, r3, #32
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	693a      	ldr	r2, [r7, #16]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b28      	ldr	r3, [pc, #160]	@ (8002018 <HAL_ADC_Init+0x1a8>)
 8001f78:	4013      	ands	r3, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6812      	ldr	r2, [r2, #0]
 8001f7e:	68b9      	ldr	r1, [r7, #8]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f8c:	d003      	beq.n	8001f96 <HAL_ADC_Init+0x126>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d104      	bne.n	8001fa0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	051b      	lsls	r3, r3, #20
 8001f9e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	4b18      	ldr	r3, [pc, #96]	@ (800201c <HAL_ADC_Init+0x1ac>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d10b      	bne.n	8001fdc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fce:	f023 0303 	bic.w	r3, r3, #3
 8001fd2:	f043 0201 	orr.w	r2, r3, #1
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001fda:	e018      	b.n	800200e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe0:	f023 0312 	bic.w	r3, r3, #18
 8001fe4:	f043 0210 	orr.w	r2, r3, #16
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff0:	f043 0201 	orr.w	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001ffc:	e007      	b.n	800200e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002002:	f043 0210 	orr.w	r2, r3, #16
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800200e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002010:	4618      	mov	r0, r3
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	ffe1f7fd 	.word	0xffe1f7fd
 800201c:	ff1f0efe 	.word	0xff1f0efe

08002020 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_ADC_Start+0x1a>
 8002036:	2302      	movs	r3, #2
 8002038:	e098      	b.n	800216c <HAL_ADC_Start+0x14c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fad0 	bl	80025e8 <ADC_Enable>
 8002048:	4603      	mov	r3, r0
 800204a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800204c:	7bfb      	ldrb	r3, [r7, #15]
 800204e:	2b00      	cmp	r3, #0
 8002050:	f040 8087 	bne.w	8002162 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800205c:	f023 0301 	bic.w	r3, r3, #1
 8002060:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a41      	ldr	r2, [pc, #260]	@ (8002174 <HAL_ADC_Start+0x154>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d105      	bne.n	800207e <HAL_ADC_Start+0x5e>
 8002072:	4b41      	ldr	r3, [pc, #260]	@ (8002178 <HAL_ADC_Start+0x158>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d115      	bne.n	80020aa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002082:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002094:	2b00      	cmp	r3, #0
 8002096:	d026      	beq.n	80020e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020a0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020a8:	e01d      	b.n	80020e6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a2f      	ldr	r2, [pc, #188]	@ (8002178 <HAL_ADC_Start+0x158>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d004      	beq.n	80020ca <HAL_ADC_Start+0xaa>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a2b      	ldr	r2, [pc, #172]	@ (8002174 <HAL_ADC_Start+0x154>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d10d      	bne.n	80020e6 <HAL_ADC_Start+0xc6>
 80020ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002178 <HAL_ADC_Start+0x158>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020da:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80020de:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f6:	f023 0206 	bic.w	r2, r3, #6
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80020fe:	e002      	b.n	8002106 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f06f 0202 	mvn.w	r2, #2
 8002116:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002122:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002126:	d113      	bne.n	8002150 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800212c:	4a11      	ldr	r2, [pc, #68]	@ (8002174 <HAL_ADC_Start+0x154>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d105      	bne.n	800213e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002132:	4b11      	ldr	r3, [pc, #68]	@ (8002178 <HAL_ADC_Start+0x158>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800213a:	2b00      	cmp	r3, #0
 800213c:	d108      	bne.n	8002150 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800214c:	609a      	str	r2, [r3, #8]
 800214e:	e00c      	b.n	800216a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	e003      	b.n	800216a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2200      	movs	r2, #0
 8002166:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800216a:	7bfb      	ldrb	r3, [r7, #15]
}
 800216c:	4618      	mov	r0, r3
 800216e:	3710      	adds	r7, #16
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40012800 	.word	0x40012800
 8002178:	40012400 	.word	0x40012400

0800217c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002184:	2300      	movs	r3, #0
 8002186:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800218e:	2b01      	cmp	r3, #1
 8002190:	d101      	bne.n	8002196 <HAL_ADC_Stop+0x1a>
 8002192:	2302      	movs	r3, #2
 8002194:	e01a      	b.n	80021cc <HAL_ADC_Stop+0x50>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2201      	movs	r2, #1
 800219a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f000 fa7c 	bl	800269c <ADC_ConversionStop_Disable>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80021b6:	f023 0301 	bic.w	r3, r3, #1
 80021ba:	f043 0201 	orr.w	r2, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80021ea:	f7ff fe13 	bl	8001e14 <HAL_GetTick>
 80021ee:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d00b      	beq.n	8002216 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0d3      	b.n	80023be <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002220:	2b00      	cmp	r3, #0
 8002222:	d131      	bne.n	8002288 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800222e:	2b00      	cmp	r3, #0
 8002230:	d12a      	bne.n	8002288 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002232:	e021      	b.n	8002278 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800223a:	d01d      	beq.n	8002278 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d007      	beq.n	8002252 <HAL_ADC_PollForConversion+0x7e>
 8002242:	f7ff fde7 	bl	8001e14 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d212      	bcs.n	8002278 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10b      	bne.n	8002278 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	f043 0204 	orr.w	r2, r3, #4
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e0a2      	b.n	80023be <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0d6      	beq.n	8002234 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002286:	e070      	b.n	800236a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002288:	4b4f      	ldr	r3, [pc, #316]	@ (80023c8 <HAL_ADC_PollForConversion+0x1f4>)
 800228a:	681c      	ldr	r4, [r3, #0]
 800228c:	2002      	movs	r0, #2
 800228e:	f001 fe11 	bl	8003eb4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002292:	4603      	mov	r3, r0
 8002294:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	4b4b      	ldr	r3, [pc, #300]	@ (80023cc <HAL_ADC_PollForConversion+0x1f8>)
 80022a0:	400b      	ands	r3, r1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d118      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x104>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68d9      	ldr	r1, [r3, #12]
 80022ac:	4b48      	ldr	r3, [pc, #288]	@ (80023d0 <HAL_ADC_PollForConversion+0x1fc>)
 80022ae:	400b      	ands	r3, r1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d111      	bne.n	80022d8 <HAL_ADC_PollForConversion+0x104>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6919      	ldr	r1, [r3, #16]
 80022ba:	4b46      	ldr	r3, [pc, #280]	@ (80023d4 <HAL_ADC_PollForConversion+0x200>)
 80022bc:	400b      	ands	r3, r1
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d108      	bne.n	80022d4 <HAL_ADC_PollForConversion+0x100>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	68d9      	ldr	r1, [r3, #12]
 80022c8:	4b43      	ldr	r3, [pc, #268]	@ (80023d8 <HAL_ADC_PollForConversion+0x204>)
 80022ca:	400b      	ands	r3, r1
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_PollForConversion+0x100>
 80022d0:	2314      	movs	r3, #20
 80022d2:	e020      	b.n	8002316 <HAL_ADC_PollForConversion+0x142>
 80022d4:	2329      	movs	r3, #41	@ 0x29
 80022d6:	e01e      	b.n	8002316 <HAL_ADC_PollForConversion+0x142>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	4b3d      	ldr	r3, [pc, #244]	@ (80023d4 <HAL_ADC_PollForConversion+0x200>)
 80022e0:	400b      	ands	r3, r1
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d106      	bne.n	80022f4 <HAL_ADC_PollForConversion+0x120>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	68d9      	ldr	r1, [r3, #12]
 80022ec:	4b3a      	ldr	r3, [pc, #232]	@ (80023d8 <HAL_ADC_PollForConversion+0x204>)
 80022ee:	400b      	ands	r3, r1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00d      	beq.n	8002310 <HAL_ADC_PollForConversion+0x13c>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6919      	ldr	r1, [r3, #16]
 80022fa:	4b38      	ldr	r3, [pc, #224]	@ (80023dc <HAL_ADC_PollForConversion+0x208>)
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d108      	bne.n	8002314 <HAL_ADC_PollForConversion+0x140>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68d9      	ldr	r1, [r3, #12]
 8002308:	4b34      	ldr	r3, [pc, #208]	@ (80023dc <HAL_ADC_PollForConversion+0x208>)
 800230a:	400b      	ands	r3, r1
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_PollForConversion+0x140>
 8002310:	2354      	movs	r3, #84	@ 0x54
 8002312:	e000      	b.n	8002316 <HAL_ADC_PollForConversion+0x142>
 8002314:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002316:	fb02 f303 	mul.w	r3, r2, r3
 800231a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800231c:	e021      	b.n	8002362 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d01a      	beq.n	800235c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d007      	beq.n	800233c <HAL_ADC_PollForConversion+0x168>
 800232c:	f7ff fd72 	bl	8001e14 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d20f      	bcs.n	800235c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d90b      	bls.n	800235c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002348:	f043 0204 	orr.w	r2, r3, #4
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e030      	b.n	80023be <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	3301      	adds	r3, #1
 8002360:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	429a      	cmp	r2, r3
 8002368:	d8d9      	bhi.n	800231e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f06f 0212 	mvn.w	r2, #18
 8002372:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002378:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800238a:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800238e:	d115      	bne.n	80023bc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002394:	2b00      	cmp	r3, #0
 8002396:	d111      	bne.n	80023bc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023bc:	2300      	movs	r3, #0
}
 80023be:	4618      	mov	r0, r3
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd90      	pop	{r4, r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000004 	.word	0x20000004
 80023cc:	24924924 	.word	0x24924924
 80023d0:	00924924 	.word	0x00924924
 80023d4:	12492492 	.word	0x12492492
 80023d8:	00492492 	.word	0x00492492
 80023dc:	00249249 	.word	0x00249249

080023e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bc80      	pop	{r7}
 80023f6:	4770      	bx	lr

080023f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80023f8:	b480      	push	{r7}
 80023fa:	b085      	sub	sp, #20
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002410:	2b01      	cmp	r3, #1
 8002412:	d101      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x20>
 8002414:	2302      	movs	r3, #2
 8002416:	e0dc      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x1da>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b06      	cmp	r3, #6
 8002426:	d81c      	bhi.n	8002462 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	4413      	add	r3, r2
 8002438:	3b05      	subs	r3, #5
 800243a:	221f      	movs	r2, #31
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	43db      	mvns	r3, r3
 8002442:	4019      	ands	r1, r3
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	4413      	add	r3, r2
 8002452:	3b05      	subs	r3, #5
 8002454:	fa00 f203 	lsl.w	r2, r0, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002460:	e03c      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d81c      	bhi.n	80024a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4413      	add	r3, r2
 800247a:	3b23      	subs	r3, #35	@ 0x23
 800247c:	221f      	movs	r2, #31
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	4019      	ands	r1, r3
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	4413      	add	r3, r2
 8002494:	3b23      	subs	r3, #35	@ 0x23
 8002496:	fa00 f203 	lsl.w	r2, r0, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80024a2:	e01b      	b.n	80024dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	3b41      	subs	r3, #65	@ 0x41
 80024b6:	221f      	movs	r2, #31
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	43db      	mvns	r3, r3
 80024be:	4019      	ands	r1, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	3b41      	subs	r3, #65	@ 0x41
 80024d0:	fa00 f203 	lsl.w	r2, r0, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b09      	cmp	r3, #9
 80024e2:	d91c      	bls.n	800251e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68d9      	ldr	r1, [r3, #12]
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4613      	mov	r3, r2
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	4413      	add	r3, r2
 80024f4:	3b1e      	subs	r3, #30
 80024f6:	2207      	movs	r2, #7
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	4019      	ands	r1, r3
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	6898      	ldr	r0, [r3, #8]
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	3b1e      	subs	r3, #30
 8002510:	fa00 f203 	lsl.w	r2, r0, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	60da      	str	r2, [r3, #12]
 800251c:	e019      	b.n	8002552 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6919      	ldr	r1, [r3, #16]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4613      	mov	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4413      	add	r3, r2
 800252e:	2207      	movs	r2, #7
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	4019      	ands	r1, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6898      	ldr	r0, [r3, #8]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4613      	mov	r3, r2
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	4413      	add	r3, r2
 8002546:	fa00 f203 	lsl.w	r2, r0, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2b10      	cmp	r3, #16
 8002558:	d003      	beq.n	8002562 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800255e:	2b11      	cmp	r3, #17
 8002560:	d132      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <HAL_ADC_ConfigChannel+0x1e4>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d125      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d126      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002588:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b10      	cmp	r3, #16
 8002590:	d11a      	bne.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002592:	4b13      	ldr	r3, [pc, #76]	@ (80025e0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a13      	ldr	r2, [pc, #76]	@ (80025e4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002598:	fba2 2303 	umull	r2, r3, r2, r3
 800259c:	0c9a      	lsrs	r2, r3, #18
 800259e:	4613      	mov	r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4413      	add	r3, r2
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025a8:	e002      	b.n	80025b0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	3b01      	subs	r3, #1
 80025ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1f9      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x1b2>
 80025b6:	e007      	b.n	80025c8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80025d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3714      	adds	r7, #20
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	40012400 	.word	0x40012400
 80025e0:	20000004 	.word	0x20000004
 80025e4:	431bde83 	.word	0x431bde83

080025e8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b01      	cmp	r3, #1
 8002604:	d040      	beq.n	8002688 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f042 0201 	orr.w	r2, r2, #1
 8002614:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002616:	4b1f      	ldr	r3, [pc, #124]	@ (8002694 <ADC_Enable+0xac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1f      	ldr	r2, [pc, #124]	@ (8002698 <ADC_Enable+0xb0>)
 800261c:	fba2 2303 	umull	r2, r3, r2, r3
 8002620:	0c9b      	lsrs	r3, r3, #18
 8002622:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002624:	e002      	b.n	800262c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	3b01      	subs	r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d1f9      	bne.n	8002626 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002632:	f7ff fbef 	bl	8001e14 <HAL_GetTick>
 8002636:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002638:	e01f      	b.n	800267a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800263a:	f7ff fbeb 	bl	8001e14 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d918      	bls.n	800267a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d011      	beq.n	800267a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265a:	f043 0210 	orr.w	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002666:	f043 0201 	orr.w	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e007      	b.n	800268a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b01      	cmp	r3, #1
 8002686:	d1d8      	bne.n	800263a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3710      	adds	r7, #16
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20000004 	.word	0x20000004
 8002698:	431bde83 	.word	0x431bde83

0800269c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d12e      	bne.n	8002714 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80026c6:	f7ff fba5 	bl	8001e14 <HAL_GetTick>
 80026ca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026cc:	e01b      	b.n	8002706 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026ce:	f7ff fba1 	bl	8001e14 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d914      	bls.n	8002706 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10d      	bne.n	8002706 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e007      	b.n	8002716 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b01      	cmp	r3, #1
 8002712:	d0dc      	beq.n	80026ce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002730:	4b0c      	ldr	r3, [pc, #48]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800273c:	4013      	ands	r3, r2
 800273e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002748:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800274c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002752:	4a04      	ldr	r2, [pc, #16]	@ (8002764 <__NVIC_SetPriorityGrouping+0x44>)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	60d3      	str	r3, [r2, #12]
}
 8002758:	bf00      	nop
 800275a:	3714      	adds	r7, #20
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800276c:	4b04      	ldr	r3, [pc, #16]	@ (8002780 <__NVIC_GetPriorityGrouping+0x18>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	0a1b      	lsrs	r3, r3, #8
 8002772:	f003 0307 	and.w	r3, r3, #7
}
 8002776:	4618      	mov	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	e000ed00 	.word	0xe000ed00

08002784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	6039      	str	r1, [r7, #0]
 800278e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002794:	2b00      	cmp	r3, #0
 8002796:	db0a      	blt.n	80027ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	b2da      	uxtb	r2, r3
 800279c:	490c      	ldr	r1, [pc, #48]	@ (80027d0 <__NVIC_SetPriority+0x4c>)
 800279e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a2:	0112      	lsls	r2, r2, #4
 80027a4:	b2d2      	uxtb	r2, r2
 80027a6:	440b      	add	r3, r1
 80027a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027ac:	e00a      	b.n	80027c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4908      	ldr	r1, [pc, #32]	@ (80027d4 <__NVIC_SetPriority+0x50>)
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	3b04      	subs	r3, #4
 80027bc:	0112      	lsls	r2, r2, #4
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	440b      	add	r3, r1
 80027c2:	761a      	strb	r2, [r3, #24]
}
 80027c4:	bf00      	nop
 80027c6:	370c      	adds	r7, #12
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bc80      	pop	{r7}
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	e000e100 	.word	0xe000e100
 80027d4:	e000ed00 	.word	0xe000ed00

080027d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d8:	b480      	push	{r7}
 80027da:	b089      	sub	sp, #36	@ 0x24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f1c3 0307 	rsb	r3, r3, #7
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	bf28      	it	cs
 80027f6:	2304      	movcs	r3, #4
 80027f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3304      	adds	r3, #4
 80027fe:	2b06      	cmp	r3, #6
 8002800:	d902      	bls.n	8002808 <NVIC_EncodePriority+0x30>
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	3b03      	subs	r3, #3
 8002806:	e000      	b.n	800280a <NVIC_EncodePriority+0x32>
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	43da      	mvns	r2, r3
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	401a      	ands	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	fa01 f303 	lsl.w	r3, r1, r3
 800282a:	43d9      	mvns	r1, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002830:	4313      	orrs	r3, r2
         );
}
 8002832:	4618      	mov	r0, r3
 8002834:	3724      	adds	r7, #36	@ 0x24
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3b01      	subs	r3, #1
 8002848:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800284c:	d301      	bcc.n	8002852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284e:	2301      	movs	r3, #1
 8002850:	e00f      	b.n	8002872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <SysTick_Config+0x40>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3b01      	subs	r3, #1
 8002858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800285a:	210f      	movs	r1, #15
 800285c:	f04f 30ff 	mov.w	r0, #4294967295
 8002860:	f7ff ff90 	bl	8002784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002864:	4b05      	ldr	r3, [pc, #20]	@ (800287c <SysTick_Config+0x40>)
 8002866:	2200      	movs	r2, #0
 8002868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800286a:	4b04      	ldr	r3, [pc, #16]	@ (800287c <SysTick_Config+0x40>)
 800286c:	2207      	movs	r2, #7
 800286e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	e000e010 	.word	0xe000e010

08002880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff ff49 	bl	8002720 <__NVIC_SetPriorityGrouping>
}
 800288e:	bf00      	nop
 8002890:	3708      	adds	r7, #8
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002896:	b580      	push	{r7, lr}
 8002898:	b086      	sub	sp, #24
 800289a:	af00      	add	r7, sp, #0
 800289c:	4603      	mov	r3, r0
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a8:	f7ff ff5e 	bl	8002768 <__NVIC_GetPriorityGrouping>
 80028ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68b9      	ldr	r1, [r7, #8]
 80028b2:	6978      	ldr	r0, [r7, #20]
 80028b4:	f7ff ff90 	bl	80027d8 <NVIC_EncodePriority>
 80028b8:	4602      	mov	r2, r0
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff5f 	bl	8002784 <__NVIC_SetPriority>
}
 80028c6:	bf00      	nop
 80028c8:	3718      	adds	r7, #24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b082      	sub	sp, #8
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7ff ffb0 	bl	800283c <SysTick_Config>
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b08b      	sub	sp, #44	@ 0x2c
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80028f2:	2300      	movs	r3, #0
 80028f4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028fa:	e169      	b.n	8002bd0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028fc:	2201      	movs	r2, #1
 80028fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	69fa      	ldr	r2, [r7, #28]
 800290c:	4013      	ands	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	429a      	cmp	r2, r3
 8002916:	f040 8158 	bne.w	8002bca <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4a9a      	ldr	r2, [pc, #616]	@ (8002b88 <HAL_GPIO_Init+0x2a0>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d05e      	beq.n	80029e2 <HAL_GPIO_Init+0xfa>
 8002924:	4a98      	ldr	r2, [pc, #608]	@ (8002b88 <HAL_GPIO_Init+0x2a0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d875      	bhi.n	8002a16 <HAL_GPIO_Init+0x12e>
 800292a:	4a98      	ldr	r2, [pc, #608]	@ (8002b8c <HAL_GPIO_Init+0x2a4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d058      	beq.n	80029e2 <HAL_GPIO_Init+0xfa>
 8002930:	4a96      	ldr	r2, [pc, #600]	@ (8002b8c <HAL_GPIO_Init+0x2a4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d86f      	bhi.n	8002a16 <HAL_GPIO_Init+0x12e>
 8002936:	4a96      	ldr	r2, [pc, #600]	@ (8002b90 <HAL_GPIO_Init+0x2a8>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d052      	beq.n	80029e2 <HAL_GPIO_Init+0xfa>
 800293c:	4a94      	ldr	r2, [pc, #592]	@ (8002b90 <HAL_GPIO_Init+0x2a8>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d869      	bhi.n	8002a16 <HAL_GPIO_Init+0x12e>
 8002942:	4a94      	ldr	r2, [pc, #592]	@ (8002b94 <HAL_GPIO_Init+0x2ac>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d04c      	beq.n	80029e2 <HAL_GPIO_Init+0xfa>
 8002948:	4a92      	ldr	r2, [pc, #584]	@ (8002b94 <HAL_GPIO_Init+0x2ac>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d863      	bhi.n	8002a16 <HAL_GPIO_Init+0x12e>
 800294e:	4a92      	ldr	r2, [pc, #584]	@ (8002b98 <HAL_GPIO_Init+0x2b0>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d046      	beq.n	80029e2 <HAL_GPIO_Init+0xfa>
 8002954:	4a90      	ldr	r2, [pc, #576]	@ (8002b98 <HAL_GPIO_Init+0x2b0>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d85d      	bhi.n	8002a16 <HAL_GPIO_Init+0x12e>
 800295a:	2b12      	cmp	r3, #18
 800295c:	d82a      	bhi.n	80029b4 <HAL_GPIO_Init+0xcc>
 800295e:	2b12      	cmp	r3, #18
 8002960:	d859      	bhi.n	8002a16 <HAL_GPIO_Init+0x12e>
 8002962:	a201      	add	r2, pc, #4	@ (adr r2, 8002968 <HAL_GPIO_Init+0x80>)
 8002964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002968:	080029e3 	.word	0x080029e3
 800296c:	080029bd 	.word	0x080029bd
 8002970:	080029cf 	.word	0x080029cf
 8002974:	08002a11 	.word	0x08002a11
 8002978:	08002a17 	.word	0x08002a17
 800297c:	08002a17 	.word	0x08002a17
 8002980:	08002a17 	.word	0x08002a17
 8002984:	08002a17 	.word	0x08002a17
 8002988:	08002a17 	.word	0x08002a17
 800298c:	08002a17 	.word	0x08002a17
 8002990:	08002a17 	.word	0x08002a17
 8002994:	08002a17 	.word	0x08002a17
 8002998:	08002a17 	.word	0x08002a17
 800299c:	08002a17 	.word	0x08002a17
 80029a0:	08002a17 	.word	0x08002a17
 80029a4:	08002a17 	.word	0x08002a17
 80029a8:	08002a17 	.word	0x08002a17
 80029ac:	080029c5 	.word	0x080029c5
 80029b0:	080029d9 	.word	0x080029d9
 80029b4:	4a79      	ldr	r2, [pc, #484]	@ (8002b9c <HAL_GPIO_Init+0x2b4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d013      	beq.n	80029e2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80029ba:	e02c      	b.n	8002a16 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	623b      	str	r3, [r7, #32]
          break;
 80029c2:	e029      	b.n	8002a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	3304      	adds	r3, #4
 80029ca:	623b      	str	r3, [r7, #32]
          break;
 80029cc:	e024      	b.n	8002a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	3308      	adds	r3, #8
 80029d4:	623b      	str	r3, [r7, #32]
          break;
 80029d6:	e01f      	b.n	8002a18 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	330c      	adds	r3, #12
 80029de:	623b      	str	r3, [r7, #32]
          break;
 80029e0:	e01a      	b.n	8002a18 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d102      	bne.n	80029f0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029ea:	2304      	movs	r3, #4
 80029ec:	623b      	str	r3, [r7, #32]
          break;
 80029ee:	e013      	b.n	8002a18 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d105      	bne.n	8002a04 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029f8:	2308      	movs	r3, #8
 80029fa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	611a      	str	r2, [r3, #16]
          break;
 8002a02:	e009      	b.n	8002a18 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002a04:	2308      	movs	r3, #8
 8002a06:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	615a      	str	r2, [r3, #20]
          break;
 8002a0e:	e003      	b.n	8002a18 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002a10:	2300      	movs	r3, #0
 8002a12:	623b      	str	r3, [r7, #32]
          break;
 8002a14:	e000      	b.n	8002a18 <HAL_GPIO_Init+0x130>
          break;
 8002a16:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002a18:	69bb      	ldr	r3, [r7, #24]
 8002a1a:	2bff      	cmp	r3, #255	@ 0xff
 8002a1c:	d801      	bhi.n	8002a22 <HAL_GPIO_Init+0x13a>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	e001      	b.n	8002a26 <HAL_GPIO_Init+0x13e>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3304      	adds	r3, #4
 8002a26:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2bff      	cmp	r3, #255	@ 0xff
 8002a2c:	d802      	bhi.n	8002a34 <HAL_GPIO_Init+0x14c>
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	e002      	b.n	8002a3a <HAL_GPIO_Init+0x152>
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	3b08      	subs	r3, #8
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	210f      	movs	r1, #15
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	fa01 f303 	lsl.w	r3, r1, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	6a39      	ldr	r1, [r7, #32]
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	431a      	orrs	r2, r3
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	f000 80b1 	beq.w	8002bca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a68:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba0 <HAL_GPIO_Init+0x2b8>)
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ba0 <HAL_GPIO_Init+0x2b8>)
 8002a6e:	f043 0301 	orr.w	r3, r3, #1
 8002a72:	6193      	str	r3, [r2, #24]
 8002a74:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_GPIO_Init+0x2b8>)
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a80:	4a48      	ldr	r2, [pc, #288]	@ (8002ba4 <HAL_GPIO_Init+0x2bc>)
 8002a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a84:	089b      	lsrs	r3, r3, #2
 8002a86:	3302      	adds	r3, #2
 8002a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a8c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a40      	ldr	r2, [pc, #256]	@ (8002ba8 <HAL_GPIO_Init+0x2c0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_GPIO_Init+0x1ec>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a3f      	ldr	r2, [pc, #252]	@ (8002bac <HAL_GPIO_Init+0x2c4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_GPIO_Init+0x1e8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a3e      	ldr	r2, [pc, #248]	@ (8002bb0 <HAL_GPIO_Init+0x2c8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d007      	beq.n	8002acc <HAL_GPIO_Init+0x1e4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	4a3d      	ldr	r2, [pc, #244]	@ (8002bb4 <HAL_GPIO_Init+0x2cc>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d101      	bne.n	8002ac8 <HAL_GPIO_Init+0x1e0>
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e006      	b.n	8002ad6 <HAL_GPIO_Init+0x1ee>
 8002ac8:	2304      	movs	r3, #4
 8002aca:	e004      	b.n	8002ad6 <HAL_GPIO_Init+0x1ee>
 8002acc:	2302      	movs	r3, #2
 8002ace:	e002      	b.n	8002ad6 <HAL_GPIO_Init+0x1ee>
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e000      	b.n	8002ad6 <HAL_GPIO_Init+0x1ee>
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ad8:	f002 0203 	and.w	r2, r2, #3
 8002adc:	0092      	lsls	r2, r2, #2
 8002ade:	4093      	lsls	r3, r2
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ae6:	492f      	ldr	r1, [pc, #188]	@ (8002ba4 <HAL_GPIO_Init+0x2bc>)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	089b      	lsrs	r3, r3, #2
 8002aec:	3302      	adds	r3, #2
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d006      	beq.n	8002b0e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b00:	4b2d      	ldr	r3, [pc, #180]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	492c      	ldr	r1, [pc, #176]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b06:	69bb      	ldr	r3, [r7, #24]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	608b      	str	r3, [r1, #8]
 8002b0c:	e006      	b.n	8002b1c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4928      	ldr	r1, [pc, #160]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b28:	4b23      	ldr	r3, [pc, #140]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	4922      	ldr	r1, [pc, #136]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60cb      	str	r3, [r1, #12]
 8002b34:	e006      	b.n	8002b44 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b36:	4b20      	ldr	r3, [pc, #128]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b38:	68da      	ldr	r2, [r3, #12]
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	491e      	ldr	r1, [pc, #120]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d006      	beq.n	8002b5e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	4918      	ldr	r1, [pc, #96]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	604b      	str	r3, [r1, #4]
 8002b5c:	e006      	b.n	8002b6c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b5e:	4b16      	ldr	r3, [pc, #88]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4914      	ldr	r1, [pc, #80]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d021      	beq.n	8002bbc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b78:	4b0f      	ldr	r3, [pc, #60]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	490e      	ldr	r1, [pc, #56]	@ (8002bb8 <HAL_GPIO_Init+0x2d0>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	600b      	str	r3, [r1, #0]
 8002b84:	e021      	b.n	8002bca <HAL_GPIO_Init+0x2e2>
 8002b86:	bf00      	nop
 8002b88:	10320000 	.word	0x10320000
 8002b8c:	10310000 	.word	0x10310000
 8002b90:	10220000 	.word	0x10220000
 8002b94:	10210000 	.word	0x10210000
 8002b98:	10120000 	.word	0x10120000
 8002b9c:	10110000 	.word	0x10110000
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40010800 	.word	0x40010800
 8002bac:	40010c00 	.word	0x40010c00
 8002bb0:	40011000 	.word	0x40011000
 8002bb4:	40011400 	.word	0x40011400
 8002bb8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002bbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bec <HAL_GPIO_Init+0x304>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	4909      	ldr	r1, [pc, #36]	@ (8002bec <HAL_GPIO_Init+0x304>)
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	3301      	adds	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f47f ae8e 	bne.w	80028fc <HAL_GPIO_Init+0x14>
  }
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	372c      	adds	r7, #44	@ 0x2c
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	40010400 	.word	0x40010400

08002bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e12b      	b.n	8002e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7fe ff00 	bl	8001a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	@ 0x24
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c54:	f001 f832 	bl	8003cbc <HAL_RCC_GetPCLK1Freq>
 8002c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a81      	ldr	r2, [pc, #516]	@ (8002e64 <HAL_I2C_Init+0x274>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d807      	bhi.n	8002c74 <HAL_I2C_Init+0x84>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a80      	ldr	r2, [pc, #512]	@ (8002e68 <HAL_I2C_Init+0x278>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	bf94      	ite	ls
 8002c6c:	2301      	movls	r3, #1
 8002c6e:	2300      	movhi	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e006      	b.n	8002c82 <HAL_I2C_Init+0x92>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a7d      	ldr	r2, [pc, #500]	@ (8002e6c <HAL_I2C_Init+0x27c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	bf94      	ite	ls
 8002c7c:	2301      	movls	r3, #1
 8002c7e:	2300      	movhi	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0e7      	b.n	8002e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a78      	ldr	r2, [pc, #480]	@ (8002e70 <HAL_I2C_Init+0x280>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a6a      	ldr	r2, [pc, #424]	@ (8002e64 <HAL_I2C_Init+0x274>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d802      	bhi.n	8002cc4 <HAL_I2C_Init+0xd4>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	e009      	b.n	8002cd8 <HAL_I2C_Init+0xe8>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	4a69      	ldr	r2, [pc, #420]	@ (8002e74 <HAL_I2C_Init+0x284>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	495c      	ldr	r1, [pc, #368]	@ (8002e64 <HAL_I2C_Init+0x274>)
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	d819      	bhi.n	8002d2c <HAL_I2C_Init+0x13c>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e59      	subs	r1, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d06:	1c59      	adds	r1, r3, #1
 8002d08:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_I2C_Init+0x138>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1e59      	subs	r1, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	e051      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e04f      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d111      	bne.n	8002d58 <HAL_I2C_Init+0x168>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e012      	b.n	8002d7e <HAL_I2C_Init+0x18e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	0099      	lsls	r1, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Init+0x196>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e022      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10e      	bne.n	8002dac <HAL_I2C_Init+0x1bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1e58      	subs	r0, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	440b      	add	r3, r1
 8002d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002daa:	e00f      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	6809      	ldr	r1, [r1, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002dfa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6911      	ldr	r1, [r2, #16]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	000186a0 	.word	0x000186a0
 8002e68:	001e847f 	.word	0x001e847f
 8002e6c:	003d08ff 	.word	0x003d08ff
 8002e70:	431bde83 	.word	0x431bde83
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	460b      	mov	r3, r1
 8002e86:	817b      	strh	r3, [r7, #10]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7fe ffc2 	bl	8001e14 <HAL_GetTick>
 8002e90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f040 80e0 	bne.w	8003060 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2319      	movs	r3, #25
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4970      	ldr	r1, [pc, #448]	@ (800306c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 f964 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e0d3      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2C_Master_Transmit+0x50>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e0cc      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d007      	beq.n	8002eee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002efc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2221      	movs	r2, #33	@ 0x21
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	893a      	ldrh	r2, [r7, #8]
 8002f1e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	@ (8003070 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f2e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	6a3a      	ldr	r2, [r7, #32]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f89c 	bl	8003074 <I2C_MasterRequestWrite>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e08d      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f5c:	e066      	b.n	800302c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6a39      	ldr	r1, [r7, #32]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fa22 	bl	80033ac <I2C_WaitOnTXEFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d107      	bne.n	8002f86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06b      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d11b      	bne.n	8003000 <HAL_I2C_Master_Transmit+0x188>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d017      	beq.n	8003000 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	6a39      	ldr	r1, [r7, #32]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fa19 	bl	800343c <I2C_WaitOnBTFFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003026:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e01a      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d194      	bne.n	8002f5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	00100002 	.word	0x00100002
 8003070:	ffff0000 	.word	0xffff0000

08003074 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	603b      	str	r3, [r7, #0]
 8003080:	460b      	mov	r3, r1
 8003082:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003088:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d006      	beq.n	800309e <I2C_MasterRequestWrite+0x2a>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d003      	beq.n	800309e <I2C_MasterRequestWrite+0x2a>
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800309c:	d108      	bne.n	80030b0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030ac:	601a      	str	r2, [r3, #0]
 80030ae:	e00b      	b.n	80030c8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	2b12      	cmp	r3, #18
 80030b6:	d107      	bne.n	80030c8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030c6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f84f 	bl	8003178 <I2C_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00d      	beq.n	80030fc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ee:	d103      	bne.n	80030f8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80030f8:	2303      	movs	r3, #3
 80030fa:	e035      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003104:	d108      	bne.n	8003118 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003106:	897b      	ldrh	r3, [r7, #10]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	461a      	mov	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003114:	611a      	str	r2, [r3, #16]
 8003116:	e01b      	b.n	8003150 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003118:	897b      	ldrh	r3, [r7, #10]
 800311a:	11db      	asrs	r3, r3, #7
 800311c:	b2db      	uxtb	r3, r3
 800311e:	f003 0306 	and.w	r3, r3, #6
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f063 030f 	orn	r3, r3, #15
 8003128:	b2da      	uxtb	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	490e      	ldr	r1, [pc, #56]	@ (8003170 <I2C_MasterRequestWrite+0xfc>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f898 	bl	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e010      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003146:	897b      	ldrh	r3, [r7, #10]
 8003148:	b2da      	uxtb	r2, r3
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	4907      	ldr	r1, [pc, #28]	@ (8003174 <I2C_MasterRequestWrite+0x100>)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f888 	bl	800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	00010008 	.word	0x00010008
 8003174:	00010002 	.word	0x00010002

08003178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	603b      	str	r3, [r7, #0]
 8003184:	4613      	mov	r3, r2
 8003186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003188:	e048      	b.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003190:	d044      	beq.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fe fe3f 	bl	8001e14 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d139      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	0c1b      	lsrs	r3, r3, #16
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d10d      	bne.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	43da      	mvns	r2, r3
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	4013      	ands	r3, r2
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	e00c      	b.n	80031e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	699b      	ldr	r3, [r3, #24]
 80031d4:	43da      	mvns	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4013      	ands	r3, r2
 80031da:	b29b      	uxth	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d116      	bne.n	800321c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f043 0220 	orr.w	r2, r3, #32
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e023      	b.n	8003264 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	0c1b      	lsrs	r3, r3, #16
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	d10d      	bne.n	8003242 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	43da      	mvns	r2, r3
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	4013      	ands	r3, r2
 8003232:	b29b      	uxth	r3, r3
 8003234:	2b00      	cmp	r3, #0
 8003236:	bf0c      	ite	eq
 8003238:	2301      	moveq	r3, #1
 800323a:	2300      	movne	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	461a      	mov	r2, r3
 8003240:	e00c      	b.n	800325c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	43da      	mvns	r2, r3
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	429a      	cmp	r2, r3
 8003260:	d093      	beq.n	800318a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003262:	2300      	movs	r3, #0
}
 8003264:	4618      	mov	r0, r3
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800327a:	e071      	b.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d123      	bne.n	80032d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800329a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80032a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f043 0204 	orr.w	r2, r3, #4
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e067      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032da:	d041      	beq.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032dc:	f7fe fd9a 	bl	8001e14 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d302      	bcc.n	80032f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d136      	bne.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	0c1b      	lsrs	r3, r3, #16
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d10c      	bne.n	8003316 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	43da      	mvns	r2, r3
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4013      	ands	r3, r2
 8003308:	b29b      	uxth	r3, r3
 800330a:	2b00      	cmp	r3, #0
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e00b      	b.n	800332e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b00      	cmp	r3, #0
 8003330:	d016      	beq.n	8003360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2220      	movs	r2, #32
 800333c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334c:	f043 0220 	orr.w	r2, r3, #32
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	e021      	b.n	80033a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	0c1b      	lsrs	r3, r3, #16
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d10c      	bne.n	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	43da      	mvns	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4013      	ands	r3, r2
 8003376:	b29b      	uxth	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	bf14      	ite	ne
 800337c:	2301      	movne	r3, #1
 800337e:	2300      	moveq	r3, #0
 8003380:	b2db      	uxtb	r3, r3
 8003382:	e00b      	b.n	800339c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	43da      	mvns	r2, r3
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4013      	ands	r3, r2
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	bf14      	ite	ne
 8003396:	2301      	movne	r3, #1
 8003398:	2300      	moveq	r3, #0
 800339a:	b2db      	uxtb	r3, r3
 800339c:	2b00      	cmp	r3, #0
 800339e:	f47f af6d 	bne.w	800327c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3710      	adds	r7, #16
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033b8:	e034      	b.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 f886 	bl	80034cc <I2C_IsAcknowledgeFailed>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e034      	b.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d028      	beq.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fe fd1f 	bl	8001e14 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d11d      	bne.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033f2:	2b80      	cmp	r3, #128	@ 0x80
 80033f4:	d016      	beq.n	8003424 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2220      	movs	r2, #32
 8003400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2200      	movs	r2, #0
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003410:	f043 0220 	orr.w	r2, r3, #32
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2200      	movs	r2, #0
 800341c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e007      	b.n	8003434 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800342e:	2b80      	cmp	r3, #128	@ 0x80
 8003430:	d1c3      	bne.n	80033ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b084      	sub	sp, #16
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003448:	e034      	b.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f83e 	bl	80034cc <I2C_IsAcknowledgeFailed>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e034      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003460:	d028      	beq.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fe fcd7 	bl	8001e14 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d11d      	bne.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d016      	beq.n	80034b4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b04      	cmp	r3, #4
 80034c0:	d1c3      	bne.n	800344a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e2:	d11b      	bne.n	800351c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e272      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8087 	beq.w	8003656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003548:	4b92      	ldr	r3, [pc, #584]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b04      	cmp	r3, #4
 8003552:	d00c      	beq.n	800356e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003554:	4b8f      	ldr	r3, [pc, #572]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d112      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
 8003560:	4b8c      	ldr	r3, [pc, #560]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800356c:	d10b      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356e:	4b89      	ldr	r3, [pc, #548]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d06c      	beq.n	8003654 <HAL_RCC_OscConfig+0x12c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d168      	bne.n	8003654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e24c      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x76>
 8003590:	4b80      	ldr	r3, [pc, #512]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7f      	ldr	r2, [pc, #508]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e02e      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7a      	ldr	r2, [pc, #488]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b78      	ldr	r3, [pc, #480]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a77      	ldr	r2, [pc, #476]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0xbc>
 80035ca:	4b72      	ldr	r3, [pc, #456]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a71      	ldr	r2, [pc, #452]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6e      	ldr	r2, [pc, #440]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035e4:	4b6b      	ldr	r3, [pc, #428]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6a      	ldr	r2, [pc, #424]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b68      	ldr	r3, [pc, #416]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a67      	ldr	r2, [pc, #412]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fc06 	bl	8001e14 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fe fc02 	bl	8001e14 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	@ 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e200      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b5d      	ldr	r3, [pc, #372]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xe4>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fbf2 	bl	8001e14 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe fbee 	bl	8001e14 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	@ 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1ec      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b53      	ldr	r3, [pc, #332]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x10c>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d063      	beq.n	800372a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003662:	4b4c      	ldr	r3, [pc, #304]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800366e:	4b49      	ldr	r3, [pc, #292]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d11c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
 800367a:	4b46      	ldr	r3, [pc, #280]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	4b43      	ldr	r3, [pc, #268]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e1c0      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b3d      	ldr	r3, [pc, #244]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4939      	ldr	r1, [pc, #228]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e03a      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036bc:	4b36      	ldr	r3, [pc, #216]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe fba7 	bl	8001e14 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fe fba3 	bl	8001e14 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e1a1      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	4b2d      	ldr	r3, [pc, #180]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4927      	ldr	r1, [pc, #156]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b26      	ldr	r3, [pc, #152]	@ (8003798 <HAL_RCC_OscConfig+0x270>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe fb86 	bl	8001e14 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370c:	f7fe fb82 	bl	8001e14 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e180      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	4b1d      	ldr	r3, [pc, #116]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03a      	beq.n	80037ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d019      	beq.n	8003772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373e:	4b17      	ldr	r3, [pc, #92]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7fe fb66 	bl	8001e14 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fe fb62 	bl	8001e14 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e160      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	4b0d      	ldr	r3, [pc, #52]	@ (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f000 face 	bl	8003d0c <RCC_Delay>
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003772:	4b0a      	ldr	r3, [pc, #40]	@ (800379c <HAL_RCC_OscConfig+0x274>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003778:	f7fe fb4c 	bl	8001e14 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fe fb48 	bl	8001e14 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d908      	bls.n	80037a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e146      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	42420000 	.word	0x42420000
 800379c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b92      	ldr	r3, [pc, #584]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e9      	bne.n	8003780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a6 	beq.w	8003906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b8b      	ldr	r3, [pc, #556]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10d      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b88      	ldr	r3, [pc, #544]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a87      	ldr	r2, [pc, #540]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d4:	61d3      	str	r3, [r2, #28]
 80037d6:	4b85      	ldr	r3, [pc, #532]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b82      	ldr	r3, [pc, #520]	@ (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d118      	bne.n	8003824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b7f      	ldr	r3, [pc, #508]	@ (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a7e      	ldr	r2, [pc, #504]	@ (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fe fb09 	bl	8001e14 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fe fb05 	bl	8001e14 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	@ 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e103      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b75      	ldr	r3, [pc, #468]	@ (80039f0 <HAL_RCC_OscConfig+0x4c8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x312>
 800382c:	4b6f      	ldr	r3, [pc, #444]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a6e      	ldr	r2, [pc, #440]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e02d      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x334>
 8003842:	4b6a      	ldr	r3, [pc, #424]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a69      	ldr	r2, [pc, #420]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	6213      	str	r3, [r2, #32]
 800384e:	4b67      	ldr	r3, [pc, #412]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a66      	ldr	r2, [pc, #408]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	e01c      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d10c      	bne.n	800387e <HAL_RCC_OscConfig+0x356>
 8003864:	4b61      	ldr	r3, [pc, #388]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a60      	ldr	r2, [pc, #384]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	4b5e      	ldr	r3, [pc, #376]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a5d      	ldr	r2, [pc, #372]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	e00b      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800387e:	4b5b      	ldr	r3, [pc, #364]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a5a      	ldr	r2, [pc, #360]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6213      	str	r3, [r2, #32]
 800388a:	4b58      	ldr	r3, [pc, #352]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a57      	ldr	r2, [pc, #348]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d015      	beq.n	80038ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389e:	f7fe fab9 	bl	8001e14 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe fab5 	bl	8001e14 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0b1      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b4b      	ldr	r3, [pc, #300]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCC_OscConfig+0x37e>
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fe faa3 	bl	8001e14 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe fa9f 	bl	8001e14 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e09b      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	4b40      	ldr	r3, [pc, #256]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ee      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fa:	4b3c      	ldr	r3, [pc, #240]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a3b      	ldr	r2, [pc, #236]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003900:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8087 	beq.w	8003a1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003910:	4b36      	ldr	r3, [pc, #216]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	d061      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d146      	bne.n	80039b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b33      	ldr	r3, [pc, #204]	@ (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fe fa73 	bl	8001e14 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fe fa6f 	bl	8001e14 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e06d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003944:	4b29      	ldr	r3, [pc, #164]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d108      	bne.n	800396c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395a:	4b24      	ldr	r3, [pc, #144]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	4921      	ldr	r1, [pc, #132]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b1f      	ldr	r3, [pc, #124]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a19      	ldr	r1, [r3, #32]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397c:	430b      	orrs	r3, r1
 800397e:	491b      	ldr	r1, [pc, #108]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b1b      	ldr	r3, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe fa43 	bl	8001e14 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe fa3f 	bl	8001e14 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e03d      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a4:	4b11      	ldr	r3, [pc, #68]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x46a>
 80039b0:	e035      	b.n	8003a1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <HAL_RCC_OscConfig+0x4cc>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe fa2c 	bl	8001e14 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe fa28 	bl	8001e14 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e026      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d2:	4b06      	ldr	r3, [pc, #24]	@ (80039ec <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x498>
 80039de:	e01e      	b.n	8003a1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e019      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
 80039ec:	40021000 	.word	0x40021000
 80039f0:	40007000 	.word	0x40007000
 80039f4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a28 <HAL_RCC_OscConfig+0x500>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a1b      	ldr	r3, [r3, #32]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d106      	bne.n	8003a1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d001      	beq.n	8003a1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000

08003a2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0d0      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a40:	4b6a      	ldr	r3, [pc, #424]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d910      	bls.n	8003a70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b67      	ldr	r3, [pc, #412]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 0207 	bic.w	r2, r3, #7
 8003a56:	4965      	ldr	r1, [pc, #404]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5e:	4b63      	ldr	r3, [pc, #396]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0307 	and.w	r3, r3, #7
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d001      	beq.n	8003a70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e0b8      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d020      	beq.n	8003abe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a88:	4b59      	ldr	r3, [pc, #356]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a58      	ldr	r2, [pc, #352]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003a8e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003a92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0308 	and.w	r3, r3, #8
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003aa0:	4b53      	ldr	r3, [pc, #332]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	4a52      	ldr	r2, [pc, #328]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003aaa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aac:	4b50      	ldr	r3, [pc, #320]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	494d      	ldr	r1, [pc, #308]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	4313      	orrs	r3, r2
 8003abc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0301 	and.w	r3, r3, #1
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d040      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d107      	bne.n	8003ae2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	4b47      	ldr	r3, [pc, #284]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d115      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e07f      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d107      	bne.n	8003afa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aea:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e073      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afa:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e06b      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b0a:	4b39      	ldr	r3, [pc, #228]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f023 0203 	bic.w	r2, r3, #3
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	4936      	ldr	r1, [pc, #216]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b1c:	f7fe f97a 	bl	8001e14 <HAL_GetTick>
 8003b20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b22:	e00a      	b.n	8003b3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b24:	f7fe f976 	bl	8001e14 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e053      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b3a:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 020c 	and.w	r2, r3, #12
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d1eb      	bne.n	8003b24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b4c:	4b27      	ldr	r3, [pc, #156]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d210      	bcs.n	8003b7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b5a:	4b24      	ldr	r3, [pc, #144]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 0207 	bic.w	r2, r3, #7
 8003b62:	4922      	ldr	r1, [pc, #136]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	4b20      	ldr	r3, [pc, #128]	@ (8003bec <HAL_RCC_ClockConfig+0x1c0>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d001      	beq.n	8003b7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e032      	b.n	8003be2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0304 	and.w	r3, r3, #4
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b88:	4b19      	ldr	r3, [pc, #100]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4916      	ldr	r1, [pc, #88]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d009      	beq.n	8003bba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba6:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	00db      	lsls	r3, r3, #3
 8003bb4:	490e      	ldr	r1, [pc, #56]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bba:	f000 f821 	bl	8003c00 <HAL_RCC_GetSysClockFreq>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	091b      	lsrs	r3, r3, #4
 8003bc6:	f003 030f 	and.w	r3, r3, #15
 8003bca:	490a      	ldr	r1, [pc, #40]	@ (8003bf4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bcc:	5ccb      	ldrb	r3, [r1, r3]
 8003bce:	fa22 f303 	lsr.w	r3, r2, r3
 8003bd2:	4a09      	ldr	r2, [pc, #36]	@ (8003bf8 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bd6:	4b09      	ldr	r3, [pc, #36]	@ (8003bfc <HAL_RCC_ClockConfig+0x1d0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe f8d8 	bl	8001d90 <HAL_InitTick>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40022000 	.word	0x40022000
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	080075c4 	.word	0x080075c4
 8003bf8:	20000004 	.word	0x20000004
 8003bfc:	20000008 	.word	0x20000008

08003c00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	60bb      	str	r3, [r7, #8]
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
 8003c12:	2300      	movs	r3, #0
 8003c14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d002      	beq.n	8003c30 <HAL_RCC_GetSysClockFreq+0x30>
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCC_GetSysClockFreq+0x36>
 8003c2e:	e027      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c30:	4b19      	ldr	r3, [pc, #100]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c32:	613b      	str	r3, [r7, #16]
      break;
 8003c34:	e027      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	0c9b      	lsrs	r3, r3, #18
 8003c3a:	f003 030f 	and.w	r3, r3, #15
 8003c3e:	4a17      	ldr	r2, [pc, #92]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003c40:	5cd3      	ldrb	r3, [r2, r3]
 8003c42:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d010      	beq.n	8003c70 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c4e:	4b11      	ldr	r3, [pc, #68]	@ (8003c94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	0c5b      	lsrs	r3, r3, #17
 8003c54:	f003 0301 	and.w	r3, r3, #1
 8003c58:	4a11      	ldr	r2, [pc, #68]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c5a:	5cd3      	ldrb	r3, [r2, r3]
 8003c5c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c62:	fb03 f202 	mul.w	r2, r3, r2
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e004      	b.n	8003c7a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a0c      	ldr	r2, [pc, #48]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c74:	fb02 f303 	mul.w	r3, r2, r3
 8003c78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	613b      	str	r3, [r7, #16]
      break;
 8003c7e:	e002      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c80:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c82:	613b      	str	r3, [r7, #16]
      break;
 8003c84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c86:	693b      	ldr	r3, [r7, #16]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	371c      	adds	r7, #28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bc80      	pop	{r7}
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	40021000 	.word	0x40021000
 8003c98:	007a1200 	.word	0x007a1200
 8003c9c:	080075dc 	.word	0x080075dc
 8003ca0:	080075ec 	.word	0x080075ec
 8003ca4:	003d0900 	.word	0x003d0900

08003ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cac:	4b02      	ldr	r3, [pc, #8]	@ (8003cb8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cae:	681b      	ldr	r3, [r3, #0]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	20000004 	.word	0x20000004

08003cbc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc0:	f7ff fff2 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	4b05      	ldr	r3, [pc, #20]	@ (8003cdc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	0a1b      	lsrs	r3, r3, #8
 8003ccc:	f003 0307 	and.w	r3, r3, #7
 8003cd0:	4903      	ldr	r1, [pc, #12]	@ (8003ce0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cd2:	5ccb      	ldrb	r3, [r1, r3]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cd8:	4618      	mov	r0, r3
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40021000 	.word	0x40021000
 8003ce0:	080075d4 	.word	0x080075d4

08003ce4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ce8:	f7ff ffde 	bl	8003ca8 <HAL_RCC_GetHCLKFreq>
 8003cec:	4602      	mov	r2, r0
 8003cee:	4b05      	ldr	r3, [pc, #20]	@ (8003d04 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	0adb      	lsrs	r3, r3, #11
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	4903      	ldr	r1, [pc, #12]	@ (8003d08 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cfa:	5ccb      	ldrb	r3, [r1, r3]
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40021000 	.word	0x40021000
 8003d08:	080075d4 	.word	0x080075d4

08003d0c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d14:	4b0a      	ldr	r3, [pc, #40]	@ (8003d40 <RCC_Delay+0x34>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a0a      	ldr	r2, [pc, #40]	@ (8003d44 <RCC_Delay+0x38>)
 8003d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1e:	0a5b      	lsrs	r3, r3, #9
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d28:	bf00      	nop
  }
  while (Delay --);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	1e5a      	subs	r2, r3, #1
 8003d2e:	60fa      	str	r2, [r7, #12]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d1f9      	bne.n	8003d28 <RCC_Delay+0x1c>
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr
 8003d40:	20000004 	.word	0x20000004
 8003d44:	10624dd3 	.word	0x10624dd3

08003d48 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	613b      	str	r3, [r7, #16]
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d07d      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003d64:	2300      	movs	r3, #0
 8003d66:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d68:	4b4f      	ldr	r3, [pc, #316]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10d      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d74:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	4a4b      	ldr	r2, [pc, #300]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d7e:	61d3      	str	r3, [r2, #28]
 8003d80:	4b49      	ldr	r3, [pc, #292]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d88:	60bb      	str	r3, [r7, #8]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d90:	4b46      	ldr	r3, [pc, #280]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d118      	bne.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d9c:	4b43      	ldr	r3, [pc, #268]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a42      	ldr	r2, [pc, #264]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003da8:	f7fe f834 	bl	8001e14 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dae:	e008      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003db0:	f7fe f830 	bl	8001e14 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	@ 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e06d      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc2:	4b3a      	ldr	r3, [pc, #232]	@ (8003eac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003dce:	4b36      	ldr	r3, [pc, #216]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dd6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d02e      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d027      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dec:	4b2e      	ldr	r3, [pc, #184]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003df4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003df6:	4b2e      	ldr	r3, [pc, #184]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dfc:	4b2c      	ldr	r3, [pc, #176]	@ (8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e02:	4a29      	ldr	r2, [pc, #164]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 0301 	and.w	r3, r3, #1
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d014      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e12:	f7fd ffff 	bl	8001e14 <HAL_GetTick>
 8003e16:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e18:	e00a      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e1a:	f7fd fffb 	bl	8001e14 <HAL_GetTick>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1ad3      	subs	r3, r2, r3
 8003e24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d901      	bls.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e036      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	4b1d      	ldr	r3, [pc, #116]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e32:	6a1b      	ldr	r3, [r3, #32]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0ee      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4917      	ldr	r1, [pc, #92]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e4e:	7dfb      	ldrb	r3, [r7, #23]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d105      	bne.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e54:	4b14      	ldr	r3, [pc, #80]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	69db      	ldr	r3, [r3, #28]
 8003e58:	4a13      	ldr	r2, [pc, #76]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f003 0302 	and.w	r3, r3, #2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	490b      	ldr	r1, [pc, #44]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d008      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	68db      	ldr	r3, [r3, #12]
 8003e96:	4904      	ldr	r1, [pc, #16]	@ (8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3718      	adds	r7, #24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40007000 	.word	0x40007000
 8003eb0:	42420440 	.word	0x42420440

08003eb4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b088      	sub	sp, #32
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	2300      	movs	r3, #0
 8003ece:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d00a      	beq.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2b10      	cmp	r3, #16
 8003eda:	f200 808a 	bhi.w	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d045      	beq.n	8003f70 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d075      	beq.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003eea:	e082      	b.n	8003ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003eec:	4b46      	ldr	r3, [pc, #280]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003ef2:	4b45      	ldr	r3, [pc, #276]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d07b      	beq.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	0c9b      	lsrs	r3, r3, #18
 8003f02:	f003 030f 	and.w	r3, r3, #15
 8003f06:	4a41      	ldr	r2, [pc, #260]	@ (800400c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003f08:	5cd3      	ldrb	r3, [r2, r3]
 8003f0a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d015      	beq.n	8003f42 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f16:	4b3c      	ldr	r3, [pc, #240]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	0c5b      	lsrs	r3, r3, #17
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	4a3b      	ldr	r2, [pc, #236]	@ (8004010 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003f30:	4a38      	ldr	r2, [pc, #224]	@ (8004014 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	fb02 f303 	mul.w	r3, r2, r3
 8003f3e:	61fb      	str	r3, [r7, #28]
 8003f40:	e004      	b.n	8003f4c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4a34      	ldr	r2, [pc, #208]	@ (8004018 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003f46:	fb02 f303 	mul.w	r3, r2, r3
 8003f4a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f58:	d102      	bne.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	61bb      	str	r3, [r7, #24]
      break;
 8003f5e:	e04a      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	4a2d      	ldr	r2, [pc, #180]	@ (800401c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003f66:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	61bb      	str	r3, [r7, #24]
      break;
 8003f6e:	e042      	b.n	8003ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003f70:	4b25      	ldr	r3, [pc, #148]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f80:	d108      	bne.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f8c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f90:	61bb      	str	r3, [r7, #24]
 8003f92:	e01f      	b.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f9e:	d109      	bne.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003fa0:	4b19      	ldr	r3, [pc, #100]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	f003 0302 	and.w	r3, r3, #2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003fac:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003fb0:	61bb      	str	r3, [r7, #24]
 8003fb2:	e00f      	b.n	8003fd4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fbe:	d11c      	bne.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fc0:	4b11      	ldr	r3, [pc, #68]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d016      	beq.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003fcc:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003fd0:	61bb      	str	r3, [r7, #24]
      break;
 8003fd2:	e012      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003fd4:	e011      	b.n	8003ffa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003fd6:	f7ff fe85 	bl	8003ce4 <HAL_RCC_GetPCLK2Freq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8004008 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	0b9b      	lsrs	r3, r3, #14
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	005b      	lsls	r3, r3, #1
 8003fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fee:	61bb      	str	r3, [r7, #24]
      break;
 8003ff0:	e004      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e002      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ff6:	bf00      	nop
 8003ff8:	e000      	b.n	8003ffc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ffa:	bf00      	nop
    }
  }
  return (frequency);
 8003ffc:	69bb      	ldr	r3, [r7, #24]
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	080075f0 	.word	0x080075f0
 8004010:	08007600 	.word	0x08007600
 8004014:	007a1200 	.word	0x007a1200
 8004018:	003d0900 	.word	0x003d0900
 800401c:	aaaaaaab 	.word	0xaaaaaaab

08004020 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e041      	b.n	80040b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7fd fd26 	bl	8001a98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	3304      	adds	r3, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4610      	mov	r0, r2
 8004060:	f000 f992 	bl	8004388 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
	...

080040c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d109      	bne.n	80040e4 <HAL_TIM_PWM_Start+0x24>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b01      	cmp	r3, #1
 80040da:	bf14      	ite	ne
 80040dc:	2301      	movne	r3, #1
 80040de:	2300      	moveq	r3, #0
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	e022      	b.n	800412a <HAL_TIM_PWM_Start+0x6a>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d109      	bne.n	80040fe <HAL_TIM_PWM_Start+0x3e>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	bf14      	ite	ne
 80040f6:	2301      	movne	r3, #1
 80040f8:	2300      	moveq	r3, #0
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	e015      	b.n	800412a <HAL_TIM_PWM_Start+0x6a>
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	2b08      	cmp	r3, #8
 8004102:	d109      	bne.n	8004118 <HAL_TIM_PWM_Start+0x58>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800410a:	b2db      	uxtb	r3, r3
 800410c:	2b01      	cmp	r3, #1
 800410e:	bf14      	ite	ne
 8004110:	2301      	movne	r3, #1
 8004112:	2300      	moveq	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	e008      	b.n	800412a <HAL_TIM_PWM_Start+0x6a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b01      	cmp	r3, #1
 8004122:	bf14      	ite	ne
 8004124:	2301      	movne	r3, #1
 8004126:	2300      	moveq	r3, #0
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	e05e      	b.n	80041f0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0x82>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004140:	e013      	b.n	800416a <HAL_TIM_PWM_Start+0xaa>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0x92>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004150:	e00b      	b.n	800416a <HAL_TIM_PWM_Start+0xaa>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Start+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2202      	movs	r2, #2
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004160:	e003      	b.n	800416a <HAL_TIM_PWM_Start+0xaa>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2201      	movs	r2, #1
 8004170:	6839      	ldr	r1, [r7, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f000 fafe 	bl	8004774 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1e      	ldr	r2, [pc, #120]	@ (80041f8 <HAL_TIM_PWM_Start+0x138>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d107      	bne.n	8004192 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004190:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a18      	ldr	r2, [pc, #96]	@ (80041f8 <HAL_TIM_PWM_Start+0x138>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00e      	beq.n	80041ba <HAL_TIM_PWM_Start+0xfa>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041a4:	d009      	beq.n	80041ba <HAL_TIM_PWM_Start+0xfa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a14      	ldr	r2, [pc, #80]	@ (80041fc <HAL_TIM_PWM_Start+0x13c>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d004      	beq.n	80041ba <HAL_TIM_PWM_Start+0xfa>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a12      	ldr	r2, [pc, #72]	@ (8004200 <HAL_TIM_PWM_Start+0x140>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d111      	bne.n	80041de <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 0307 	and.w	r3, r3, #7
 80041c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d010      	beq.n	80041ee <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041dc:	e007      	b.n	80041ee <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0201 	orr.w	r2, r2, #1
 80041ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800

08004204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004210:	2300      	movs	r3, #0
 8004212:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800421e:	2302      	movs	r3, #2
 8004220:	e0ae      	b.n	8004380 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2b0c      	cmp	r3, #12
 800422e:	f200 809f 	bhi.w	8004370 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004232:	a201      	add	r2, pc, #4	@ (adr r2, 8004238 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004238:	0800426d 	.word	0x0800426d
 800423c:	08004371 	.word	0x08004371
 8004240:	08004371 	.word	0x08004371
 8004244:	08004371 	.word	0x08004371
 8004248:	080042ad 	.word	0x080042ad
 800424c:	08004371 	.word	0x08004371
 8004250:	08004371 	.word	0x08004371
 8004254:	08004371 	.word	0x08004371
 8004258:	080042ef 	.word	0x080042ef
 800425c:	08004371 	.word	0x08004371
 8004260:	08004371 	.word	0x08004371
 8004264:	08004371 	.word	0x08004371
 8004268:	0800432f 	.word	0x0800432f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 f8f6 	bl	8004464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f042 0208 	orr.w	r2, r2, #8
 8004286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	699a      	ldr	r2, [r3, #24]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6999      	ldr	r1, [r3, #24]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	619a      	str	r2, [r3, #24]
      break;
 80042aa:	e064      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f93c 	bl	8004530 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	699a      	ldr	r2, [r3, #24]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	699a      	ldr	r2, [r3, #24]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80042d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6999      	ldr	r1, [r3, #24]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	021a      	lsls	r2, r3, #8
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	619a      	str	r2, [r3, #24]
      break;
 80042ec:	e043      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	4618      	mov	r0, r3
 80042f6:	f000 f985 	bl	8004604 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69da      	ldr	r2, [r3, #28]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0208 	orr.w	r2, r2, #8
 8004308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69da      	ldr	r2, [r3, #28]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f022 0204 	bic.w	r2, r2, #4
 8004318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	69d9      	ldr	r1, [r3, #28]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	430a      	orrs	r2, r1
 800432a:	61da      	str	r2, [r3, #28]
      break;
 800432c:	e023      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68b9      	ldr	r1, [r7, #8]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 f9cf 	bl	80046d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69d9      	ldr	r1, [r3, #28]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	021a      	lsls	r2, r3, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	430a      	orrs	r2, r1
 800436c:	61da      	str	r2, [r3, #28]
      break;
 800436e:	e002      	b.n	8004376 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	75fb      	strb	r3, [r7, #23]
      break;
 8004374:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800437e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a2f      	ldr	r2, [pc, #188]	@ (8004458 <TIM_Base_SetConfig+0xd0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d00b      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a6:	d007      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a2c      	ldr	r2, [pc, #176]	@ (800445c <TIM_Base_SetConfig+0xd4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d003      	beq.n	80043b8 <TIM_Base_SetConfig+0x30>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a2b      	ldr	r2, [pc, #172]	@ (8004460 <TIM_Base_SetConfig+0xd8>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d108      	bne.n	80043ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a22      	ldr	r2, [pc, #136]	@ (8004458 <TIM_Base_SetConfig+0xd0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00b      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043d8:	d007      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a1f      	ldr	r2, [pc, #124]	@ (800445c <TIM_Base_SetConfig+0xd4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d003      	beq.n	80043ea <TIM_Base_SetConfig+0x62>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a1e      	ldr	r2, [pc, #120]	@ (8004460 <TIM_Base_SetConfig+0xd8>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d108      	bne.n	80043fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a0d      	ldr	r2, [pc, #52]	@ (8004458 <TIM_Base_SetConfig+0xd0>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d103      	bne.n	8004430 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	691a      	ldr	r2, [r3, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d005      	beq.n	800444e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	f023 0201 	bic.w	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	611a      	str	r2, [r3, #16]
  }
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	bc80      	pop	{r7}
 8004456:	4770      	bx	lr
 8004458:	40012c00 	.word	0x40012c00
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800

08004464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004464:	b480      	push	{r7}
 8004466:	b087      	sub	sp, #28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
 8004472:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	f023 0201 	bic.w	r2, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f023 0302 	bic.w	r3, r3, #2
 80044ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a1c      	ldr	r2, [pc, #112]	@ (800452c <TIM_OC1_SetConfig+0xc8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d10c      	bne.n	80044da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f023 0308 	bic.w	r3, r3, #8
 80044c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f023 0304 	bic.w	r3, r3, #4
 80044d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a13      	ldr	r2, [pc, #76]	@ (800452c <TIM_OC1_SetConfig+0xc8>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d111      	bne.n	8004506 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	621a      	str	r2, [r3, #32]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	bc80      	pop	{r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40012c00 	.word	0x40012c00

08004530 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a1b      	ldr	r3, [r3, #32]
 8004544:	f023 0210 	bic.w	r2, r3, #16
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004566:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	021b      	lsls	r3, r3, #8
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0320 	bic.w	r3, r3, #32
 800457a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	011b      	lsls	r3, r3, #4
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	4313      	orrs	r3, r2
 8004586:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a1d      	ldr	r2, [pc, #116]	@ (8004600 <TIM_OC2_SetConfig+0xd0>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d10d      	bne.n	80045ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004596:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a14      	ldr	r2, [pc, #80]	@ (8004600 <TIM_OC2_SetConfig+0xd0>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d113      	bne.n	80045dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	695b      	ldr	r3, [r3, #20]
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	4313      	orrs	r3, r2
 80045ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	699b      	ldr	r3, [r3, #24]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	4313      	orrs	r3, r2
 80045da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	621a      	str	r2, [r3, #32]
}
 80045f6:	bf00      	nop
 80045f8:	371c      	adds	r7, #28
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bc80      	pop	{r7}
 80045fe:	4770      	bx	lr
 8004600:	40012c00 	.word	0x40012c00

08004604 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a1b      	ldr	r3, [r3, #32]
 8004618:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004632:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f023 0303 	bic.w	r3, r3, #3
 800463a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68fa      	ldr	r2, [r7, #12]
 8004642:	4313      	orrs	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800464c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a1d      	ldr	r2, [pc, #116]	@ (80046d4 <TIM_OC3_SetConfig+0xd0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d10d      	bne.n	800467e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004668:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	021b      	lsls	r3, r3, #8
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800467c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a14      	ldr	r2, [pc, #80]	@ (80046d4 <TIM_OC3_SetConfig+0xd0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d113      	bne.n	80046ae <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800468c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004694:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	011b      	lsls	r3, r3, #4
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	699b      	ldr	r3, [r3, #24]
 80046a6:	011b      	lsls	r3, r3, #4
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	621a      	str	r2, [r3, #32]
}
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bc80      	pop	{r7}
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40012c00 	.word	0x40012c00

080046d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800470e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	4313      	orrs	r3, r2
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004722:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	031b      	lsls	r3, r3, #12
 800472a:	693a      	ldr	r2, [r7, #16]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a0f      	ldr	r2, [pc, #60]	@ (8004770 <TIM_OC4_SetConfig+0x98>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d109      	bne.n	800474c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800473e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	019b      	lsls	r3, r3, #6
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	697a      	ldr	r2, [r7, #20]
 8004750:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	621a      	str	r2, [r3, #32]
}
 8004766:	bf00      	nop
 8004768:	371c      	adds	r7, #28
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40012c00 	.word	0x40012c00

08004774 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004774:	b480      	push	{r7}
 8004776:	b087      	sub	sp, #28
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 031f 	and.w	r3, r3, #31
 8004786:	2201      	movs	r2, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6a1a      	ldr	r2, [r3, #32]
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	43db      	mvns	r3, r3
 8004796:	401a      	ands	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6a1a      	ldr	r2, [r3, #32]
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	6879      	ldr	r1, [r7, #4]
 80047a8:	fa01 f303 	lsl.w	r3, r1, r3
 80047ac:	431a      	orrs	r2, r3
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	621a      	str	r2, [r3, #32]
}
 80047b2:	bf00      	nop
 80047b4:	371c      	adds	r7, #28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d101      	bne.n	80047d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047d0:	2302      	movs	r3, #2
 80047d2:	e046      	b.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a16      	ldr	r2, [pc, #88]	@ (800486c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004820:	d009      	beq.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a12      	ldr	r2, [pc, #72]	@ (8004870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a10      	ldr	r2, [pc, #64]	@ (8004874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d10c      	bne.n	8004850 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800483c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	4313      	orrs	r3, r2
 8004846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr
 800486c:	40012c00 	.word	0x40012c00
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800

08004878 <__cvt>:
 8004878:	2b00      	cmp	r3, #0
 800487a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800487e:	461d      	mov	r5, r3
 8004880:	bfbb      	ittet	lt
 8004882:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8004886:	461d      	movlt	r5, r3
 8004888:	2300      	movge	r3, #0
 800488a:	232d      	movlt	r3, #45	@ 0x2d
 800488c:	b088      	sub	sp, #32
 800488e:	4614      	mov	r4, r2
 8004890:	bfb8      	it	lt
 8004892:	4614      	movlt	r4, r2
 8004894:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004896:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004898:	7013      	strb	r3, [r2, #0]
 800489a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800489c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80048a0:	f023 0820 	bic.w	r8, r3, #32
 80048a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048a8:	d005      	beq.n	80048b6 <__cvt+0x3e>
 80048aa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80048ae:	d100      	bne.n	80048b2 <__cvt+0x3a>
 80048b0:	3601      	adds	r6, #1
 80048b2:	2302      	movs	r3, #2
 80048b4:	e000      	b.n	80048b8 <__cvt+0x40>
 80048b6:	2303      	movs	r3, #3
 80048b8:	aa07      	add	r2, sp, #28
 80048ba:	9204      	str	r2, [sp, #16]
 80048bc:	aa06      	add	r2, sp, #24
 80048be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80048c2:	e9cd 3600 	strd	r3, r6, [sp]
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f000 fe81 	bl	80055d0 <_dtoa_r>
 80048ce:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048d2:	4607      	mov	r7, r0
 80048d4:	d119      	bne.n	800490a <__cvt+0x92>
 80048d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80048d8:	07db      	lsls	r3, r3, #31
 80048da:	d50e      	bpl.n	80048fa <__cvt+0x82>
 80048dc:	eb00 0906 	add.w	r9, r0, r6
 80048e0:	2200      	movs	r2, #0
 80048e2:	2300      	movs	r3, #0
 80048e4:	4620      	mov	r0, r4
 80048e6:	4629      	mov	r1, r5
 80048e8:	f7fc f85e 	bl	80009a8 <__aeabi_dcmpeq>
 80048ec:	b108      	cbz	r0, 80048f2 <__cvt+0x7a>
 80048ee:	f8cd 901c 	str.w	r9, [sp, #28]
 80048f2:	2230      	movs	r2, #48	@ 0x30
 80048f4:	9b07      	ldr	r3, [sp, #28]
 80048f6:	454b      	cmp	r3, r9
 80048f8:	d31e      	bcc.n	8004938 <__cvt+0xc0>
 80048fa:	4638      	mov	r0, r7
 80048fc:	9b07      	ldr	r3, [sp, #28]
 80048fe:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004900:	1bdb      	subs	r3, r3, r7
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	b008      	add	sp, #32
 8004906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800490a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800490e:	eb00 0906 	add.w	r9, r0, r6
 8004912:	d1e5      	bne.n	80048e0 <__cvt+0x68>
 8004914:	7803      	ldrb	r3, [r0, #0]
 8004916:	2b30      	cmp	r3, #48	@ 0x30
 8004918:	d10a      	bne.n	8004930 <__cvt+0xb8>
 800491a:	2200      	movs	r2, #0
 800491c:	2300      	movs	r3, #0
 800491e:	4620      	mov	r0, r4
 8004920:	4629      	mov	r1, r5
 8004922:	f7fc f841 	bl	80009a8 <__aeabi_dcmpeq>
 8004926:	b918      	cbnz	r0, 8004930 <__cvt+0xb8>
 8004928:	f1c6 0601 	rsb	r6, r6, #1
 800492c:	f8ca 6000 	str.w	r6, [sl]
 8004930:	f8da 3000 	ldr.w	r3, [sl]
 8004934:	4499      	add	r9, r3
 8004936:	e7d3      	b.n	80048e0 <__cvt+0x68>
 8004938:	1c59      	adds	r1, r3, #1
 800493a:	9107      	str	r1, [sp, #28]
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e7d9      	b.n	80048f4 <__cvt+0x7c>

08004940 <__exponent>:
 8004940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004942:	2900      	cmp	r1, #0
 8004944:	bfb6      	itet	lt
 8004946:	232d      	movlt	r3, #45	@ 0x2d
 8004948:	232b      	movge	r3, #43	@ 0x2b
 800494a:	4249      	neglt	r1, r1
 800494c:	2909      	cmp	r1, #9
 800494e:	7002      	strb	r2, [r0, #0]
 8004950:	7043      	strb	r3, [r0, #1]
 8004952:	dd29      	ble.n	80049a8 <__exponent+0x68>
 8004954:	f10d 0307 	add.w	r3, sp, #7
 8004958:	461d      	mov	r5, r3
 800495a:	270a      	movs	r7, #10
 800495c:	fbb1 f6f7 	udiv	r6, r1, r7
 8004960:	461a      	mov	r2, r3
 8004962:	fb07 1416 	mls	r4, r7, r6, r1
 8004966:	3430      	adds	r4, #48	@ 0x30
 8004968:	f802 4c01 	strb.w	r4, [r2, #-1]
 800496c:	460c      	mov	r4, r1
 800496e:	2c63      	cmp	r4, #99	@ 0x63
 8004970:	4631      	mov	r1, r6
 8004972:	f103 33ff 	add.w	r3, r3, #4294967295
 8004976:	dcf1      	bgt.n	800495c <__exponent+0x1c>
 8004978:	3130      	adds	r1, #48	@ 0x30
 800497a:	1e94      	subs	r4, r2, #2
 800497c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004980:	4623      	mov	r3, r4
 8004982:	1c41      	adds	r1, r0, #1
 8004984:	42ab      	cmp	r3, r5
 8004986:	d30a      	bcc.n	800499e <__exponent+0x5e>
 8004988:	f10d 0309 	add.w	r3, sp, #9
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	42ac      	cmp	r4, r5
 8004990:	bf88      	it	hi
 8004992:	2300      	movhi	r3, #0
 8004994:	3302      	adds	r3, #2
 8004996:	4403      	add	r3, r0
 8004998:	1a18      	subs	r0, r3, r0
 800499a:	b003      	add	sp, #12
 800499c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800499e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80049a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80049a6:	e7ed      	b.n	8004984 <__exponent+0x44>
 80049a8:	2330      	movs	r3, #48	@ 0x30
 80049aa:	3130      	adds	r1, #48	@ 0x30
 80049ac:	7083      	strb	r3, [r0, #2]
 80049ae:	70c1      	strb	r1, [r0, #3]
 80049b0:	1d03      	adds	r3, r0, #4
 80049b2:	e7f1      	b.n	8004998 <__exponent+0x58>

080049b4 <_printf_float>:
 80049b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049b8:	b091      	sub	sp, #68	@ 0x44
 80049ba:	460c      	mov	r4, r1
 80049bc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80049c0:	4616      	mov	r6, r2
 80049c2:	461f      	mov	r7, r3
 80049c4:	4605      	mov	r5, r0
 80049c6:	f000 fcf5 	bl	80053b4 <_localeconv_r>
 80049ca:	6803      	ldr	r3, [r0, #0]
 80049cc:	4618      	mov	r0, r3
 80049ce:	9308      	str	r3, [sp, #32]
 80049d0:	f7fb fbbe 	bl	8000150 <strlen>
 80049d4:	2300      	movs	r3, #0
 80049d6:	930e      	str	r3, [sp, #56]	@ 0x38
 80049d8:	f8d8 3000 	ldr.w	r3, [r8]
 80049dc:	9009      	str	r0, [sp, #36]	@ 0x24
 80049de:	3307      	adds	r3, #7
 80049e0:	f023 0307 	bic.w	r3, r3, #7
 80049e4:	f103 0208 	add.w	r2, r3, #8
 80049e8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049ec:	f8d4 b000 	ldr.w	fp, [r4]
 80049f0:	f8c8 2000 	str.w	r2, [r8]
 80049f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049f8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049fe:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8004a02:	f04f 32ff 	mov.w	r2, #4294967295
 8004a06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004a0e:	4b9c      	ldr	r3, [pc, #624]	@ (8004c80 <_printf_float+0x2cc>)
 8004a10:	f7fb fffc 	bl	8000a0c <__aeabi_dcmpun>
 8004a14:	bb70      	cbnz	r0, 8004a74 <_printf_float+0xc0>
 8004a16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1e:	4b98      	ldr	r3, [pc, #608]	@ (8004c80 <_printf_float+0x2cc>)
 8004a20:	f7fb ffd6 	bl	80009d0 <__aeabi_dcmple>
 8004a24:	bb30      	cbnz	r0, 8004a74 <_printf_float+0xc0>
 8004a26:	2200      	movs	r2, #0
 8004a28:	2300      	movs	r3, #0
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	f7fb ffc5 	bl	80009bc <__aeabi_dcmplt>
 8004a32:	b110      	cbz	r0, 8004a3a <_printf_float+0x86>
 8004a34:	232d      	movs	r3, #45	@ 0x2d
 8004a36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a3a:	4a92      	ldr	r2, [pc, #584]	@ (8004c84 <_printf_float+0x2d0>)
 8004a3c:	4b92      	ldr	r3, [pc, #584]	@ (8004c88 <_printf_float+0x2d4>)
 8004a3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a42:	bf8c      	ite	hi
 8004a44:	4690      	movhi	r8, r2
 8004a46:	4698      	movls	r8, r3
 8004a48:	2303      	movs	r3, #3
 8004a4a:	f04f 0900 	mov.w	r9, #0
 8004a4e:	6123      	str	r3, [r4, #16]
 8004a50:	f02b 0304 	bic.w	r3, fp, #4
 8004a54:	6023      	str	r3, [r4, #0]
 8004a56:	4633      	mov	r3, r6
 8004a58:	4621      	mov	r1, r4
 8004a5a:	4628      	mov	r0, r5
 8004a5c:	9700      	str	r7, [sp, #0]
 8004a5e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004a60:	f000 f9d4 	bl	8004e0c <_printf_common>
 8004a64:	3001      	adds	r0, #1
 8004a66:	f040 8090 	bne.w	8004b8a <_printf_float+0x1d6>
 8004a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6e:	b011      	add	sp, #68	@ 0x44
 8004a70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	4640      	mov	r0, r8
 8004a7a:	4649      	mov	r1, r9
 8004a7c:	f7fb ffc6 	bl	8000a0c <__aeabi_dcmpun>
 8004a80:	b148      	cbz	r0, 8004a96 <_printf_float+0xe2>
 8004a82:	464b      	mov	r3, r9
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	bfb8      	it	lt
 8004a88:	232d      	movlt	r3, #45	@ 0x2d
 8004a8a:	4a80      	ldr	r2, [pc, #512]	@ (8004c8c <_printf_float+0x2d8>)
 8004a8c:	bfb8      	it	lt
 8004a8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a92:	4b7f      	ldr	r3, [pc, #508]	@ (8004c90 <_printf_float+0x2dc>)
 8004a94:	e7d3      	b.n	8004a3e <_printf_float+0x8a>
 8004a96:	6863      	ldr	r3, [r4, #4]
 8004a98:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	d13f      	bne.n	8004b20 <_printf_float+0x16c>
 8004aa0:	2306      	movs	r3, #6
 8004aa2:	6063      	str	r3, [r4, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004aaa:	6023      	str	r3, [r4, #0]
 8004aac:	9206      	str	r2, [sp, #24]
 8004aae:	aa0e      	add	r2, sp, #56	@ 0x38
 8004ab0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8004ab4:	aa0d      	add	r2, sp, #52	@ 0x34
 8004ab6:	9203      	str	r2, [sp, #12]
 8004ab8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004abc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004ac0:	6863      	ldr	r3, [r4, #4]
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4628      	mov	r0, r5
 8004ac8:	464b      	mov	r3, r9
 8004aca:	910a      	str	r1, [sp, #40]	@ 0x28
 8004acc:	f7ff fed4 	bl	8004878 <__cvt>
 8004ad0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004ad2:	4680      	mov	r8, r0
 8004ad4:	2947      	cmp	r1, #71	@ 0x47
 8004ad6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004ad8:	d128      	bne.n	8004b2c <_printf_float+0x178>
 8004ada:	1cc8      	adds	r0, r1, #3
 8004adc:	db02      	blt.n	8004ae4 <_printf_float+0x130>
 8004ade:	6863      	ldr	r3, [r4, #4]
 8004ae0:	4299      	cmp	r1, r3
 8004ae2:	dd40      	ble.n	8004b66 <_printf_float+0x1b2>
 8004ae4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ae8:	fa5f fa8a 	uxtb.w	sl, sl
 8004aec:	4652      	mov	r2, sl
 8004aee:	3901      	subs	r1, #1
 8004af0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004af4:	910d      	str	r1, [sp, #52]	@ 0x34
 8004af6:	f7ff ff23 	bl	8004940 <__exponent>
 8004afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004afc:	4681      	mov	r9, r0
 8004afe:	1813      	adds	r3, r2, r0
 8004b00:	2a01      	cmp	r2, #1
 8004b02:	6123      	str	r3, [r4, #16]
 8004b04:	dc02      	bgt.n	8004b0c <_printf_float+0x158>
 8004b06:	6822      	ldr	r2, [r4, #0]
 8004b08:	07d2      	lsls	r2, r2, #31
 8004b0a:	d501      	bpl.n	8004b10 <_printf_float+0x15c>
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	6123      	str	r3, [r4, #16]
 8004b10:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d09e      	beq.n	8004a56 <_printf_float+0xa2>
 8004b18:	232d      	movs	r3, #45	@ 0x2d
 8004b1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b1e:	e79a      	b.n	8004a56 <_printf_float+0xa2>
 8004b20:	2947      	cmp	r1, #71	@ 0x47
 8004b22:	d1bf      	bne.n	8004aa4 <_printf_float+0xf0>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1bd      	bne.n	8004aa4 <_printf_float+0xf0>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e7ba      	b.n	8004aa2 <_printf_float+0xee>
 8004b2c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b30:	d9dc      	bls.n	8004aec <_printf_float+0x138>
 8004b32:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b36:	d118      	bne.n	8004b6a <_printf_float+0x1b6>
 8004b38:	2900      	cmp	r1, #0
 8004b3a:	6863      	ldr	r3, [r4, #4]
 8004b3c:	dd0b      	ble.n	8004b56 <_printf_float+0x1a2>
 8004b3e:	6121      	str	r1, [r4, #16]
 8004b40:	b913      	cbnz	r3, 8004b48 <_printf_float+0x194>
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	07d0      	lsls	r0, r2, #31
 8004b46:	d502      	bpl.n	8004b4e <_printf_float+0x19a>
 8004b48:	3301      	adds	r3, #1
 8004b4a:	440b      	add	r3, r1
 8004b4c:	6123      	str	r3, [r4, #16]
 8004b4e:	f04f 0900 	mov.w	r9, #0
 8004b52:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b54:	e7dc      	b.n	8004b10 <_printf_float+0x15c>
 8004b56:	b913      	cbnz	r3, 8004b5e <_printf_float+0x1aa>
 8004b58:	6822      	ldr	r2, [r4, #0]
 8004b5a:	07d2      	lsls	r2, r2, #31
 8004b5c:	d501      	bpl.n	8004b62 <_printf_float+0x1ae>
 8004b5e:	3302      	adds	r3, #2
 8004b60:	e7f4      	b.n	8004b4c <_printf_float+0x198>
 8004b62:	2301      	movs	r3, #1
 8004b64:	e7f2      	b.n	8004b4c <_printf_float+0x198>
 8004b66:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b6c:	4299      	cmp	r1, r3
 8004b6e:	db05      	blt.n	8004b7c <_printf_float+0x1c8>
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	6121      	str	r1, [r4, #16]
 8004b74:	07d8      	lsls	r0, r3, #31
 8004b76:	d5ea      	bpl.n	8004b4e <_printf_float+0x19a>
 8004b78:	1c4b      	adds	r3, r1, #1
 8004b7a:	e7e7      	b.n	8004b4c <_printf_float+0x198>
 8004b7c:	2900      	cmp	r1, #0
 8004b7e:	bfcc      	ite	gt
 8004b80:	2201      	movgt	r2, #1
 8004b82:	f1c1 0202 	rsble	r2, r1, #2
 8004b86:	4413      	add	r3, r2
 8004b88:	e7e0      	b.n	8004b4c <_printf_float+0x198>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	055a      	lsls	r2, r3, #21
 8004b8e:	d407      	bmi.n	8004ba0 <_printf_float+0x1ec>
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	4642      	mov	r2, r8
 8004b94:	4631      	mov	r1, r6
 8004b96:	4628      	mov	r0, r5
 8004b98:	47b8      	blx	r7
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d12b      	bne.n	8004bf6 <_printf_float+0x242>
 8004b9e:	e764      	b.n	8004a6a <_printf_float+0xb6>
 8004ba0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ba4:	f240 80dc 	bls.w	8004d60 <_printf_float+0x3ac>
 8004ba8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004bac:	2200      	movs	r2, #0
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f7fb fefa 	bl	80009a8 <__aeabi_dcmpeq>
 8004bb4:	2800      	cmp	r0, #0
 8004bb6:	d033      	beq.n	8004c20 <_printf_float+0x26c>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	4631      	mov	r1, r6
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	4a35      	ldr	r2, [pc, #212]	@ (8004c94 <_printf_float+0x2e0>)
 8004bc0:	47b8      	blx	r7
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	f43f af51 	beq.w	8004a6a <_printf_float+0xb6>
 8004bc8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004bcc:	4543      	cmp	r3, r8
 8004bce:	db02      	blt.n	8004bd6 <_printf_float+0x222>
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	07d8      	lsls	r0, r3, #31
 8004bd4:	d50f      	bpl.n	8004bf6 <_printf_float+0x242>
 8004bd6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004bda:	4631      	mov	r1, r6
 8004bdc:	4628      	mov	r0, r5
 8004bde:	47b8      	blx	r7
 8004be0:	3001      	adds	r0, #1
 8004be2:	f43f af42 	beq.w	8004a6a <_printf_float+0xb6>
 8004be6:	f04f 0900 	mov.w	r9, #0
 8004bea:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bee:	f104 0a1a 	add.w	sl, r4, #26
 8004bf2:	45c8      	cmp	r8, r9
 8004bf4:	dc09      	bgt.n	8004c0a <_printf_float+0x256>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	079b      	lsls	r3, r3, #30
 8004bfa:	f100 8102 	bmi.w	8004e02 <_printf_float+0x44e>
 8004bfe:	68e0      	ldr	r0, [r4, #12]
 8004c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004c02:	4298      	cmp	r0, r3
 8004c04:	bfb8      	it	lt
 8004c06:	4618      	movlt	r0, r3
 8004c08:	e731      	b.n	8004a6e <_printf_float+0xba>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	4652      	mov	r2, sl
 8004c0e:	4631      	mov	r1, r6
 8004c10:	4628      	mov	r0, r5
 8004c12:	47b8      	blx	r7
 8004c14:	3001      	adds	r0, #1
 8004c16:	f43f af28 	beq.w	8004a6a <_printf_float+0xb6>
 8004c1a:	f109 0901 	add.w	r9, r9, #1
 8004c1e:	e7e8      	b.n	8004bf2 <_printf_float+0x23e>
 8004c20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	dc38      	bgt.n	8004c98 <_printf_float+0x2e4>
 8004c26:	2301      	movs	r3, #1
 8004c28:	4631      	mov	r1, r6
 8004c2a:	4628      	mov	r0, r5
 8004c2c:	4a19      	ldr	r2, [pc, #100]	@ (8004c94 <_printf_float+0x2e0>)
 8004c2e:	47b8      	blx	r7
 8004c30:	3001      	adds	r0, #1
 8004c32:	f43f af1a 	beq.w	8004a6a <_printf_float+0xb6>
 8004c36:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004c3a:	ea59 0303 	orrs.w	r3, r9, r3
 8004c3e:	d102      	bne.n	8004c46 <_printf_float+0x292>
 8004c40:	6823      	ldr	r3, [r4, #0]
 8004c42:	07d9      	lsls	r1, r3, #31
 8004c44:	d5d7      	bpl.n	8004bf6 <_printf_float+0x242>
 8004c46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	47b8      	blx	r7
 8004c50:	3001      	adds	r0, #1
 8004c52:	f43f af0a 	beq.w	8004a6a <_printf_float+0xb6>
 8004c56:	f04f 0a00 	mov.w	sl, #0
 8004c5a:	f104 0b1a 	add.w	fp, r4, #26
 8004c5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c60:	425b      	negs	r3, r3
 8004c62:	4553      	cmp	r3, sl
 8004c64:	dc01      	bgt.n	8004c6a <_printf_float+0x2b6>
 8004c66:	464b      	mov	r3, r9
 8004c68:	e793      	b.n	8004b92 <_printf_float+0x1de>
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	465a      	mov	r2, fp
 8004c6e:	4631      	mov	r1, r6
 8004c70:	4628      	mov	r0, r5
 8004c72:	47b8      	blx	r7
 8004c74:	3001      	adds	r0, #1
 8004c76:	f43f aef8 	beq.w	8004a6a <_printf_float+0xb6>
 8004c7a:	f10a 0a01 	add.w	sl, sl, #1
 8004c7e:	e7ee      	b.n	8004c5e <_printf_float+0x2aa>
 8004c80:	7fefffff 	.word	0x7fefffff
 8004c84:	08007606 	.word	0x08007606
 8004c88:	08007602 	.word	0x08007602
 8004c8c:	0800760e 	.word	0x0800760e
 8004c90:	0800760a 	.word	0x0800760a
 8004c94:	08007612 	.word	0x08007612
 8004c98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c9a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004c9e:	4553      	cmp	r3, sl
 8004ca0:	bfa8      	it	ge
 8004ca2:	4653      	movge	r3, sl
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	4699      	mov	r9, r3
 8004ca8:	dc36      	bgt.n	8004d18 <_printf_float+0x364>
 8004caa:	f04f 0b00 	mov.w	fp, #0
 8004cae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cb2:	f104 021a 	add.w	r2, r4, #26
 8004cb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004cb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004cba:	eba3 0309 	sub.w	r3, r3, r9
 8004cbe:	455b      	cmp	r3, fp
 8004cc0:	dc31      	bgt.n	8004d26 <_printf_float+0x372>
 8004cc2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cc4:	459a      	cmp	sl, r3
 8004cc6:	dc3a      	bgt.n	8004d3e <_printf_float+0x38a>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07da      	lsls	r2, r3, #31
 8004ccc:	d437      	bmi.n	8004d3e <_printf_float+0x38a>
 8004cce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cd0:	ebaa 0903 	sub.w	r9, sl, r3
 8004cd4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cd6:	ebaa 0303 	sub.w	r3, sl, r3
 8004cda:	4599      	cmp	r9, r3
 8004cdc:	bfa8      	it	ge
 8004cde:	4699      	movge	r9, r3
 8004ce0:	f1b9 0f00 	cmp.w	r9, #0
 8004ce4:	dc33      	bgt.n	8004d4e <_printf_float+0x39a>
 8004ce6:	f04f 0800 	mov.w	r8, #0
 8004cea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cee:	f104 0b1a 	add.w	fp, r4, #26
 8004cf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cf4:	ebaa 0303 	sub.w	r3, sl, r3
 8004cf8:	eba3 0309 	sub.w	r3, r3, r9
 8004cfc:	4543      	cmp	r3, r8
 8004cfe:	f77f af7a 	ble.w	8004bf6 <_printf_float+0x242>
 8004d02:	2301      	movs	r3, #1
 8004d04:	465a      	mov	r2, fp
 8004d06:	4631      	mov	r1, r6
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b8      	blx	r7
 8004d0c:	3001      	adds	r0, #1
 8004d0e:	f43f aeac 	beq.w	8004a6a <_printf_float+0xb6>
 8004d12:	f108 0801 	add.w	r8, r8, #1
 8004d16:	e7ec      	b.n	8004cf2 <_printf_float+0x33e>
 8004d18:	4642      	mov	r2, r8
 8004d1a:	4631      	mov	r1, r6
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	47b8      	blx	r7
 8004d20:	3001      	adds	r0, #1
 8004d22:	d1c2      	bne.n	8004caa <_printf_float+0x2f6>
 8004d24:	e6a1      	b.n	8004a6a <_printf_float+0xb6>
 8004d26:	2301      	movs	r3, #1
 8004d28:	4631      	mov	r1, r6
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	920a      	str	r2, [sp, #40]	@ 0x28
 8004d2e:	47b8      	blx	r7
 8004d30:	3001      	adds	r0, #1
 8004d32:	f43f ae9a 	beq.w	8004a6a <_printf_float+0xb6>
 8004d36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d38:	f10b 0b01 	add.w	fp, fp, #1
 8004d3c:	e7bb      	b.n	8004cb6 <_printf_float+0x302>
 8004d3e:	4631      	mov	r1, r6
 8004d40:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d44:	4628      	mov	r0, r5
 8004d46:	47b8      	blx	r7
 8004d48:	3001      	adds	r0, #1
 8004d4a:	d1c0      	bne.n	8004cce <_printf_float+0x31a>
 8004d4c:	e68d      	b.n	8004a6a <_printf_float+0xb6>
 8004d4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d50:	464b      	mov	r3, r9
 8004d52:	4631      	mov	r1, r6
 8004d54:	4628      	mov	r0, r5
 8004d56:	4442      	add	r2, r8
 8004d58:	47b8      	blx	r7
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	d1c3      	bne.n	8004ce6 <_printf_float+0x332>
 8004d5e:	e684      	b.n	8004a6a <_printf_float+0xb6>
 8004d60:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004d64:	f1ba 0f01 	cmp.w	sl, #1
 8004d68:	dc01      	bgt.n	8004d6e <_printf_float+0x3ba>
 8004d6a:	07db      	lsls	r3, r3, #31
 8004d6c:	d536      	bpl.n	8004ddc <_printf_float+0x428>
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4642      	mov	r2, r8
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	f43f ae76 	beq.w	8004a6a <_printf_float+0xb6>
 8004d7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f43f ae6e 	beq.w	8004a6a <_printf_float+0xb6>
 8004d8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d92:	2200      	movs	r2, #0
 8004d94:	2300      	movs	r3, #0
 8004d96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d9a:	f7fb fe05 	bl	80009a8 <__aeabi_dcmpeq>
 8004d9e:	b9c0      	cbnz	r0, 8004dd2 <_printf_float+0x41e>
 8004da0:	4653      	mov	r3, sl
 8004da2:	f108 0201 	add.w	r2, r8, #1
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	d10c      	bne.n	8004dca <_printf_float+0x416>
 8004db0:	e65b      	b.n	8004a6a <_printf_float+0xb6>
 8004db2:	2301      	movs	r3, #1
 8004db4:	465a      	mov	r2, fp
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	47b8      	blx	r7
 8004dbc:	3001      	adds	r0, #1
 8004dbe:	f43f ae54 	beq.w	8004a6a <_printf_float+0xb6>
 8004dc2:	f108 0801 	add.w	r8, r8, #1
 8004dc6:	45d0      	cmp	r8, sl
 8004dc8:	dbf3      	blt.n	8004db2 <_printf_float+0x3fe>
 8004dca:	464b      	mov	r3, r9
 8004dcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004dd0:	e6e0      	b.n	8004b94 <_printf_float+0x1e0>
 8004dd2:	f04f 0800 	mov.w	r8, #0
 8004dd6:	f104 0b1a 	add.w	fp, r4, #26
 8004dda:	e7f4      	b.n	8004dc6 <_printf_float+0x412>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	4642      	mov	r2, r8
 8004de0:	e7e1      	b.n	8004da6 <_printf_float+0x3f2>
 8004de2:	2301      	movs	r3, #1
 8004de4:	464a      	mov	r2, r9
 8004de6:	4631      	mov	r1, r6
 8004de8:	4628      	mov	r0, r5
 8004dea:	47b8      	blx	r7
 8004dec:	3001      	adds	r0, #1
 8004dee:	f43f ae3c 	beq.w	8004a6a <_printf_float+0xb6>
 8004df2:	f108 0801 	add.w	r8, r8, #1
 8004df6:	68e3      	ldr	r3, [r4, #12]
 8004df8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004dfa:	1a5b      	subs	r3, r3, r1
 8004dfc:	4543      	cmp	r3, r8
 8004dfe:	dcf0      	bgt.n	8004de2 <_printf_float+0x42e>
 8004e00:	e6fd      	b.n	8004bfe <_printf_float+0x24a>
 8004e02:	f04f 0800 	mov.w	r8, #0
 8004e06:	f104 0919 	add.w	r9, r4, #25
 8004e0a:	e7f4      	b.n	8004df6 <_printf_float+0x442>

08004e0c <_printf_common>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	4616      	mov	r6, r2
 8004e12:	4698      	mov	r8, r3
 8004e14:	688a      	ldr	r2, [r1, #8]
 8004e16:	690b      	ldr	r3, [r1, #16]
 8004e18:	4607      	mov	r7, r0
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	bfb8      	it	lt
 8004e1e:	4613      	movlt	r3, r2
 8004e20:	6033      	str	r3, [r6, #0]
 8004e22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e26:	460c      	mov	r4, r1
 8004e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e2c:	b10a      	cbz	r2, 8004e32 <_printf_common+0x26>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	0699      	lsls	r1, r3, #26
 8004e36:	bf42      	ittt	mi
 8004e38:	6833      	ldrmi	r3, [r6, #0]
 8004e3a:	3302      	addmi	r3, #2
 8004e3c:	6033      	strmi	r3, [r6, #0]
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	f015 0506 	ands.w	r5, r5, #6
 8004e44:	d106      	bne.n	8004e54 <_printf_common+0x48>
 8004e46:	f104 0a19 	add.w	sl, r4, #25
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	6832      	ldr	r2, [r6, #0]
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc2b      	bgt.n	8004eac <_printf_common+0xa0>
 8004e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	3b00      	subs	r3, #0
 8004e5c:	bf18      	it	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	0692      	lsls	r2, r2, #26
 8004e62:	d430      	bmi.n	8004ec6 <_printf_common+0xba>
 8004e64:	4641      	mov	r1, r8
 8004e66:	4638      	mov	r0, r7
 8004e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e6c:	47c8      	blx	r9
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d023      	beq.n	8004eba <_printf_common+0xae>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	6922      	ldr	r2, [r4, #16]
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf14      	ite	ne
 8004e7e:	2500      	movne	r5, #0
 8004e80:	6833      	ldreq	r3, [r6, #0]
 8004e82:	f04f 0600 	mov.w	r6, #0
 8004e86:	bf08      	it	eq
 8004e88:	68e5      	ldreq	r5, [r4, #12]
 8004e8a:	f104 041a 	add.w	r4, r4, #26
 8004e8e:	bf08      	it	eq
 8004e90:	1aed      	subeq	r5, r5, r3
 8004e92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004e96:	bf08      	it	eq
 8004e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	bfc4      	itt	gt
 8004ea0:	1a9b      	subgt	r3, r3, r2
 8004ea2:	18ed      	addgt	r5, r5, r3
 8004ea4:	42b5      	cmp	r5, r6
 8004ea6:	d11a      	bne.n	8004ede <_printf_common+0xd2>
 8004ea8:	2000      	movs	r0, #0
 8004eaa:	e008      	b.n	8004ebe <_printf_common+0xb2>
 8004eac:	2301      	movs	r3, #1
 8004eae:	4652      	mov	r2, sl
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	4638      	mov	r0, r7
 8004eb4:	47c8      	blx	r9
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	d103      	bne.n	8004ec2 <_printf_common+0xb6>
 8004eba:	f04f 30ff 	mov.w	r0, #4294967295
 8004ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec2:	3501      	adds	r5, #1
 8004ec4:	e7c1      	b.n	8004e4a <_printf_common+0x3e>
 8004ec6:	2030      	movs	r0, #48	@ 0x30
 8004ec8:	18e1      	adds	r1, r4, r3
 8004eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ece:	1c5a      	adds	r2, r3, #1
 8004ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ed4:	4422      	add	r2, r4
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004edc:	e7c2      	b.n	8004e64 <_printf_common+0x58>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4622      	mov	r2, r4
 8004ee2:	4641      	mov	r1, r8
 8004ee4:	4638      	mov	r0, r7
 8004ee6:	47c8      	blx	r9
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d0e6      	beq.n	8004eba <_printf_common+0xae>
 8004eec:	3601      	adds	r6, #1
 8004eee:	e7d9      	b.n	8004ea4 <_printf_common+0x98>

08004ef0 <_printf_i>:
 8004ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef4:	7e0f      	ldrb	r7, [r1, #24]
 8004ef6:	4691      	mov	r9, r2
 8004ef8:	2f78      	cmp	r7, #120	@ 0x78
 8004efa:	4680      	mov	r8, r0
 8004efc:	460c      	mov	r4, r1
 8004efe:	469a      	mov	sl, r3
 8004f00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f06:	d807      	bhi.n	8004f18 <_printf_i+0x28>
 8004f08:	2f62      	cmp	r7, #98	@ 0x62
 8004f0a:	d80a      	bhi.n	8004f22 <_printf_i+0x32>
 8004f0c:	2f00      	cmp	r7, #0
 8004f0e:	f000 80d1 	beq.w	80050b4 <_printf_i+0x1c4>
 8004f12:	2f58      	cmp	r7, #88	@ 0x58
 8004f14:	f000 80b8 	beq.w	8005088 <_printf_i+0x198>
 8004f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f20:	e03a      	b.n	8004f98 <_printf_i+0xa8>
 8004f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f26:	2b15      	cmp	r3, #21
 8004f28:	d8f6      	bhi.n	8004f18 <_printf_i+0x28>
 8004f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8004f30 <_printf_i+0x40>)
 8004f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f30:	08004f89 	.word	0x08004f89
 8004f34:	08004f9d 	.word	0x08004f9d
 8004f38:	08004f19 	.word	0x08004f19
 8004f3c:	08004f19 	.word	0x08004f19
 8004f40:	08004f19 	.word	0x08004f19
 8004f44:	08004f19 	.word	0x08004f19
 8004f48:	08004f9d 	.word	0x08004f9d
 8004f4c:	08004f19 	.word	0x08004f19
 8004f50:	08004f19 	.word	0x08004f19
 8004f54:	08004f19 	.word	0x08004f19
 8004f58:	08004f19 	.word	0x08004f19
 8004f5c:	0800509b 	.word	0x0800509b
 8004f60:	08004fc7 	.word	0x08004fc7
 8004f64:	08005055 	.word	0x08005055
 8004f68:	08004f19 	.word	0x08004f19
 8004f6c:	08004f19 	.word	0x08004f19
 8004f70:	080050bd 	.word	0x080050bd
 8004f74:	08004f19 	.word	0x08004f19
 8004f78:	08004fc7 	.word	0x08004fc7
 8004f7c:	08004f19 	.word	0x08004f19
 8004f80:	08004f19 	.word	0x08004f19
 8004f84:	0800505d 	.word	0x0800505d
 8004f88:	6833      	ldr	r3, [r6, #0]
 8004f8a:	1d1a      	adds	r2, r3, #4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6032      	str	r2, [r6, #0]
 8004f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e09c      	b.n	80050d6 <_printf_i+0x1e6>
 8004f9c:	6833      	ldr	r3, [r6, #0]
 8004f9e:	6820      	ldr	r0, [r4, #0]
 8004fa0:	1d19      	adds	r1, r3, #4
 8004fa2:	6031      	str	r1, [r6, #0]
 8004fa4:	0606      	lsls	r6, r0, #24
 8004fa6:	d501      	bpl.n	8004fac <_printf_i+0xbc>
 8004fa8:	681d      	ldr	r5, [r3, #0]
 8004faa:	e003      	b.n	8004fb4 <_printf_i+0xc4>
 8004fac:	0645      	lsls	r5, r0, #25
 8004fae:	d5fb      	bpl.n	8004fa8 <_printf_i+0xb8>
 8004fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fb4:	2d00      	cmp	r5, #0
 8004fb6:	da03      	bge.n	8004fc0 <_printf_i+0xd0>
 8004fb8:	232d      	movs	r3, #45	@ 0x2d
 8004fba:	426d      	negs	r5, r5
 8004fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fc0:	230a      	movs	r3, #10
 8004fc2:	4858      	ldr	r0, [pc, #352]	@ (8005124 <_printf_i+0x234>)
 8004fc4:	e011      	b.n	8004fea <_printf_i+0xfa>
 8004fc6:	6821      	ldr	r1, [r4, #0]
 8004fc8:	6833      	ldr	r3, [r6, #0]
 8004fca:	0608      	lsls	r0, r1, #24
 8004fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fd0:	d402      	bmi.n	8004fd8 <_printf_i+0xe8>
 8004fd2:	0649      	lsls	r1, r1, #25
 8004fd4:	bf48      	it	mi
 8004fd6:	b2ad      	uxthmi	r5, r5
 8004fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fda:	6033      	str	r3, [r6, #0]
 8004fdc:	bf14      	ite	ne
 8004fde:	230a      	movne	r3, #10
 8004fe0:	2308      	moveq	r3, #8
 8004fe2:	4850      	ldr	r0, [pc, #320]	@ (8005124 <_printf_i+0x234>)
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fea:	6866      	ldr	r6, [r4, #4]
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	60a6      	str	r6, [r4, #8]
 8004ff0:	db05      	blt.n	8004ffe <_printf_i+0x10e>
 8004ff2:	6821      	ldr	r1, [r4, #0]
 8004ff4:	432e      	orrs	r6, r5
 8004ff6:	f021 0104 	bic.w	r1, r1, #4
 8004ffa:	6021      	str	r1, [r4, #0]
 8004ffc:	d04b      	beq.n	8005096 <_printf_i+0x1a6>
 8004ffe:	4616      	mov	r6, r2
 8005000:	fbb5 f1f3 	udiv	r1, r5, r3
 8005004:	fb03 5711 	mls	r7, r3, r1, r5
 8005008:	5dc7      	ldrb	r7, [r0, r7]
 800500a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800500e:	462f      	mov	r7, r5
 8005010:	42bb      	cmp	r3, r7
 8005012:	460d      	mov	r5, r1
 8005014:	d9f4      	bls.n	8005000 <_printf_i+0x110>
 8005016:	2b08      	cmp	r3, #8
 8005018:	d10b      	bne.n	8005032 <_printf_i+0x142>
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	07df      	lsls	r7, r3, #31
 800501e:	d508      	bpl.n	8005032 <_printf_i+0x142>
 8005020:	6923      	ldr	r3, [r4, #16]
 8005022:	6861      	ldr	r1, [r4, #4]
 8005024:	4299      	cmp	r1, r3
 8005026:	bfde      	ittt	le
 8005028:	2330      	movle	r3, #48	@ 0x30
 800502a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800502e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005032:	1b92      	subs	r2, r2, r6
 8005034:	6122      	str	r2, [r4, #16]
 8005036:	464b      	mov	r3, r9
 8005038:	4621      	mov	r1, r4
 800503a:	4640      	mov	r0, r8
 800503c:	f8cd a000 	str.w	sl, [sp]
 8005040:	aa03      	add	r2, sp, #12
 8005042:	f7ff fee3 	bl	8004e0c <_printf_common>
 8005046:	3001      	adds	r0, #1
 8005048:	d14a      	bne.n	80050e0 <_printf_i+0x1f0>
 800504a:	f04f 30ff 	mov.w	r0, #4294967295
 800504e:	b004      	add	sp, #16
 8005050:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005054:	6823      	ldr	r3, [r4, #0]
 8005056:	f043 0320 	orr.w	r3, r3, #32
 800505a:	6023      	str	r3, [r4, #0]
 800505c:	2778      	movs	r7, #120	@ 0x78
 800505e:	4832      	ldr	r0, [pc, #200]	@ (8005128 <_printf_i+0x238>)
 8005060:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	6831      	ldr	r1, [r6, #0]
 8005068:	061f      	lsls	r7, r3, #24
 800506a:	f851 5b04 	ldr.w	r5, [r1], #4
 800506e:	d402      	bmi.n	8005076 <_printf_i+0x186>
 8005070:	065f      	lsls	r7, r3, #25
 8005072:	bf48      	it	mi
 8005074:	b2ad      	uxthmi	r5, r5
 8005076:	6031      	str	r1, [r6, #0]
 8005078:	07d9      	lsls	r1, r3, #31
 800507a:	bf44      	itt	mi
 800507c:	f043 0320 	orrmi.w	r3, r3, #32
 8005080:	6023      	strmi	r3, [r4, #0]
 8005082:	b11d      	cbz	r5, 800508c <_printf_i+0x19c>
 8005084:	2310      	movs	r3, #16
 8005086:	e7ad      	b.n	8004fe4 <_printf_i+0xf4>
 8005088:	4826      	ldr	r0, [pc, #152]	@ (8005124 <_printf_i+0x234>)
 800508a:	e7e9      	b.n	8005060 <_printf_i+0x170>
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	f023 0320 	bic.w	r3, r3, #32
 8005092:	6023      	str	r3, [r4, #0]
 8005094:	e7f6      	b.n	8005084 <_printf_i+0x194>
 8005096:	4616      	mov	r6, r2
 8005098:	e7bd      	b.n	8005016 <_printf_i+0x126>
 800509a:	6833      	ldr	r3, [r6, #0]
 800509c:	6825      	ldr	r5, [r4, #0]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	6961      	ldr	r1, [r4, #20]
 80050a2:	6030      	str	r0, [r6, #0]
 80050a4:	062e      	lsls	r6, r5, #24
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	d501      	bpl.n	80050ae <_printf_i+0x1be>
 80050aa:	6019      	str	r1, [r3, #0]
 80050ac:	e002      	b.n	80050b4 <_printf_i+0x1c4>
 80050ae:	0668      	lsls	r0, r5, #25
 80050b0:	d5fb      	bpl.n	80050aa <_printf_i+0x1ba>
 80050b2:	8019      	strh	r1, [r3, #0]
 80050b4:	2300      	movs	r3, #0
 80050b6:	4616      	mov	r6, r2
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	e7bc      	b.n	8005036 <_printf_i+0x146>
 80050bc:	6833      	ldr	r3, [r6, #0]
 80050be:	2100      	movs	r1, #0
 80050c0:	1d1a      	adds	r2, r3, #4
 80050c2:	6032      	str	r2, [r6, #0]
 80050c4:	681e      	ldr	r6, [r3, #0]
 80050c6:	6862      	ldr	r2, [r4, #4]
 80050c8:	4630      	mov	r0, r6
 80050ca:	f000 f9ea 	bl	80054a2 <memchr>
 80050ce:	b108      	cbz	r0, 80050d4 <_printf_i+0x1e4>
 80050d0:	1b80      	subs	r0, r0, r6
 80050d2:	6060      	str	r0, [r4, #4]
 80050d4:	6863      	ldr	r3, [r4, #4]
 80050d6:	6123      	str	r3, [r4, #16]
 80050d8:	2300      	movs	r3, #0
 80050da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050de:	e7aa      	b.n	8005036 <_printf_i+0x146>
 80050e0:	4632      	mov	r2, r6
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	47d0      	blx	sl
 80050ea:	3001      	adds	r0, #1
 80050ec:	d0ad      	beq.n	800504a <_printf_i+0x15a>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	079b      	lsls	r3, r3, #30
 80050f2:	d413      	bmi.n	800511c <_printf_i+0x22c>
 80050f4:	68e0      	ldr	r0, [r4, #12]
 80050f6:	9b03      	ldr	r3, [sp, #12]
 80050f8:	4298      	cmp	r0, r3
 80050fa:	bfb8      	it	lt
 80050fc:	4618      	movlt	r0, r3
 80050fe:	e7a6      	b.n	800504e <_printf_i+0x15e>
 8005100:	2301      	movs	r3, #1
 8005102:	4632      	mov	r2, r6
 8005104:	4649      	mov	r1, r9
 8005106:	4640      	mov	r0, r8
 8005108:	47d0      	blx	sl
 800510a:	3001      	adds	r0, #1
 800510c:	d09d      	beq.n	800504a <_printf_i+0x15a>
 800510e:	3501      	adds	r5, #1
 8005110:	68e3      	ldr	r3, [r4, #12]
 8005112:	9903      	ldr	r1, [sp, #12]
 8005114:	1a5b      	subs	r3, r3, r1
 8005116:	42ab      	cmp	r3, r5
 8005118:	dcf2      	bgt.n	8005100 <_printf_i+0x210>
 800511a:	e7eb      	b.n	80050f4 <_printf_i+0x204>
 800511c:	2500      	movs	r5, #0
 800511e:	f104 0619 	add.w	r6, r4, #25
 8005122:	e7f5      	b.n	8005110 <_printf_i+0x220>
 8005124:	08007614 	.word	0x08007614
 8005128:	08007625 	.word	0x08007625

0800512c <std>:
 800512c:	2300      	movs	r3, #0
 800512e:	b510      	push	{r4, lr}
 8005130:	4604      	mov	r4, r0
 8005132:	e9c0 3300 	strd	r3, r3, [r0]
 8005136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800513a:	6083      	str	r3, [r0, #8]
 800513c:	8181      	strh	r1, [r0, #12]
 800513e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005140:	81c2      	strh	r2, [r0, #14]
 8005142:	6183      	str	r3, [r0, #24]
 8005144:	4619      	mov	r1, r3
 8005146:	2208      	movs	r2, #8
 8005148:	305c      	adds	r0, #92	@ 0x5c
 800514a:	f000 f92a 	bl	80053a2 <memset>
 800514e:	4b0d      	ldr	r3, [pc, #52]	@ (8005184 <std+0x58>)
 8005150:	6224      	str	r4, [r4, #32]
 8005152:	6263      	str	r3, [r4, #36]	@ 0x24
 8005154:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <std+0x5c>)
 8005156:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005158:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <std+0x60>)
 800515a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800515c:	4b0c      	ldr	r3, [pc, #48]	@ (8005190 <std+0x64>)
 800515e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005160:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <std+0x68>)
 8005162:	429c      	cmp	r4, r3
 8005164:	d006      	beq.n	8005174 <std+0x48>
 8005166:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800516a:	4294      	cmp	r4, r2
 800516c:	d002      	beq.n	8005174 <std+0x48>
 800516e:	33d0      	adds	r3, #208	@ 0xd0
 8005170:	429c      	cmp	r4, r3
 8005172:	d105      	bne.n	8005180 <std+0x54>
 8005174:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800517c:	f000 b98e 	b.w	800549c <__retarget_lock_init_recursive>
 8005180:	bd10      	pop	{r4, pc}
 8005182:	bf00      	nop
 8005184:	0800531d 	.word	0x0800531d
 8005188:	0800533f 	.word	0x0800533f
 800518c:	08005377 	.word	0x08005377
 8005190:	0800539b 	.word	0x0800539b
 8005194:	200002c8 	.word	0x200002c8

08005198 <stdio_exit_handler>:
 8005198:	4a02      	ldr	r2, [pc, #8]	@ (80051a4 <stdio_exit_handler+0xc>)
 800519a:	4903      	ldr	r1, [pc, #12]	@ (80051a8 <stdio_exit_handler+0x10>)
 800519c:	4803      	ldr	r0, [pc, #12]	@ (80051ac <stdio_exit_handler+0x14>)
 800519e:	f000 b869 	b.w	8005274 <_fwalk_sglue>
 80051a2:	bf00      	nop
 80051a4:	20000010 	.word	0x20000010
 80051a8:	08006e19 	.word	0x08006e19
 80051ac:	20000020 	.word	0x20000020

080051b0 <cleanup_stdio>:
 80051b0:	6841      	ldr	r1, [r0, #4]
 80051b2:	4b0c      	ldr	r3, [pc, #48]	@ (80051e4 <cleanup_stdio+0x34>)
 80051b4:	b510      	push	{r4, lr}
 80051b6:	4299      	cmp	r1, r3
 80051b8:	4604      	mov	r4, r0
 80051ba:	d001      	beq.n	80051c0 <cleanup_stdio+0x10>
 80051bc:	f001 fe2c 	bl	8006e18 <_fflush_r>
 80051c0:	68a1      	ldr	r1, [r4, #8]
 80051c2:	4b09      	ldr	r3, [pc, #36]	@ (80051e8 <cleanup_stdio+0x38>)
 80051c4:	4299      	cmp	r1, r3
 80051c6:	d002      	beq.n	80051ce <cleanup_stdio+0x1e>
 80051c8:	4620      	mov	r0, r4
 80051ca:	f001 fe25 	bl	8006e18 <_fflush_r>
 80051ce:	68e1      	ldr	r1, [r4, #12]
 80051d0:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <cleanup_stdio+0x3c>)
 80051d2:	4299      	cmp	r1, r3
 80051d4:	d004      	beq.n	80051e0 <cleanup_stdio+0x30>
 80051d6:	4620      	mov	r0, r4
 80051d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051dc:	f001 be1c 	b.w	8006e18 <_fflush_r>
 80051e0:	bd10      	pop	{r4, pc}
 80051e2:	bf00      	nop
 80051e4:	200002c8 	.word	0x200002c8
 80051e8:	20000330 	.word	0x20000330
 80051ec:	20000398 	.word	0x20000398

080051f0 <global_stdio_init.part.0>:
 80051f0:	b510      	push	{r4, lr}
 80051f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <global_stdio_init.part.0+0x30>)
 80051f4:	4c0b      	ldr	r4, [pc, #44]	@ (8005224 <global_stdio_init.part.0+0x34>)
 80051f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005228 <global_stdio_init.part.0+0x38>)
 80051f8:	4620      	mov	r0, r4
 80051fa:	601a      	str	r2, [r3, #0]
 80051fc:	2104      	movs	r1, #4
 80051fe:	2200      	movs	r2, #0
 8005200:	f7ff ff94 	bl	800512c <std>
 8005204:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005208:	2201      	movs	r2, #1
 800520a:	2109      	movs	r1, #9
 800520c:	f7ff ff8e 	bl	800512c <std>
 8005210:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005214:	2202      	movs	r2, #2
 8005216:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800521a:	2112      	movs	r1, #18
 800521c:	f7ff bf86 	b.w	800512c <std>
 8005220:	20000400 	.word	0x20000400
 8005224:	200002c8 	.word	0x200002c8
 8005228:	08005199 	.word	0x08005199

0800522c <__sfp_lock_acquire>:
 800522c:	4801      	ldr	r0, [pc, #4]	@ (8005234 <__sfp_lock_acquire+0x8>)
 800522e:	f000 b936 	b.w	800549e <__retarget_lock_acquire_recursive>
 8005232:	bf00      	nop
 8005234:	20000409 	.word	0x20000409

08005238 <__sfp_lock_release>:
 8005238:	4801      	ldr	r0, [pc, #4]	@ (8005240 <__sfp_lock_release+0x8>)
 800523a:	f000 b931 	b.w	80054a0 <__retarget_lock_release_recursive>
 800523e:	bf00      	nop
 8005240:	20000409 	.word	0x20000409

08005244 <__sinit>:
 8005244:	b510      	push	{r4, lr}
 8005246:	4604      	mov	r4, r0
 8005248:	f7ff fff0 	bl	800522c <__sfp_lock_acquire>
 800524c:	6a23      	ldr	r3, [r4, #32]
 800524e:	b11b      	cbz	r3, 8005258 <__sinit+0x14>
 8005250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005254:	f7ff bff0 	b.w	8005238 <__sfp_lock_release>
 8005258:	4b04      	ldr	r3, [pc, #16]	@ (800526c <__sinit+0x28>)
 800525a:	6223      	str	r3, [r4, #32]
 800525c:	4b04      	ldr	r3, [pc, #16]	@ (8005270 <__sinit+0x2c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f5      	bne.n	8005250 <__sinit+0xc>
 8005264:	f7ff ffc4 	bl	80051f0 <global_stdio_init.part.0>
 8005268:	e7f2      	b.n	8005250 <__sinit+0xc>
 800526a:	bf00      	nop
 800526c:	080051b1 	.word	0x080051b1
 8005270:	20000400 	.word	0x20000400

08005274 <_fwalk_sglue>:
 8005274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005278:	4607      	mov	r7, r0
 800527a:	4688      	mov	r8, r1
 800527c:	4614      	mov	r4, r2
 800527e:	2600      	movs	r6, #0
 8005280:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005284:	f1b9 0901 	subs.w	r9, r9, #1
 8005288:	d505      	bpl.n	8005296 <_fwalk_sglue+0x22>
 800528a:	6824      	ldr	r4, [r4, #0]
 800528c:	2c00      	cmp	r4, #0
 800528e:	d1f7      	bne.n	8005280 <_fwalk_sglue+0xc>
 8005290:	4630      	mov	r0, r6
 8005292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005296:	89ab      	ldrh	r3, [r5, #12]
 8005298:	2b01      	cmp	r3, #1
 800529a:	d907      	bls.n	80052ac <_fwalk_sglue+0x38>
 800529c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052a0:	3301      	adds	r3, #1
 80052a2:	d003      	beq.n	80052ac <_fwalk_sglue+0x38>
 80052a4:	4629      	mov	r1, r5
 80052a6:	4638      	mov	r0, r7
 80052a8:	47c0      	blx	r8
 80052aa:	4306      	orrs	r6, r0
 80052ac:	3568      	adds	r5, #104	@ 0x68
 80052ae:	e7e9      	b.n	8005284 <_fwalk_sglue+0x10>

080052b0 <sniprintf>:
 80052b0:	b40c      	push	{r2, r3}
 80052b2:	b530      	push	{r4, r5, lr}
 80052b4:	4b18      	ldr	r3, [pc, #96]	@ (8005318 <sniprintf+0x68>)
 80052b6:	1e0c      	subs	r4, r1, #0
 80052b8:	681d      	ldr	r5, [r3, #0]
 80052ba:	b09d      	sub	sp, #116	@ 0x74
 80052bc:	da08      	bge.n	80052d0 <sniprintf+0x20>
 80052be:	238b      	movs	r3, #139	@ 0x8b
 80052c0:	f04f 30ff 	mov.w	r0, #4294967295
 80052c4:	602b      	str	r3, [r5, #0]
 80052c6:	b01d      	add	sp, #116	@ 0x74
 80052c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80052cc:	b002      	add	sp, #8
 80052ce:	4770      	bx	lr
 80052d0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80052d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	931b      	str	r3, [sp, #108]	@ 0x6c
 80052de:	bf0c      	ite	eq
 80052e0:	4623      	moveq	r3, r4
 80052e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80052e6:	9304      	str	r3, [sp, #16]
 80052e8:	9307      	str	r3, [sp, #28]
 80052ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052ee:	9002      	str	r0, [sp, #8]
 80052f0:	9006      	str	r0, [sp, #24]
 80052f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052f6:	4628      	mov	r0, r5
 80052f8:	ab21      	add	r3, sp, #132	@ 0x84
 80052fa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80052fc:	a902      	add	r1, sp, #8
 80052fe:	9301      	str	r3, [sp, #4]
 8005300:	f001 fc0e 	bl	8006b20 <_svfiprintf_r>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	bfbc      	itt	lt
 8005308:	238b      	movlt	r3, #139	@ 0x8b
 800530a:	602b      	strlt	r3, [r5, #0]
 800530c:	2c00      	cmp	r4, #0
 800530e:	d0da      	beq.n	80052c6 <sniprintf+0x16>
 8005310:	2200      	movs	r2, #0
 8005312:	9b02      	ldr	r3, [sp, #8]
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	e7d6      	b.n	80052c6 <sniprintf+0x16>
 8005318:	2000001c 	.word	0x2000001c

0800531c <__sread>:
 800531c:	b510      	push	{r4, lr}
 800531e:	460c      	mov	r4, r1
 8005320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005324:	f000 f86c 	bl	8005400 <_read_r>
 8005328:	2800      	cmp	r0, #0
 800532a:	bfab      	itete	ge
 800532c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800532e:	89a3      	ldrhlt	r3, [r4, #12]
 8005330:	181b      	addge	r3, r3, r0
 8005332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005336:	bfac      	ite	ge
 8005338:	6563      	strge	r3, [r4, #84]	@ 0x54
 800533a:	81a3      	strhlt	r3, [r4, #12]
 800533c:	bd10      	pop	{r4, pc}

0800533e <__swrite>:
 800533e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005342:	461f      	mov	r7, r3
 8005344:	898b      	ldrh	r3, [r1, #12]
 8005346:	4605      	mov	r5, r0
 8005348:	05db      	lsls	r3, r3, #23
 800534a:	460c      	mov	r4, r1
 800534c:	4616      	mov	r6, r2
 800534e:	d505      	bpl.n	800535c <__swrite+0x1e>
 8005350:	2302      	movs	r3, #2
 8005352:	2200      	movs	r2, #0
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	f000 f840 	bl	80053dc <_lseek_r>
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	4632      	mov	r2, r6
 8005360:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	4628      	mov	r0, r5
 8005368:	463b      	mov	r3, r7
 800536a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800536e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005372:	f000 b857 	b.w	8005424 <_write_r>

08005376 <__sseek>:
 8005376:	b510      	push	{r4, lr}
 8005378:	460c      	mov	r4, r1
 800537a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800537e:	f000 f82d 	bl	80053dc <_lseek_r>
 8005382:	1c43      	adds	r3, r0, #1
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	bf15      	itete	ne
 8005388:	6560      	strne	r0, [r4, #84]	@ 0x54
 800538a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800538e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005392:	81a3      	strheq	r3, [r4, #12]
 8005394:	bf18      	it	ne
 8005396:	81a3      	strhne	r3, [r4, #12]
 8005398:	bd10      	pop	{r4, pc}

0800539a <__sclose>:
 800539a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539e:	f000 b80d 	b.w	80053bc <_close_r>

080053a2 <memset>:
 80053a2:	4603      	mov	r3, r0
 80053a4:	4402      	add	r2, r0
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d100      	bne.n	80053ac <memset+0xa>
 80053aa:	4770      	bx	lr
 80053ac:	f803 1b01 	strb.w	r1, [r3], #1
 80053b0:	e7f9      	b.n	80053a6 <memset+0x4>
	...

080053b4 <_localeconv_r>:
 80053b4:	4800      	ldr	r0, [pc, #0]	@ (80053b8 <_localeconv_r+0x4>)
 80053b6:	4770      	bx	lr
 80053b8:	2000015c 	.word	0x2000015c

080053bc <_close_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	2300      	movs	r3, #0
 80053c0:	4d05      	ldr	r5, [pc, #20]	@ (80053d8 <_close_r+0x1c>)
 80053c2:	4604      	mov	r4, r0
 80053c4:	4608      	mov	r0, r1
 80053c6:	602b      	str	r3, [r5, #0]
 80053c8:	f7fc fc39 	bl	8001c3e <_close>
 80053cc:	1c43      	adds	r3, r0, #1
 80053ce:	d102      	bne.n	80053d6 <_close_r+0x1a>
 80053d0:	682b      	ldr	r3, [r5, #0]
 80053d2:	b103      	cbz	r3, 80053d6 <_close_r+0x1a>
 80053d4:	6023      	str	r3, [r4, #0]
 80053d6:	bd38      	pop	{r3, r4, r5, pc}
 80053d8:	20000404 	.word	0x20000404

080053dc <_lseek_r>:
 80053dc:	b538      	push	{r3, r4, r5, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	4608      	mov	r0, r1
 80053e2:	4611      	mov	r1, r2
 80053e4:	2200      	movs	r2, #0
 80053e6:	4d05      	ldr	r5, [pc, #20]	@ (80053fc <_lseek_r+0x20>)
 80053e8:	602a      	str	r2, [r5, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	f7fc fc4b 	bl	8001c86 <_lseek>
 80053f0:	1c43      	adds	r3, r0, #1
 80053f2:	d102      	bne.n	80053fa <_lseek_r+0x1e>
 80053f4:	682b      	ldr	r3, [r5, #0]
 80053f6:	b103      	cbz	r3, 80053fa <_lseek_r+0x1e>
 80053f8:	6023      	str	r3, [r4, #0]
 80053fa:	bd38      	pop	{r3, r4, r5, pc}
 80053fc:	20000404 	.word	0x20000404

08005400 <_read_r>:
 8005400:	b538      	push	{r3, r4, r5, lr}
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	4611      	mov	r1, r2
 8005408:	2200      	movs	r2, #0
 800540a:	4d05      	ldr	r5, [pc, #20]	@ (8005420 <_read_r+0x20>)
 800540c:	602a      	str	r2, [r5, #0]
 800540e:	461a      	mov	r2, r3
 8005410:	f7fc fbdc 	bl	8001bcc <_read>
 8005414:	1c43      	adds	r3, r0, #1
 8005416:	d102      	bne.n	800541e <_read_r+0x1e>
 8005418:	682b      	ldr	r3, [r5, #0]
 800541a:	b103      	cbz	r3, 800541e <_read_r+0x1e>
 800541c:	6023      	str	r3, [r4, #0]
 800541e:	bd38      	pop	{r3, r4, r5, pc}
 8005420:	20000404 	.word	0x20000404

08005424 <_write_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4604      	mov	r4, r0
 8005428:	4608      	mov	r0, r1
 800542a:	4611      	mov	r1, r2
 800542c:	2200      	movs	r2, #0
 800542e:	4d05      	ldr	r5, [pc, #20]	@ (8005444 <_write_r+0x20>)
 8005430:	602a      	str	r2, [r5, #0]
 8005432:	461a      	mov	r2, r3
 8005434:	f7fc fbe7 	bl	8001c06 <_write>
 8005438:	1c43      	adds	r3, r0, #1
 800543a:	d102      	bne.n	8005442 <_write_r+0x1e>
 800543c:	682b      	ldr	r3, [r5, #0]
 800543e:	b103      	cbz	r3, 8005442 <_write_r+0x1e>
 8005440:	6023      	str	r3, [r4, #0]
 8005442:	bd38      	pop	{r3, r4, r5, pc}
 8005444:	20000404 	.word	0x20000404

08005448 <__errno>:
 8005448:	4b01      	ldr	r3, [pc, #4]	@ (8005450 <__errno+0x8>)
 800544a:	6818      	ldr	r0, [r3, #0]
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	2000001c 	.word	0x2000001c

08005454 <__libc_init_array>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	2600      	movs	r6, #0
 8005458:	4d0c      	ldr	r5, [pc, #48]	@ (800548c <__libc_init_array+0x38>)
 800545a:	4c0d      	ldr	r4, [pc, #52]	@ (8005490 <__libc_init_array+0x3c>)
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	42a6      	cmp	r6, r4
 8005462:	d109      	bne.n	8005478 <__libc_init_array+0x24>
 8005464:	f002 f874 	bl	8007550 <_init>
 8005468:	2600      	movs	r6, #0
 800546a:	4d0a      	ldr	r5, [pc, #40]	@ (8005494 <__libc_init_array+0x40>)
 800546c:	4c0a      	ldr	r4, [pc, #40]	@ (8005498 <__libc_init_array+0x44>)
 800546e:	1b64      	subs	r4, r4, r5
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	42a6      	cmp	r6, r4
 8005474:	d105      	bne.n	8005482 <__libc_init_array+0x2e>
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	f855 3b04 	ldr.w	r3, [r5], #4
 800547c:	4798      	blx	r3
 800547e:	3601      	adds	r6, #1
 8005480:	e7ee      	b.n	8005460 <__libc_init_array+0xc>
 8005482:	f855 3b04 	ldr.w	r3, [r5], #4
 8005486:	4798      	blx	r3
 8005488:	3601      	adds	r6, #1
 800548a:	e7f2      	b.n	8005472 <__libc_init_array+0x1e>
 800548c:	0800797c 	.word	0x0800797c
 8005490:	0800797c 	.word	0x0800797c
 8005494:	0800797c 	.word	0x0800797c
 8005498:	08007980 	.word	0x08007980

0800549c <__retarget_lock_init_recursive>:
 800549c:	4770      	bx	lr

0800549e <__retarget_lock_acquire_recursive>:
 800549e:	4770      	bx	lr

080054a0 <__retarget_lock_release_recursive>:
 80054a0:	4770      	bx	lr

080054a2 <memchr>:
 80054a2:	4603      	mov	r3, r0
 80054a4:	b510      	push	{r4, lr}
 80054a6:	b2c9      	uxtb	r1, r1
 80054a8:	4402      	add	r2, r0
 80054aa:	4293      	cmp	r3, r2
 80054ac:	4618      	mov	r0, r3
 80054ae:	d101      	bne.n	80054b4 <memchr+0x12>
 80054b0:	2000      	movs	r0, #0
 80054b2:	e003      	b.n	80054bc <memchr+0x1a>
 80054b4:	7804      	ldrb	r4, [r0, #0]
 80054b6:	3301      	adds	r3, #1
 80054b8:	428c      	cmp	r4, r1
 80054ba:	d1f6      	bne.n	80054aa <memchr+0x8>
 80054bc:	bd10      	pop	{r4, pc}

080054be <quorem>:
 80054be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054c2:	6903      	ldr	r3, [r0, #16]
 80054c4:	690c      	ldr	r4, [r1, #16]
 80054c6:	4607      	mov	r7, r0
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	db7e      	blt.n	80055ca <quorem+0x10c>
 80054cc:	3c01      	subs	r4, #1
 80054ce:	00a3      	lsls	r3, r4, #2
 80054d0:	f100 0514 	add.w	r5, r0, #20
 80054d4:	f101 0814 	add.w	r8, r1, #20
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054de:	9301      	str	r3, [sp, #4]
 80054e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054e8:	3301      	adds	r3, #1
 80054ea:	429a      	cmp	r2, r3
 80054ec:	fbb2 f6f3 	udiv	r6, r2, r3
 80054f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054f4:	d32e      	bcc.n	8005554 <quorem+0x96>
 80054f6:	f04f 0a00 	mov.w	sl, #0
 80054fa:	46c4      	mov	ip, r8
 80054fc:	46ae      	mov	lr, r5
 80054fe:	46d3      	mov	fp, sl
 8005500:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005504:	b298      	uxth	r0, r3
 8005506:	fb06 a000 	mla	r0, r6, r0, sl
 800550a:	0c1b      	lsrs	r3, r3, #16
 800550c:	0c02      	lsrs	r2, r0, #16
 800550e:	fb06 2303 	mla	r3, r6, r3, r2
 8005512:	f8de 2000 	ldr.w	r2, [lr]
 8005516:	b280      	uxth	r0, r0
 8005518:	b292      	uxth	r2, r2
 800551a:	1a12      	subs	r2, r2, r0
 800551c:	445a      	add	r2, fp
 800551e:	f8de 0000 	ldr.w	r0, [lr]
 8005522:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005526:	b29b      	uxth	r3, r3
 8005528:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800552c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005530:	b292      	uxth	r2, r2
 8005532:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005536:	45e1      	cmp	r9, ip
 8005538:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800553c:	f84e 2b04 	str.w	r2, [lr], #4
 8005540:	d2de      	bcs.n	8005500 <quorem+0x42>
 8005542:	9b00      	ldr	r3, [sp, #0]
 8005544:	58eb      	ldr	r3, [r5, r3]
 8005546:	b92b      	cbnz	r3, 8005554 <quorem+0x96>
 8005548:	9b01      	ldr	r3, [sp, #4]
 800554a:	3b04      	subs	r3, #4
 800554c:	429d      	cmp	r5, r3
 800554e:	461a      	mov	r2, r3
 8005550:	d32f      	bcc.n	80055b2 <quorem+0xf4>
 8005552:	613c      	str	r4, [r7, #16]
 8005554:	4638      	mov	r0, r7
 8005556:	f001 f97f 	bl	8006858 <__mcmp>
 800555a:	2800      	cmp	r0, #0
 800555c:	db25      	blt.n	80055aa <quorem+0xec>
 800555e:	4629      	mov	r1, r5
 8005560:	2000      	movs	r0, #0
 8005562:	f858 2b04 	ldr.w	r2, [r8], #4
 8005566:	f8d1 c000 	ldr.w	ip, [r1]
 800556a:	fa1f fe82 	uxth.w	lr, r2
 800556e:	fa1f f38c 	uxth.w	r3, ip
 8005572:	eba3 030e 	sub.w	r3, r3, lr
 8005576:	4403      	add	r3, r0
 8005578:	0c12      	lsrs	r2, r2, #16
 800557a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800557e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005582:	b29b      	uxth	r3, r3
 8005584:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005588:	45c1      	cmp	r9, r8
 800558a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800558e:	f841 3b04 	str.w	r3, [r1], #4
 8005592:	d2e6      	bcs.n	8005562 <quorem+0xa4>
 8005594:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005598:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800559c:	b922      	cbnz	r2, 80055a8 <quorem+0xea>
 800559e:	3b04      	subs	r3, #4
 80055a0:	429d      	cmp	r5, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	d30b      	bcc.n	80055be <quorem+0x100>
 80055a6:	613c      	str	r4, [r7, #16]
 80055a8:	3601      	adds	r6, #1
 80055aa:	4630      	mov	r0, r6
 80055ac:	b003      	add	sp, #12
 80055ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	3b04      	subs	r3, #4
 80055b6:	2a00      	cmp	r2, #0
 80055b8:	d1cb      	bne.n	8005552 <quorem+0x94>
 80055ba:	3c01      	subs	r4, #1
 80055bc:	e7c6      	b.n	800554c <quorem+0x8e>
 80055be:	6812      	ldr	r2, [r2, #0]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	2a00      	cmp	r2, #0
 80055c4:	d1ef      	bne.n	80055a6 <quorem+0xe8>
 80055c6:	3c01      	subs	r4, #1
 80055c8:	e7ea      	b.n	80055a0 <quorem+0xe2>
 80055ca:	2000      	movs	r0, #0
 80055cc:	e7ee      	b.n	80055ac <quorem+0xee>
	...

080055d0 <_dtoa_r>:
 80055d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d4:	4614      	mov	r4, r2
 80055d6:	461d      	mov	r5, r3
 80055d8:	69c7      	ldr	r7, [r0, #28]
 80055da:	b097      	sub	sp, #92	@ 0x5c
 80055dc:	4681      	mov	r9, r0
 80055de:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80055e2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80055e4:	b97f      	cbnz	r7, 8005606 <_dtoa_r+0x36>
 80055e6:	2010      	movs	r0, #16
 80055e8:	f000 fe0e 	bl	8006208 <malloc>
 80055ec:	4602      	mov	r2, r0
 80055ee:	f8c9 001c 	str.w	r0, [r9, #28]
 80055f2:	b920      	cbnz	r0, 80055fe <_dtoa_r+0x2e>
 80055f4:	21ef      	movs	r1, #239	@ 0xef
 80055f6:	4bac      	ldr	r3, [pc, #688]	@ (80058a8 <_dtoa_r+0x2d8>)
 80055f8:	48ac      	ldr	r0, [pc, #688]	@ (80058ac <_dtoa_r+0x2dc>)
 80055fa:	f001 fc6d 	bl	8006ed8 <__assert_func>
 80055fe:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005602:	6007      	str	r7, [r0, #0]
 8005604:	60c7      	str	r7, [r0, #12]
 8005606:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	b159      	cbz	r1, 8005626 <_dtoa_r+0x56>
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	2301      	movs	r3, #1
 8005612:	4093      	lsls	r3, r2
 8005614:	604a      	str	r2, [r1, #4]
 8005616:	608b      	str	r3, [r1, #8]
 8005618:	4648      	mov	r0, r9
 800561a:	f000 feeb 	bl	80063f4 <_Bfree>
 800561e:	2200      	movs	r2, #0
 8005620:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005624:	601a      	str	r2, [r3, #0]
 8005626:	1e2b      	subs	r3, r5, #0
 8005628:	bfaf      	iteee	ge
 800562a:	2300      	movge	r3, #0
 800562c:	2201      	movlt	r2, #1
 800562e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005632:	9307      	strlt	r3, [sp, #28]
 8005634:	bfa8      	it	ge
 8005636:	6033      	strge	r3, [r6, #0]
 8005638:	f8dd 801c 	ldr.w	r8, [sp, #28]
 800563c:	4b9c      	ldr	r3, [pc, #624]	@ (80058b0 <_dtoa_r+0x2e0>)
 800563e:	bfb8      	it	lt
 8005640:	6032      	strlt	r2, [r6, #0]
 8005642:	ea33 0308 	bics.w	r3, r3, r8
 8005646:	d112      	bne.n	800566e <_dtoa_r+0x9e>
 8005648:	f242 730f 	movw	r3, #9999	@ 0x270f
 800564c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005654:	4323      	orrs	r3, r4
 8005656:	f000 855e 	beq.w	8006116 <_dtoa_r+0xb46>
 800565a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800565c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80058b4 <_dtoa_r+0x2e4>
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8560 	beq.w	8006126 <_dtoa_r+0xb56>
 8005666:	f10a 0303 	add.w	r3, sl, #3
 800566a:	f000 bd5a 	b.w	8006122 <_dtoa_r+0xb52>
 800566e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005672:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005676:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800567a:	2200      	movs	r2, #0
 800567c:	2300      	movs	r3, #0
 800567e:	f7fb f993 	bl	80009a8 <__aeabi_dcmpeq>
 8005682:	4607      	mov	r7, r0
 8005684:	b158      	cbz	r0, 800569e <_dtoa_r+0xce>
 8005686:	2301      	movs	r3, #1
 8005688:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800568e:	b113      	cbz	r3, 8005696 <_dtoa_r+0xc6>
 8005690:	4b89      	ldr	r3, [pc, #548]	@ (80058b8 <_dtoa_r+0x2e8>)
 8005692:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	f8df a224 	ldr.w	sl, [pc, #548]	@ 80058bc <_dtoa_r+0x2ec>
 800569a:	f000 bd44 	b.w	8006126 <_dtoa_r+0xb56>
 800569e:	ab14      	add	r3, sp, #80	@ 0x50
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	ab15      	add	r3, sp, #84	@ 0x54
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4648      	mov	r0, r9
 80056a8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80056ac:	f001 f984 	bl	80069b8 <__d2b>
 80056b0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80056b4:	9003      	str	r0, [sp, #12]
 80056b6:	2e00      	cmp	r6, #0
 80056b8:	d078      	beq.n	80057ac <_dtoa_r+0x1dc>
 80056ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056c0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80056c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056c8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80056cc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80056d0:	9712      	str	r7, [sp, #72]	@ 0x48
 80056d2:	4619      	mov	r1, r3
 80056d4:	2200      	movs	r2, #0
 80056d6:	4b7a      	ldr	r3, [pc, #488]	@ (80058c0 <_dtoa_r+0x2f0>)
 80056d8:	f7fa fd46 	bl	8000168 <__aeabi_dsub>
 80056dc:	a36c      	add	r3, pc, #432	@ (adr r3, 8005890 <_dtoa_r+0x2c0>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f7fa fef9 	bl	80004d8 <__aeabi_dmul>
 80056e6:	a36c      	add	r3, pc, #432	@ (adr r3, 8005898 <_dtoa_r+0x2c8>)
 80056e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ec:	f7fa fd3e 	bl	800016c <__adddf3>
 80056f0:	4604      	mov	r4, r0
 80056f2:	4630      	mov	r0, r6
 80056f4:	460d      	mov	r5, r1
 80056f6:	f7fa fe85 	bl	8000404 <__aeabi_i2d>
 80056fa:	a369      	add	r3, pc, #420	@ (adr r3, 80058a0 <_dtoa_r+0x2d0>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f7fa feea 	bl	80004d8 <__aeabi_dmul>
 8005704:	4602      	mov	r2, r0
 8005706:	460b      	mov	r3, r1
 8005708:	4620      	mov	r0, r4
 800570a:	4629      	mov	r1, r5
 800570c:	f7fa fd2e 	bl	800016c <__adddf3>
 8005710:	4604      	mov	r4, r0
 8005712:	460d      	mov	r5, r1
 8005714:	f7fb f990 	bl	8000a38 <__aeabi_d2iz>
 8005718:	2200      	movs	r2, #0
 800571a:	4607      	mov	r7, r0
 800571c:	2300      	movs	r3, #0
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fb f94b 	bl	80009bc <__aeabi_dcmplt>
 8005726:	b140      	cbz	r0, 800573a <_dtoa_r+0x16a>
 8005728:	4638      	mov	r0, r7
 800572a:	f7fa fe6b 	bl	8000404 <__aeabi_i2d>
 800572e:	4622      	mov	r2, r4
 8005730:	462b      	mov	r3, r5
 8005732:	f7fb f939 	bl	80009a8 <__aeabi_dcmpeq>
 8005736:	b900      	cbnz	r0, 800573a <_dtoa_r+0x16a>
 8005738:	3f01      	subs	r7, #1
 800573a:	2f16      	cmp	r7, #22
 800573c:	d854      	bhi.n	80057e8 <_dtoa_r+0x218>
 800573e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005742:	4b60      	ldr	r3, [pc, #384]	@ (80058c4 <_dtoa_r+0x2f4>)
 8005744:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574c:	f7fb f936 	bl	80009bc <__aeabi_dcmplt>
 8005750:	2800      	cmp	r0, #0
 8005752:	d04b      	beq.n	80057ec <_dtoa_r+0x21c>
 8005754:	2300      	movs	r3, #0
 8005756:	3f01      	subs	r7, #1
 8005758:	930f      	str	r3, [sp, #60]	@ 0x3c
 800575a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800575c:	1b9b      	subs	r3, r3, r6
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	bf49      	itett	mi
 8005762:	f1c3 0301 	rsbmi	r3, r3, #1
 8005766:	2300      	movpl	r3, #0
 8005768:	9304      	strmi	r3, [sp, #16]
 800576a:	2300      	movmi	r3, #0
 800576c:	9209      	str	r2, [sp, #36]	@ 0x24
 800576e:	bf54      	ite	pl
 8005770:	9304      	strpl	r3, [sp, #16]
 8005772:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8005774:	2f00      	cmp	r7, #0
 8005776:	db3b      	blt.n	80057f0 <_dtoa_r+0x220>
 8005778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577a:	970e      	str	r7, [sp, #56]	@ 0x38
 800577c:	443b      	add	r3, r7
 800577e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005780:	2300      	movs	r3, #0
 8005782:	930a      	str	r3, [sp, #40]	@ 0x28
 8005784:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005786:	2b09      	cmp	r3, #9
 8005788:	d865      	bhi.n	8005856 <_dtoa_r+0x286>
 800578a:	2b05      	cmp	r3, #5
 800578c:	bfc4      	itt	gt
 800578e:	3b04      	subgt	r3, #4
 8005790:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005792:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005794:	bfc8      	it	gt
 8005796:	2400      	movgt	r4, #0
 8005798:	f1a3 0302 	sub.w	r3, r3, #2
 800579c:	bfd8      	it	le
 800579e:	2401      	movle	r4, #1
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d864      	bhi.n	800586e <_dtoa_r+0x29e>
 80057a4:	e8df f003 	tbb	[pc, r3]
 80057a8:	2c385553 	.word	0x2c385553
 80057ac:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057b0:	441e      	add	r6, r3
 80057b2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057b6:	2b20      	cmp	r3, #32
 80057b8:	bfc1      	itttt	gt
 80057ba:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057be:	fa08 f803 	lslgt.w	r8, r8, r3
 80057c2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057c6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057ca:	bfd6      	itet	le
 80057cc:	f1c3 0320 	rsble	r3, r3, #32
 80057d0:	ea48 0003 	orrgt.w	r0, r8, r3
 80057d4:	fa04 f003 	lslle.w	r0, r4, r3
 80057d8:	f7fa fe04 	bl	80003e4 <__aeabi_ui2d>
 80057dc:	2201      	movs	r2, #1
 80057de:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80057e2:	3e01      	subs	r6, #1
 80057e4:	9212      	str	r2, [sp, #72]	@ 0x48
 80057e6:	e774      	b.n	80056d2 <_dtoa_r+0x102>
 80057e8:	2301      	movs	r3, #1
 80057ea:	e7b5      	b.n	8005758 <_dtoa_r+0x188>
 80057ec:	900f      	str	r0, [sp, #60]	@ 0x3c
 80057ee:	e7b4      	b.n	800575a <_dtoa_r+0x18a>
 80057f0:	9b04      	ldr	r3, [sp, #16]
 80057f2:	1bdb      	subs	r3, r3, r7
 80057f4:	9304      	str	r3, [sp, #16]
 80057f6:	427b      	negs	r3, r7
 80057f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057fa:	2300      	movs	r3, #0
 80057fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80057fe:	e7c1      	b.n	8005784 <_dtoa_r+0x1b4>
 8005800:	2301      	movs	r3, #1
 8005802:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005806:	eb07 0b03 	add.w	fp, r7, r3
 800580a:	f10b 0301 	add.w	r3, fp, #1
 800580e:	2b01      	cmp	r3, #1
 8005810:	9308      	str	r3, [sp, #32]
 8005812:	bfb8      	it	lt
 8005814:	2301      	movlt	r3, #1
 8005816:	e006      	b.n	8005826 <_dtoa_r+0x256>
 8005818:	2301      	movs	r3, #1
 800581a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800581c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800581e:	2b00      	cmp	r3, #0
 8005820:	dd28      	ble.n	8005874 <_dtoa_r+0x2a4>
 8005822:	469b      	mov	fp, r3
 8005824:	9308      	str	r3, [sp, #32]
 8005826:	2100      	movs	r1, #0
 8005828:	2204      	movs	r2, #4
 800582a:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800582e:	f102 0514 	add.w	r5, r2, #20
 8005832:	429d      	cmp	r5, r3
 8005834:	d926      	bls.n	8005884 <_dtoa_r+0x2b4>
 8005836:	6041      	str	r1, [r0, #4]
 8005838:	4648      	mov	r0, r9
 800583a:	f000 fd9b 	bl	8006374 <_Balloc>
 800583e:	4682      	mov	sl, r0
 8005840:	2800      	cmp	r0, #0
 8005842:	d143      	bne.n	80058cc <_dtoa_r+0x2fc>
 8005844:	4602      	mov	r2, r0
 8005846:	f240 11af 	movw	r1, #431	@ 0x1af
 800584a:	4b1f      	ldr	r3, [pc, #124]	@ (80058c8 <_dtoa_r+0x2f8>)
 800584c:	e6d4      	b.n	80055f8 <_dtoa_r+0x28>
 800584e:	2300      	movs	r3, #0
 8005850:	e7e3      	b.n	800581a <_dtoa_r+0x24a>
 8005852:	2300      	movs	r3, #0
 8005854:	e7d5      	b.n	8005802 <_dtoa_r+0x232>
 8005856:	2401      	movs	r4, #1
 8005858:	2300      	movs	r3, #0
 800585a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800585c:	9320      	str	r3, [sp, #128]	@ 0x80
 800585e:	f04f 3bff 	mov.w	fp, #4294967295
 8005862:	2200      	movs	r2, #0
 8005864:	2312      	movs	r3, #18
 8005866:	f8cd b020 	str.w	fp, [sp, #32]
 800586a:	9221      	str	r2, [sp, #132]	@ 0x84
 800586c:	e7db      	b.n	8005826 <_dtoa_r+0x256>
 800586e:	2301      	movs	r3, #1
 8005870:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005872:	e7f4      	b.n	800585e <_dtoa_r+0x28e>
 8005874:	f04f 0b01 	mov.w	fp, #1
 8005878:	465b      	mov	r3, fp
 800587a:	f8cd b020 	str.w	fp, [sp, #32]
 800587e:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005882:	e7d0      	b.n	8005826 <_dtoa_r+0x256>
 8005884:	3101      	adds	r1, #1
 8005886:	0052      	lsls	r2, r2, #1
 8005888:	e7d1      	b.n	800582e <_dtoa_r+0x25e>
 800588a:	bf00      	nop
 800588c:	f3af 8000 	nop.w
 8005890:	636f4361 	.word	0x636f4361
 8005894:	3fd287a7 	.word	0x3fd287a7
 8005898:	8b60c8b3 	.word	0x8b60c8b3
 800589c:	3fc68a28 	.word	0x3fc68a28
 80058a0:	509f79fb 	.word	0x509f79fb
 80058a4:	3fd34413 	.word	0x3fd34413
 80058a8:	08007643 	.word	0x08007643
 80058ac:	0800765a 	.word	0x0800765a
 80058b0:	7ff00000 	.word	0x7ff00000
 80058b4:	0800763f 	.word	0x0800763f
 80058b8:	08007613 	.word	0x08007613
 80058bc:	08007612 	.word	0x08007612
 80058c0:	3ff80000 	.word	0x3ff80000
 80058c4:	080077a8 	.word	0x080077a8
 80058c8:	080076b2 	.word	0x080076b2
 80058cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058d0:	6018      	str	r0, [r3, #0]
 80058d2:	9b08      	ldr	r3, [sp, #32]
 80058d4:	2b0e      	cmp	r3, #14
 80058d6:	f200 80a1 	bhi.w	8005a1c <_dtoa_r+0x44c>
 80058da:	2c00      	cmp	r4, #0
 80058dc:	f000 809e 	beq.w	8005a1c <_dtoa_r+0x44c>
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	dd33      	ble.n	800594c <_dtoa_r+0x37c>
 80058e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b58 <_dtoa_r+0x588>)
 80058e6:	f007 020f 	and.w	r2, r7, #15
 80058ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ee:	05f8      	lsls	r0, r7, #23
 80058f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80058f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80058fc:	d516      	bpl.n	800592c <_dtoa_r+0x35c>
 80058fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005902:	4b96      	ldr	r3, [pc, #600]	@ (8005b5c <_dtoa_r+0x58c>)
 8005904:	2603      	movs	r6, #3
 8005906:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800590a:	f7fa ff0f 	bl	800072c <__aeabi_ddiv>
 800590e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005912:	f004 040f 	and.w	r4, r4, #15
 8005916:	4d91      	ldr	r5, [pc, #580]	@ (8005b5c <_dtoa_r+0x58c>)
 8005918:	b954      	cbnz	r4, 8005930 <_dtoa_r+0x360>
 800591a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800591e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005922:	f7fa ff03 	bl	800072c <__aeabi_ddiv>
 8005926:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800592a:	e028      	b.n	800597e <_dtoa_r+0x3ae>
 800592c:	2602      	movs	r6, #2
 800592e:	e7f2      	b.n	8005916 <_dtoa_r+0x346>
 8005930:	07e1      	lsls	r1, r4, #31
 8005932:	d508      	bpl.n	8005946 <_dtoa_r+0x376>
 8005934:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005938:	e9d5 2300 	ldrd	r2, r3, [r5]
 800593c:	f7fa fdcc 	bl	80004d8 <__aeabi_dmul>
 8005940:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005944:	3601      	adds	r6, #1
 8005946:	1064      	asrs	r4, r4, #1
 8005948:	3508      	adds	r5, #8
 800594a:	e7e5      	b.n	8005918 <_dtoa_r+0x348>
 800594c:	f000 80af 	beq.w	8005aae <_dtoa_r+0x4de>
 8005950:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005954:	427c      	negs	r4, r7
 8005956:	4b80      	ldr	r3, [pc, #512]	@ (8005b58 <_dtoa_r+0x588>)
 8005958:	f004 020f 	and.w	r2, r4, #15
 800595c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005964:	f7fa fdb8 	bl	80004d8 <__aeabi_dmul>
 8005968:	2602      	movs	r6, #2
 800596a:	2300      	movs	r3, #0
 800596c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005970:	4d7a      	ldr	r5, [pc, #488]	@ (8005b5c <_dtoa_r+0x58c>)
 8005972:	1124      	asrs	r4, r4, #4
 8005974:	2c00      	cmp	r4, #0
 8005976:	f040 808f 	bne.w	8005a98 <_dtoa_r+0x4c8>
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1d3      	bne.n	8005926 <_dtoa_r+0x356>
 800597e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8094 	beq.w	8005ab2 <_dtoa_r+0x4e2>
 800598a:	2200      	movs	r2, #0
 800598c:	4620      	mov	r0, r4
 800598e:	4629      	mov	r1, r5
 8005990:	4b73      	ldr	r3, [pc, #460]	@ (8005b60 <_dtoa_r+0x590>)
 8005992:	f7fb f813 	bl	80009bc <__aeabi_dcmplt>
 8005996:	2800      	cmp	r0, #0
 8005998:	f000 808b 	beq.w	8005ab2 <_dtoa_r+0x4e2>
 800599c:	9b08      	ldr	r3, [sp, #32]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 8087 	beq.w	8005ab2 <_dtoa_r+0x4e2>
 80059a4:	f1bb 0f00 	cmp.w	fp, #0
 80059a8:	dd34      	ble.n	8005a14 <_dtoa_r+0x444>
 80059aa:	4620      	mov	r0, r4
 80059ac:	2200      	movs	r2, #0
 80059ae:	4629      	mov	r1, r5
 80059b0:	4b6c      	ldr	r3, [pc, #432]	@ (8005b64 <_dtoa_r+0x594>)
 80059b2:	f7fa fd91 	bl	80004d8 <__aeabi_dmul>
 80059b6:	465c      	mov	r4, fp
 80059b8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059bc:	f107 38ff 	add.w	r8, r7, #4294967295
 80059c0:	3601      	adds	r6, #1
 80059c2:	4630      	mov	r0, r6
 80059c4:	f7fa fd1e 	bl	8000404 <__aeabi_i2d>
 80059c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80059cc:	f7fa fd84 	bl	80004d8 <__aeabi_dmul>
 80059d0:	2200      	movs	r2, #0
 80059d2:	4b65      	ldr	r3, [pc, #404]	@ (8005b68 <_dtoa_r+0x598>)
 80059d4:	f7fa fbca 	bl	800016c <__adddf3>
 80059d8:	4605      	mov	r5, r0
 80059da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80059de:	2c00      	cmp	r4, #0
 80059e0:	d16a      	bne.n	8005ab8 <_dtoa_r+0x4e8>
 80059e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80059e6:	2200      	movs	r2, #0
 80059e8:	4b60      	ldr	r3, [pc, #384]	@ (8005b6c <_dtoa_r+0x59c>)
 80059ea:	f7fa fbbd 	bl	8000168 <__aeabi_dsub>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80059f6:	462a      	mov	r2, r5
 80059f8:	4633      	mov	r3, r6
 80059fa:	f7fa fffd 	bl	80009f8 <__aeabi_dcmpgt>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	f040 8298 	bne.w	8005f34 <_dtoa_r+0x964>
 8005a04:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a08:	462a      	mov	r2, r5
 8005a0a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a0e:	f7fa ffd5 	bl	80009bc <__aeabi_dcmplt>
 8005a12:	bb38      	cbnz	r0, 8005a64 <_dtoa_r+0x494>
 8005a14:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005a18:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005a1c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f2c0 8157 	blt.w	8005cd2 <_dtoa_r+0x702>
 8005a24:	2f0e      	cmp	r7, #14
 8005a26:	f300 8154 	bgt.w	8005cd2 <_dtoa_r+0x702>
 8005a2a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b58 <_dtoa_r+0x588>)
 8005a2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005a34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a38:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f280 80e5 	bge.w	8005c0a <_dtoa_r+0x63a>
 8005a40:	9b08      	ldr	r3, [sp, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	f300 80e1 	bgt.w	8005c0a <_dtoa_r+0x63a>
 8005a48:	d10c      	bne.n	8005a64 <_dtoa_r+0x494>
 8005a4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4b46      	ldr	r3, [pc, #280]	@ (8005b6c <_dtoa_r+0x59c>)
 8005a52:	f7fa fd41 	bl	80004d8 <__aeabi_dmul>
 8005a56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005a5a:	f7fa ffc3 	bl	80009e4 <__aeabi_dcmpge>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	f000 8266 	beq.w	8005f30 <_dtoa_r+0x960>
 8005a64:	2400      	movs	r4, #0
 8005a66:	4625      	mov	r5, r4
 8005a68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a6a:	4656      	mov	r6, sl
 8005a6c:	ea6f 0803 	mvn.w	r8, r3
 8005a70:	2700      	movs	r7, #0
 8005a72:	4621      	mov	r1, r4
 8005a74:	4648      	mov	r0, r9
 8005a76:	f000 fcbd 	bl	80063f4 <_Bfree>
 8005a7a:	2d00      	cmp	r5, #0
 8005a7c:	f000 80bd 	beq.w	8005bfa <_dtoa_r+0x62a>
 8005a80:	b12f      	cbz	r7, 8005a8e <_dtoa_r+0x4be>
 8005a82:	42af      	cmp	r7, r5
 8005a84:	d003      	beq.n	8005a8e <_dtoa_r+0x4be>
 8005a86:	4639      	mov	r1, r7
 8005a88:	4648      	mov	r0, r9
 8005a8a:	f000 fcb3 	bl	80063f4 <_Bfree>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4648      	mov	r0, r9
 8005a92:	f000 fcaf 	bl	80063f4 <_Bfree>
 8005a96:	e0b0      	b.n	8005bfa <_dtoa_r+0x62a>
 8005a98:	07e2      	lsls	r2, r4, #31
 8005a9a:	d505      	bpl.n	8005aa8 <_dtoa_r+0x4d8>
 8005a9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005aa0:	f7fa fd1a 	bl	80004d8 <__aeabi_dmul>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	3601      	adds	r6, #1
 8005aa8:	1064      	asrs	r4, r4, #1
 8005aaa:	3508      	adds	r5, #8
 8005aac:	e762      	b.n	8005974 <_dtoa_r+0x3a4>
 8005aae:	2602      	movs	r6, #2
 8005ab0:	e765      	b.n	800597e <_dtoa_r+0x3ae>
 8005ab2:	46b8      	mov	r8, r7
 8005ab4:	9c08      	ldr	r4, [sp, #32]
 8005ab6:	e784      	b.n	80059c2 <_dtoa_r+0x3f2>
 8005ab8:	4b27      	ldr	r3, [pc, #156]	@ (8005b58 <_dtoa_r+0x588>)
 8005aba:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005abc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ac0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ac4:	4454      	add	r4, sl
 8005ac6:	2900      	cmp	r1, #0
 8005ac8:	d054      	beq.n	8005b74 <_dtoa_r+0x5a4>
 8005aca:	2000      	movs	r0, #0
 8005acc:	4928      	ldr	r1, [pc, #160]	@ (8005b70 <_dtoa_r+0x5a0>)
 8005ace:	f7fa fe2d 	bl	800072c <__aeabi_ddiv>
 8005ad2:	4633      	mov	r3, r6
 8005ad4:	462a      	mov	r2, r5
 8005ad6:	f7fa fb47 	bl	8000168 <__aeabi_dsub>
 8005ada:	4656      	mov	r6, sl
 8005adc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ae0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ae4:	f7fa ffa8 	bl	8000a38 <__aeabi_d2iz>
 8005ae8:	4605      	mov	r5, r0
 8005aea:	f7fa fc8b 	bl	8000404 <__aeabi_i2d>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005af6:	f7fa fb37 	bl	8000168 <__aeabi_dsub>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	3530      	adds	r5, #48	@ 0x30
 8005b00:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005b04:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b08:	f806 5b01 	strb.w	r5, [r6], #1
 8005b0c:	f7fa ff56 	bl	80009bc <__aeabi_dcmplt>
 8005b10:	2800      	cmp	r0, #0
 8005b12:	d172      	bne.n	8005bfa <_dtoa_r+0x62a>
 8005b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b18:	2000      	movs	r0, #0
 8005b1a:	4911      	ldr	r1, [pc, #68]	@ (8005b60 <_dtoa_r+0x590>)
 8005b1c:	f7fa fb24 	bl	8000168 <__aeabi_dsub>
 8005b20:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005b24:	f7fa ff4a 	bl	80009bc <__aeabi_dcmplt>
 8005b28:	2800      	cmp	r0, #0
 8005b2a:	f040 80b4 	bne.w	8005c96 <_dtoa_r+0x6c6>
 8005b2e:	42a6      	cmp	r6, r4
 8005b30:	f43f af70 	beq.w	8005a14 <_dtoa_r+0x444>
 8005b34:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005b38:	2200      	movs	r2, #0
 8005b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <_dtoa_r+0x594>)
 8005b3c:	f7fa fccc 	bl	80004d8 <__aeabi_dmul>
 8005b40:	2200      	movs	r2, #0
 8005b42:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <_dtoa_r+0x594>)
 8005b4c:	f7fa fcc4 	bl	80004d8 <__aeabi_dmul>
 8005b50:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b54:	e7c4      	b.n	8005ae0 <_dtoa_r+0x510>
 8005b56:	bf00      	nop
 8005b58:	080077a8 	.word	0x080077a8
 8005b5c:	08007780 	.word	0x08007780
 8005b60:	3ff00000 	.word	0x3ff00000
 8005b64:	40240000 	.word	0x40240000
 8005b68:	401c0000 	.word	0x401c0000
 8005b6c:	40140000 	.word	0x40140000
 8005b70:	3fe00000 	.word	0x3fe00000
 8005b74:	4631      	mov	r1, r6
 8005b76:	4628      	mov	r0, r5
 8005b78:	f7fa fcae 	bl	80004d8 <__aeabi_dmul>
 8005b7c:	4656      	mov	r6, sl
 8005b7e:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005b82:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b84:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b88:	f7fa ff56 	bl	8000a38 <__aeabi_d2iz>
 8005b8c:	4605      	mov	r5, r0
 8005b8e:	f7fa fc39 	bl	8000404 <__aeabi_i2d>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005b9a:	f7fa fae5 	bl	8000168 <__aeabi_dsub>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	3530      	adds	r5, #48	@ 0x30
 8005ba4:	f806 5b01 	strb.w	r5, [r6], #1
 8005ba8:	42a6      	cmp	r6, r4
 8005baa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	d124      	bne.n	8005bfe <_dtoa_r+0x62e>
 8005bb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bb8:	4bae      	ldr	r3, [pc, #696]	@ (8005e74 <_dtoa_r+0x8a4>)
 8005bba:	f7fa fad7 	bl	800016c <__adddf3>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	460b      	mov	r3, r1
 8005bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005bc6:	f7fa ff17 	bl	80009f8 <__aeabi_dcmpgt>
 8005bca:	2800      	cmp	r0, #0
 8005bcc:	d163      	bne.n	8005c96 <_dtoa_r+0x6c6>
 8005bce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	49a7      	ldr	r1, [pc, #668]	@ (8005e74 <_dtoa_r+0x8a4>)
 8005bd6:	f7fa fac7 	bl	8000168 <__aeabi_dsub>
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005be2:	f7fa feeb 	bl	80009bc <__aeabi_dcmplt>
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f43f af14 	beq.w	8005a14 <_dtoa_r+0x444>
 8005bec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005bee:	1e73      	subs	r3, r6, #1
 8005bf0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bf2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005bf6:	2b30      	cmp	r3, #48	@ 0x30
 8005bf8:	d0f8      	beq.n	8005bec <_dtoa_r+0x61c>
 8005bfa:	4647      	mov	r7, r8
 8005bfc:	e03b      	b.n	8005c76 <_dtoa_r+0x6a6>
 8005bfe:	4b9e      	ldr	r3, [pc, #632]	@ (8005e78 <_dtoa_r+0x8a8>)
 8005c00:	f7fa fc6a 	bl	80004d8 <__aeabi_dmul>
 8005c04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c08:	e7bc      	b.n	8005b84 <_dtoa_r+0x5b4>
 8005c0a:	4656      	mov	r6, sl
 8005c0c:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c14:	4620      	mov	r0, r4
 8005c16:	4629      	mov	r1, r5
 8005c18:	f7fa fd88 	bl	800072c <__aeabi_ddiv>
 8005c1c:	f7fa ff0c 	bl	8000a38 <__aeabi_d2iz>
 8005c20:	4680      	mov	r8, r0
 8005c22:	f7fa fbef 	bl	8000404 <__aeabi_i2d>
 8005c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c2a:	f7fa fc55 	bl	80004d8 <__aeabi_dmul>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4620      	mov	r0, r4
 8005c34:	4629      	mov	r1, r5
 8005c36:	f7fa fa97 	bl	8000168 <__aeabi_dsub>
 8005c3a:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c3e:	9d08      	ldr	r5, [sp, #32]
 8005c40:	f806 4b01 	strb.w	r4, [r6], #1
 8005c44:	eba6 040a 	sub.w	r4, r6, sl
 8005c48:	42a5      	cmp	r5, r4
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	460b      	mov	r3, r1
 8005c4e:	d133      	bne.n	8005cb8 <_dtoa_r+0x6e8>
 8005c50:	f7fa fa8c 	bl	800016c <__adddf3>
 8005c54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c58:	4604      	mov	r4, r0
 8005c5a:	460d      	mov	r5, r1
 8005c5c:	f7fa fecc 	bl	80009f8 <__aeabi_dcmpgt>
 8005c60:	b9c0      	cbnz	r0, 8005c94 <_dtoa_r+0x6c4>
 8005c62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fa fe9d 	bl	80009a8 <__aeabi_dcmpeq>
 8005c6e:	b110      	cbz	r0, 8005c76 <_dtoa_r+0x6a6>
 8005c70:	f018 0f01 	tst.w	r8, #1
 8005c74:	d10e      	bne.n	8005c94 <_dtoa_r+0x6c4>
 8005c76:	4648      	mov	r0, r9
 8005c78:	9903      	ldr	r1, [sp, #12]
 8005c7a:	f000 fbbb 	bl	80063f4 <_Bfree>
 8005c7e:	2300      	movs	r3, #0
 8005c80:	7033      	strb	r3, [r6, #0]
 8005c82:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005c84:	3701      	adds	r7, #1
 8005c86:	601f      	str	r7, [r3, #0]
 8005c88:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	f000 824b 	beq.w	8006126 <_dtoa_r+0xb56>
 8005c90:	601e      	str	r6, [r3, #0]
 8005c92:	e248      	b.n	8006126 <_dtoa_r+0xb56>
 8005c94:	46b8      	mov	r8, r7
 8005c96:	4633      	mov	r3, r6
 8005c98:	461e      	mov	r6, r3
 8005c9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c9e:	2a39      	cmp	r2, #57	@ 0x39
 8005ca0:	d106      	bne.n	8005cb0 <_dtoa_r+0x6e0>
 8005ca2:	459a      	cmp	sl, r3
 8005ca4:	d1f8      	bne.n	8005c98 <_dtoa_r+0x6c8>
 8005ca6:	2230      	movs	r2, #48	@ 0x30
 8005ca8:	f108 0801 	add.w	r8, r8, #1
 8005cac:	f88a 2000 	strb.w	r2, [sl]
 8005cb0:	781a      	ldrb	r2, [r3, #0]
 8005cb2:	3201      	adds	r2, #1
 8005cb4:	701a      	strb	r2, [r3, #0]
 8005cb6:	e7a0      	b.n	8005bfa <_dtoa_r+0x62a>
 8005cb8:	2200      	movs	r2, #0
 8005cba:	4b6f      	ldr	r3, [pc, #444]	@ (8005e78 <_dtoa_r+0x8a8>)
 8005cbc:	f7fa fc0c 	bl	80004d8 <__aeabi_dmul>
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4604      	mov	r4, r0
 8005cc6:	460d      	mov	r5, r1
 8005cc8:	f7fa fe6e 	bl	80009a8 <__aeabi_dcmpeq>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d09f      	beq.n	8005c10 <_dtoa_r+0x640>
 8005cd0:	e7d1      	b.n	8005c76 <_dtoa_r+0x6a6>
 8005cd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	f000 80ea 	beq.w	8005eae <_dtoa_r+0x8de>
 8005cda:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005cdc:	2a01      	cmp	r2, #1
 8005cde:	f300 80cd 	bgt.w	8005e7c <_dtoa_r+0x8ac>
 8005ce2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	f000 80c1 	beq.w	8005e6c <_dtoa_r+0x89c>
 8005cea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005cee:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005cf0:	9e04      	ldr	r6, [sp, #16]
 8005cf2:	9a04      	ldr	r2, [sp, #16]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	441a      	add	r2, r3
 8005cf8:	9204      	str	r2, [sp, #16]
 8005cfa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	441a      	add	r2, r3
 8005d00:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d02:	f000 fc2b 	bl	800655c <__i2b>
 8005d06:	4605      	mov	r5, r0
 8005d08:	b166      	cbz	r6, 8005d24 <_dtoa_r+0x754>
 8005d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	dd09      	ble.n	8005d24 <_dtoa_r+0x754>
 8005d10:	42b3      	cmp	r3, r6
 8005d12:	bfa8      	it	ge
 8005d14:	4633      	movge	r3, r6
 8005d16:	9a04      	ldr	r2, [sp, #16]
 8005d18:	1af6      	subs	r6, r6, r3
 8005d1a:	1ad2      	subs	r2, r2, r3
 8005d1c:	9204      	str	r2, [sp, #16]
 8005d1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d26:	b30b      	cbz	r3, 8005d6c <_dtoa_r+0x79c>
 8005d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 80c6 	beq.w	8005ebc <_dtoa_r+0x8ec>
 8005d30:	2c00      	cmp	r4, #0
 8005d32:	f000 80c0 	beq.w	8005eb6 <_dtoa_r+0x8e6>
 8005d36:	4629      	mov	r1, r5
 8005d38:	4622      	mov	r2, r4
 8005d3a:	4648      	mov	r0, r9
 8005d3c:	f000 fcc6 	bl	80066cc <__pow5mult>
 8005d40:	9a03      	ldr	r2, [sp, #12]
 8005d42:	4601      	mov	r1, r0
 8005d44:	4605      	mov	r5, r0
 8005d46:	4648      	mov	r0, r9
 8005d48:	f000 fc1e 	bl	8006588 <__multiply>
 8005d4c:	9903      	ldr	r1, [sp, #12]
 8005d4e:	4680      	mov	r8, r0
 8005d50:	4648      	mov	r0, r9
 8005d52:	f000 fb4f 	bl	80063f4 <_Bfree>
 8005d56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d58:	1b1b      	subs	r3, r3, r4
 8005d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d5c:	f000 80b1 	beq.w	8005ec2 <_dtoa_r+0x8f2>
 8005d60:	4641      	mov	r1, r8
 8005d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d64:	4648      	mov	r0, r9
 8005d66:	f000 fcb1 	bl	80066cc <__pow5mult>
 8005d6a:	9003      	str	r0, [sp, #12]
 8005d6c:	2101      	movs	r1, #1
 8005d6e:	4648      	mov	r0, r9
 8005d70:	f000 fbf4 	bl	800655c <__i2b>
 8005d74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d76:	4604      	mov	r4, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 81d8 	beq.w	800612e <_dtoa_r+0xb5e>
 8005d7e:	461a      	mov	r2, r3
 8005d80:	4601      	mov	r1, r0
 8005d82:	4648      	mov	r0, r9
 8005d84:	f000 fca2 	bl	80066cc <__pow5mult>
 8005d88:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d8a:	4604      	mov	r4, r0
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	f300 809f 	bgt.w	8005ed0 <_dtoa_r+0x900>
 8005d92:	9b06      	ldr	r3, [sp, #24]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f040 8097 	bne.w	8005ec8 <_dtoa_r+0x8f8>
 8005d9a:	9b07      	ldr	r3, [sp, #28]
 8005d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	f040 8093 	bne.w	8005ecc <_dtoa_r+0x8fc>
 8005da6:	9b07      	ldr	r3, [sp, #28]
 8005da8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dac:	0d1b      	lsrs	r3, r3, #20
 8005dae:	051b      	lsls	r3, r3, #20
 8005db0:	b133      	cbz	r3, 8005dc0 <_dtoa_r+0x7f0>
 8005db2:	9b04      	ldr	r3, [sp, #16]
 8005db4:	3301      	adds	r3, #1
 8005db6:	9304      	str	r3, [sp, #16]
 8005db8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dba:	3301      	adds	r3, #1
 8005dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005dc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	f000 81b8 	beq.w	800613a <_dtoa_r+0xb6a>
 8005dca:	6923      	ldr	r3, [r4, #16]
 8005dcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005dd0:	6918      	ldr	r0, [r3, #16]
 8005dd2:	f000 fb77 	bl	80064c4 <__hi0bits>
 8005dd6:	f1c0 0020 	rsb	r0, r0, #32
 8005dda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ddc:	4418      	add	r0, r3
 8005dde:	f010 001f 	ands.w	r0, r0, #31
 8005de2:	f000 8082 	beq.w	8005eea <_dtoa_r+0x91a>
 8005de6:	f1c0 0320 	rsb	r3, r0, #32
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	dd73      	ble.n	8005ed6 <_dtoa_r+0x906>
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	f1c0 001c 	rsb	r0, r0, #28
 8005df4:	4403      	add	r3, r0
 8005df6:	9304      	str	r3, [sp, #16]
 8005df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dfa:	4406      	add	r6, r0
 8005dfc:	4403      	add	r3, r0
 8005dfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e00:	9b04      	ldr	r3, [sp, #16]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	dd05      	ble.n	8005e12 <_dtoa_r+0x842>
 8005e06:	461a      	mov	r2, r3
 8005e08:	4648      	mov	r0, r9
 8005e0a:	9903      	ldr	r1, [sp, #12]
 8005e0c:	f000 fcb8 	bl	8006780 <__lshift>
 8005e10:	9003      	str	r0, [sp, #12]
 8005e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dd05      	ble.n	8005e24 <_dtoa_r+0x854>
 8005e18:	4621      	mov	r1, r4
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4648      	mov	r0, r9
 8005e1e:	f000 fcaf 	bl	8006780 <__lshift>
 8005e22:	4604      	mov	r4, r0
 8005e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d061      	beq.n	8005eee <_dtoa_r+0x91e>
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	9803      	ldr	r0, [sp, #12]
 8005e2e:	f000 fd13 	bl	8006858 <__mcmp>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	da5b      	bge.n	8005eee <_dtoa_r+0x91e>
 8005e36:	2300      	movs	r3, #0
 8005e38:	220a      	movs	r2, #10
 8005e3a:	4648      	mov	r0, r9
 8005e3c:	9903      	ldr	r1, [sp, #12]
 8005e3e:	f000 fafb 	bl	8006438 <__multadd>
 8005e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005e44:	f107 38ff 	add.w	r8, r7, #4294967295
 8005e48:	9003      	str	r0, [sp, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f000 8177 	beq.w	800613e <_dtoa_r+0xb6e>
 8005e50:	4629      	mov	r1, r5
 8005e52:	2300      	movs	r3, #0
 8005e54:	220a      	movs	r2, #10
 8005e56:	4648      	mov	r0, r9
 8005e58:	f000 faee 	bl	8006438 <__multadd>
 8005e5c:	f1bb 0f00 	cmp.w	fp, #0
 8005e60:	4605      	mov	r5, r0
 8005e62:	dc6f      	bgt.n	8005f44 <_dtoa_r+0x974>
 8005e64:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	dc49      	bgt.n	8005efe <_dtoa_r+0x92e>
 8005e6a:	e06b      	b.n	8005f44 <_dtoa_r+0x974>
 8005e6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e6e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e72:	e73c      	b.n	8005cee <_dtoa_r+0x71e>
 8005e74:	3fe00000 	.word	0x3fe00000
 8005e78:	40240000 	.word	0x40240000
 8005e7c:	9b08      	ldr	r3, [sp, #32]
 8005e7e:	1e5c      	subs	r4, r3, #1
 8005e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e82:	42a3      	cmp	r3, r4
 8005e84:	db09      	blt.n	8005e9a <_dtoa_r+0x8ca>
 8005e86:	1b1c      	subs	r4, r3, r4
 8005e88:	9b08      	ldr	r3, [sp, #32]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f6bf af30 	bge.w	8005cf0 <_dtoa_r+0x720>
 8005e90:	9b04      	ldr	r3, [sp, #16]
 8005e92:	9a08      	ldr	r2, [sp, #32]
 8005e94:	1a9e      	subs	r6, r3, r2
 8005e96:	2300      	movs	r3, #0
 8005e98:	e72b      	b.n	8005cf2 <_dtoa_r+0x722>
 8005e9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e9e:	1ae3      	subs	r3, r4, r3
 8005ea0:	441a      	add	r2, r3
 8005ea2:	940a      	str	r4, [sp, #40]	@ 0x28
 8005ea4:	9e04      	ldr	r6, [sp, #16]
 8005ea6:	2400      	movs	r4, #0
 8005ea8:	9b08      	ldr	r3, [sp, #32]
 8005eaa:	920e      	str	r2, [sp, #56]	@ 0x38
 8005eac:	e721      	b.n	8005cf2 <_dtoa_r+0x722>
 8005eae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005eb0:	9e04      	ldr	r6, [sp, #16]
 8005eb2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005eb4:	e728      	b.n	8005d08 <_dtoa_r+0x738>
 8005eb6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005eba:	e751      	b.n	8005d60 <_dtoa_r+0x790>
 8005ebc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005ebe:	9903      	ldr	r1, [sp, #12]
 8005ec0:	e750      	b.n	8005d64 <_dtoa_r+0x794>
 8005ec2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ec6:	e751      	b.n	8005d6c <_dtoa_r+0x79c>
 8005ec8:	2300      	movs	r3, #0
 8005eca:	e779      	b.n	8005dc0 <_dtoa_r+0x7f0>
 8005ecc:	9b06      	ldr	r3, [sp, #24]
 8005ece:	e777      	b.n	8005dc0 <_dtoa_r+0x7f0>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ed4:	e779      	b.n	8005dca <_dtoa_r+0x7fa>
 8005ed6:	d093      	beq.n	8005e00 <_dtoa_r+0x830>
 8005ed8:	9a04      	ldr	r2, [sp, #16]
 8005eda:	331c      	adds	r3, #28
 8005edc:	441a      	add	r2, r3
 8005ede:	9204      	str	r2, [sp, #16]
 8005ee0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ee2:	441e      	add	r6, r3
 8005ee4:	441a      	add	r2, r3
 8005ee6:	9209      	str	r2, [sp, #36]	@ 0x24
 8005ee8:	e78a      	b.n	8005e00 <_dtoa_r+0x830>
 8005eea:	4603      	mov	r3, r0
 8005eec:	e7f4      	b.n	8005ed8 <_dtoa_r+0x908>
 8005eee:	9b08      	ldr	r3, [sp, #32]
 8005ef0:	46b8      	mov	r8, r7
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	dc20      	bgt.n	8005f38 <_dtoa_r+0x968>
 8005ef6:	469b      	mov	fp, r3
 8005ef8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	dd1e      	ble.n	8005f3c <_dtoa_r+0x96c>
 8005efe:	f1bb 0f00 	cmp.w	fp, #0
 8005f02:	f47f adb1 	bne.w	8005a68 <_dtoa_r+0x498>
 8005f06:	4621      	mov	r1, r4
 8005f08:	465b      	mov	r3, fp
 8005f0a:	2205      	movs	r2, #5
 8005f0c:	4648      	mov	r0, r9
 8005f0e:	f000 fa93 	bl	8006438 <__multadd>
 8005f12:	4601      	mov	r1, r0
 8005f14:	4604      	mov	r4, r0
 8005f16:	9803      	ldr	r0, [sp, #12]
 8005f18:	f000 fc9e 	bl	8006858 <__mcmp>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	f77f ada3 	ble.w	8005a68 <_dtoa_r+0x498>
 8005f22:	4656      	mov	r6, sl
 8005f24:	2331      	movs	r3, #49	@ 0x31
 8005f26:	f108 0801 	add.w	r8, r8, #1
 8005f2a:	f806 3b01 	strb.w	r3, [r6], #1
 8005f2e:	e59f      	b.n	8005a70 <_dtoa_r+0x4a0>
 8005f30:	46b8      	mov	r8, r7
 8005f32:	9c08      	ldr	r4, [sp, #32]
 8005f34:	4625      	mov	r5, r4
 8005f36:	e7f4      	b.n	8005f22 <_dtoa_r+0x952>
 8005f38:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005f3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 8101 	beq.w	8006146 <_dtoa_r+0xb76>
 8005f44:	2e00      	cmp	r6, #0
 8005f46:	dd05      	ble.n	8005f54 <_dtoa_r+0x984>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4632      	mov	r2, r6
 8005f4c:	4648      	mov	r0, r9
 8005f4e:	f000 fc17 	bl	8006780 <__lshift>
 8005f52:	4605      	mov	r5, r0
 8005f54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d05c      	beq.n	8006014 <_dtoa_r+0xa44>
 8005f5a:	4648      	mov	r0, r9
 8005f5c:	6869      	ldr	r1, [r5, #4]
 8005f5e:	f000 fa09 	bl	8006374 <_Balloc>
 8005f62:	4606      	mov	r6, r0
 8005f64:	b928      	cbnz	r0, 8005f72 <_dtoa_r+0x9a2>
 8005f66:	4602      	mov	r2, r0
 8005f68:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f6c:	4b80      	ldr	r3, [pc, #512]	@ (8006170 <_dtoa_r+0xba0>)
 8005f6e:	f7ff bb43 	b.w	80055f8 <_dtoa_r+0x28>
 8005f72:	692a      	ldr	r2, [r5, #16]
 8005f74:	f105 010c 	add.w	r1, r5, #12
 8005f78:	3202      	adds	r2, #2
 8005f7a:	0092      	lsls	r2, r2, #2
 8005f7c:	300c      	adds	r0, #12
 8005f7e:	f000 ff9d 	bl	8006ebc <memcpy>
 8005f82:	2201      	movs	r2, #1
 8005f84:	4631      	mov	r1, r6
 8005f86:	4648      	mov	r0, r9
 8005f88:	f000 fbfa 	bl	8006780 <__lshift>
 8005f8c:	462f      	mov	r7, r5
 8005f8e:	4605      	mov	r5, r0
 8005f90:	f10a 0301 	add.w	r3, sl, #1
 8005f94:	9304      	str	r3, [sp, #16]
 8005f96:	eb0a 030b 	add.w	r3, sl, fp
 8005f9a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f9c:	9b06      	ldr	r3, [sp, #24]
 8005f9e:	f003 0301 	and.w	r3, r3, #1
 8005fa2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fa4:	9b04      	ldr	r3, [sp, #16]
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	9803      	ldr	r0, [sp, #12]
 8005faa:	f103 3bff 	add.w	fp, r3, #4294967295
 8005fae:	f7ff fa86 	bl	80054be <quorem>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	3330      	adds	r3, #48	@ 0x30
 8005fb8:	9006      	str	r0, [sp, #24]
 8005fba:	9803      	ldr	r0, [sp, #12]
 8005fbc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fbe:	f000 fc4b 	bl	8006858 <__mcmp>
 8005fc2:	462a      	mov	r2, r5
 8005fc4:	9008      	str	r0, [sp, #32]
 8005fc6:	4621      	mov	r1, r4
 8005fc8:	4648      	mov	r0, r9
 8005fca:	f000 fc61 	bl	8006890 <__mdiff>
 8005fce:	68c2      	ldr	r2, [r0, #12]
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fd4:	bb02      	cbnz	r2, 8006018 <_dtoa_r+0xa48>
 8005fd6:	4601      	mov	r1, r0
 8005fd8:	9803      	ldr	r0, [sp, #12]
 8005fda:	f000 fc3d 	bl	8006858 <__mcmp>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4648      	mov	r0, r9
 8005fe6:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005fea:	f000 fa03 	bl	80063f4 <_Bfree>
 8005fee:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ff0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005ff2:	9e04      	ldr	r6, [sp, #16]
 8005ff4:	ea42 0103 	orr.w	r1, r2, r3
 8005ff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ffa:	4319      	orrs	r1, r3
 8005ffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ffe:	d10d      	bne.n	800601c <_dtoa_r+0xa4c>
 8006000:	2b39      	cmp	r3, #57	@ 0x39
 8006002:	d027      	beq.n	8006054 <_dtoa_r+0xa84>
 8006004:	9a08      	ldr	r2, [sp, #32]
 8006006:	2a00      	cmp	r2, #0
 8006008:	dd01      	ble.n	800600e <_dtoa_r+0xa3e>
 800600a:	9b06      	ldr	r3, [sp, #24]
 800600c:	3331      	adds	r3, #49	@ 0x31
 800600e:	f88b 3000 	strb.w	r3, [fp]
 8006012:	e52e      	b.n	8005a72 <_dtoa_r+0x4a2>
 8006014:	4628      	mov	r0, r5
 8006016:	e7b9      	b.n	8005f8c <_dtoa_r+0x9bc>
 8006018:	2201      	movs	r2, #1
 800601a:	e7e2      	b.n	8005fe2 <_dtoa_r+0xa12>
 800601c:	9908      	ldr	r1, [sp, #32]
 800601e:	2900      	cmp	r1, #0
 8006020:	db04      	blt.n	800602c <_dtoa_r+0xa5c>
 8006022:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006024:	4301      	orrs	r1, r0
 8006026:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006028:	4301      	orrs	r1, r0
 800602a:	d120      	bne.n	800606e <_dtoa_r+0xa9e>
 800602c:	2a00      	cmp	r2, #0
 800602e:	ddee      	ble.n	800600e <_dtoa_r+0xa3e>
 8006030:	2201      	movs	r2, #1
 8006032:	9903      	ldr	r1, [sp, #12]
 8006034:	4648      	mov	r0, r9
 8006036:	9304      	str	r3, [sp, #16]
 8006038:	f000 fba2 	bl	8006780 <__lshift>
 800603c:	4621      	mov	r1, r4
 800603e:	9003      	str	r0, [sp, #12]
 8006040:	f000 fc0a 	bl	8006858 <__mcmp>
 8006044:	2800      	cmp	r0, #0
 8006046:	9b04      	ldr	r3, [sp, #16]
 8006048:	dc02      	bgt.n	8006050 <_dtoa_r+0xa80>
 800604a:	d1e0      	bne.n	800600e <_dtoa_r+0xa3e>
 800604c:	07da      	lsls	r2, r3, #31
 800604e:	d5de      	bpl.n	800600e <_dtoa_r+0xa3e>
 8006050:	2b39      	cmp	r3, #57	@ 0x39
 8006052:	d1da      	bne.n	800600a <_dtoa_r+0xa3a>
 8006054:	2339      	movs	r3, #57	@ 0x39
 8006056:	f88b 3000 	strb.w	r3, [fp]
 800605a:	4633      	mov	r3, r6
 800605c:	461e      	mov	r6, r3
 800605e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006062:	3b01      	subs	r3, #1
 8006064:	2a39      	cmp	r2, #57	@ 0x39
 8006066:	d04e      	beq.n	8006106 <_dtoa_r+0xb36>
 8006068:	3201      	adds	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e501      	b.n	8005a72 <_dtoa_r+0x4a2>
 800606e:	2a00      	cmp	r2, #0
 8006070:	dd03      	ble.n	800607a <_dtoa_r+0xaaa>
 8006072:	2b39      	cmp	r3, #57	@ 0x39
 8006074:	d0ee      	beq.n	8006054 <_dtoa_r+0xa84>
 8006076:	3301      	adds	r3, #1
 8006078:	e7c9      	b.n	800600e <_dtoa_r+0xa3e>
 800607a:	9a04      	ldr	r2, [sp, #16]
 800607c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800607e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006082:	428a      	cmp	r2, r1
 8006084:	d028      	beq.n	80060d8 <_dtoa_r+0xb08>
 8006086:	2300      	movs	r3, #0
 8006088:	220a      	movs	r2, #10
 800608a:	9903      	ldr	r1, [sp, #12]
 800608c:	4648      	mov	r0, r9
 800608e:	f000 f9d3 	bl	8006438 <__multadd>
 8006092:	42af      	cmp	r7, r5
 8006094:	9003      	str	r0, [sp, #12]
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	f04f 020a 	mov.w	r2, #10
 800609e:	4639      	mov	r1, r7
 80060a0:	4648      	mov	r0, r9
 80060a2:	d107      	bne.n	80060b4 <_dtoa_r+0xae4>
 80060a4:	f000 f9c8 	bl	8006438 <__multadd>
 80060a8:	4607      	mov	r7, r0
 80060aa:	4605      	mov	r5, r0
 80060ac:	9b04      	ldr	r3, [sp, #16]
 80060ae:	3301      	adds	r3, #1
 80060b0:	9304      	str	r3, [sp, #16]
 80060b2:	e777      	b.n	8005fa4 <_dtoa_r+0x9d4>
 80060b4:	f000 f9c0 	bl	8006438 <__multadd>
 80060b8:	4629      	mov	r1, r5
 80060ba:	4607      	mov	r7, r0
 80060bc:	2300      	movs	r3, #0
 80060be:	220a      	movs	r2, #10
 80060c0:	4648      	mov	r0, r9
 80060c2:	f000 f9b9 	bl	8006438 <__multadd>
 80060c6:	4605      	mov	r5, r0
 80060c8:	e7f0      	b.n	80060ac <_dtoa_r+0xadc>
 80060ca:	f1bb 0f00 	cmp.w	fp, #0
 80060ce:	bfcc      	ite	gt
 80060d0:	465e      	movgt	r6, fp
 80060d2:	2601      	movle	r6, #1
 80060d4:	2700      	movs	r7, #0
 80060d6:	4456      	add	r6, sl
 80060d8:	2201      	movs	r2, #1
 80060da:	9903      	ldr	r1, [sp, #12]
 80060dc:	4648      	mov	r0, r9
 80060de:	9304      	str	r3, [sp, #16]
 80060e0:	f000 fb4e 	bl	8006780 <__lshift>
 80060e4:	4621      	mov	r1, r4
 80060e6:	9003      	str	r0, [sp, #12]
 80060e8:	f000 fbb6 	bl	8006858 <__mcmp>
 80060ec:	2800      	cmp	r0, #0
 80060ee:	dcb4      	bgt.n	800605a <_dtoa_r+0xa8a>
 80060f0:	d102      	bne.n	80060f8 <_dtoa_r+0xb28>
 80060f2:	9b04      	ldr	r3, [sp, #16]
 80060f4:	07db      	lsls	r3, r3, #31
 80060f6:	d4b0      	bmi.n	800605a <_dtoa_r+0xa8a>
 80060f8:	4633      	mov	r3, r6
 80060fa:	461e      	mov	r6, r3
 80060fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006100:	2a30      	cmp	r2, #48	@ 0x30
 8006102:	d0fa      	beq.n	80060fa <_dtoa_r+0xb2a>
 8006104:	e4b5      	b.n	8005a72 <_dtoa_r+0x4a2>
 8006106:	459a      	cmp	sl, r3
 8006108:	d1a8      	bne.n	800605c <_dtoa_r+0xa8c>
 800610a:	2331      	movs	r3, #49	@ 0x31
 800610c:	f108 0801 	add.w	r8, r8, #1
 8006110:	f88a 3000 	strb.w	r3, [sl]
 8006114:	e4ad      	b.n	8005a72 <_dtoa_r+0x4a2>
 8006116:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006118:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006174 <_dtoa_r+0xba4>
 800611c:	b11b      	cbz	r3, 8006126 <_dtoa_r+0xb56>
 800611e:	f10a 0308 	add.w	r3, sl, #8
 8006122:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	4650      	mov	r0, sl
 8006128:	b017      	add	sp, #92	@ 0x5c
 800612a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006130:	2b01      	cmp	r3, #1
 8006132:	f77f ae2e 	ble.w	8005d92 <_dtoa_r+0x7c2>
 8006136:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006138:	930a      	str	r3, [sp, #40]	@ 0x28
 800613a:	2001      	movs	r0, #1
 800613c:	e64d      	b.n	8005dda <_dtoa_r+0x80a>
 800613e:	f1bb 0f00 	cmp.w	fp, #0
 8006142:	f77f aed9 	ble.w	8005ef8 <_dtoa_r+0x928>
 8006146:	4656      	mov	r6, sl
 8006148:	4621      	mov	r1, r4
 800614a:	9803      	ldr	r0, [sp, #12]
 800614c:	f7ff f9b7 	bl	80054be <quorem>
 8006150:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006154:	f806 3b01 	strb.w	r3, [r6], #1
 8006158:	eba6 020a 	sub.w	r2, r6, sl
 800615c:	4593      	cmp	fp, r2
 800615e:	ddb4      	ble.n	80060ca <_dtoa_r+0xafa>
 8006160:	2300      	movs	r3, #0
 8006162:	220a      	movs	r2, #10
 8006164:	4648      	mov	r0, r9
 8006166:	9903      	ldr	r1, [sp, #12]
 8006168:	f000 f966 	bl	8006438 <__multadd>
 800616c:	9003      	str	r0, [sp, #12]
 800616e:	e7eb      	b.n	8006148 <_dtoa_r+0xb78>
 8006170:	080076b2 	.word	0x080076b2
 8006174:	08007636 	.word	0x08007636

08006178 <_free_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	4605      	mov	r5, r0
 800617c:	2900      	cmp	r1, #0
 800617e:	d040      	beq.n	8006202 <_free_r+0x8a>
 8006180:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006184:	1f0c      	subs	r4, r1, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	bfb8      	it	lt
 800618a:	18e4      	addlt	r4, r4, r3
 800618c:	f000 f8e6 	bl	800635c <__malloc_lock>
 8006190:	4a1c      	ldr	r2, [pc, #112]	@ (8006204 <_free_r+0x8c>)
 8006192:	6813      	ldr	r3, [r2, #0]
 8006194:	b933      	cbnz	r3, 80061a4 <_free_r+0x2c>
 8006196:	6063      	str	r3, [r4, #4]
 8006198:	6014      	str	r4, [r2, #0]
 800619a:	4628      	mov	r0, r5
 800619c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061a0:	f000 b8e2 	b.w	8006368 <__malloc_unlock>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d908      	bls.n	80061ba <_free_r+0x42>
 80061a8:	6820      	ldr	r0, [r4, #0]
 80061aa:	1821      	adds	r1, r4, r0
 80061ac:	428b      	cmp	r3, r1
 80061ae:	bf01      	itttt	eq
 80061b0:	6819      	ldreq	r1, [r3, #0]
 80061b2:	685b      	ldreq	r3, [r3, #4]
 80061b4:	1809      	addeq	r1, r1, r0
 80061b6:	6021      	streq	r1, [r4, #0]
 80061b8:	e7ed      	b.n	8006196 <_free_r+0x1e>
 80061ba:	461a      	mov	r2, r3
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	b10b      	cbz	r3, 80061c4 <_free_r+0x4c>
 80061c0:	42a3      	cmp	r3, r4
 80061c2:	d9fa      	bls.n	80061ba <_free_r+0x42>
 80061c4:	6811      	ldr	r1, [r2, #0]
 80061c6:	1850      	adds	r0, r2, r1
 80061c8:	42a0      	cmp	r0, r4
 80061ca:	d10b      	bne.n	80061e4 <_free_r+0x6c>
 80061cc:	6820      	ldr	r0, [r4, #0]
 80061ce:	4401      	add	r1, r0
 80061d0:	1850      	adds	r0, r2, r1
 80061d2:	4283      	cmp	r3, r0
 80061d4:	6011      	str	r1, [r2, #0]
 80061d6:	d1e0      	bne.n	800619a <_free_r+0x22>
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	4408      	add	r0, r1
 80061de:	6010      	str	r0, [r2, #0]
 80061e0:	6053      	str	r3, [r2, #4]
 80061e2:	e7da      	b.n	800619a <_free_r+0x22>
 80061e4:	d902      	bls.n	80061ec <_free_r+0x74>
 80061e6:	230c      	movs	r3, #12
 80061e8:	602b      	str	r3, [r5, #0]
 80061ea:	e7d6      	b.n	800619a <_free_r+0x22>
 80061ec:	6820      	ldr	r0, [r4, #0]
 80061ee:	1821      	adds	r1, r4, r0
 80061f0:	428b      	cmp	r3, r1
 80061f2:	bf01      	itttt	eq
 80061f4:	6819      	ldreq	r1, [r3, #0]
 80061f6:	685b      	ldreq	r3, [r3, #4]
 80061f8:	1809      	addeq	r1, r1, r0
 80061fa:	6021      	streq	r1, [r4, #0]
 80061fc:	6063      	str	r3, [r4, #4]
 80061fe:	6054      	str	r4, [r2, #4]
 8006200:	e7cb      	b.n	800619a <_free_r+0x22>
 8006202:	bd38      	pop	{r3, r4, r5, pc}
 8006204:	20000410 	.word	0x20000410

08006208 <malloc>:
 8006208:	4b02      	ldr	r3, [pc, #8]	@ (8006214 <malloc+0xc>)
 800620a:	4601      	mov	r1, r0
 800620c:	6818      	ldr	r0, [r3, #0]
 800620e:	f000 b825 	b.w	800625c <_malloc_r>
 8006212:	bf00      	nop
 8006214:	2000001c 	.word	0x2000001c

08006218 <sbrk_aligned>:
 8006218:	b570      	push	{r4, r5, r6, lr}
 800621a:	4e0f      	ldr	r6, [pc, #60]	@ (8006258 <sbrk_aligned+0x40>)
 800621c:	460c      	mov	r4, r1
 800621e:	6831      	ldr	r1, [r6, #0]
 8006220:	4605      	mov	r5, r0
 8006222:	b911      	cbnz	r1, 800622a <sbrk_aligned+0x12>
 8006224:	f000 fe3a 	bl	8006e9c <_sbrk_r>
 8006228:	6030      	str	r0, [r6, #0]
 800622a:	4621      	mov	r1, r4
 800622c:	4628      	mov	r0, r5
 800622e:	f000 fe35 	bl	8006e9c <_sbrk_r>
 8006232:	1c43      	adds	r3, r0, #1
 8006234:	d103      	bne.n	800623e <sbrk_aligned+0x26>
 8006236:	f04f 34ff 	mov.w	r4, #4294967295
 800623a:	4620      	mov	r0, r4
 800623c:	bd70      	pop	{r4, r5, r6, pc}
 800623e:	1cc4      	adds	r4, r0, #3
 8006240:	f024 0403 	bic.w	r4, r4, #3
 8006244:	42a0      	cmp	r0, r4
 8006246:	d0f8      	beq.n	800623a <sbrk_aligned+0x22>
 8006248:	1a21      	subs	r1, r4, r0
 800624a:	4628      	mov	r0, r5
 800624c:	f000 fe26 	bl	8006e9c <_sbrk_r>
 8006250:	3001      	adds	r0, #1
 8006252:	d1f2      	bne.n	800623a <sbrk_aligned+0x22>
 8006254:	e7ef      	b.n	8006236 <sbrk_aligned+0x1e>
 8006256:	bf00      	nop
 8006258:	2000040c 	.word	0x2000040c

0800625c <_malloc_r>:
 800625c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006260:	1ccd      	adds	r5, r1, #3
 8006262:	f025 0503 	bic.w	r5, r5, #3
 8006266:	3508      	adds	r5, #8
 8006268:	2d0c      	cmp	r5, #12
 800626a:	bf38      	it	cc
 800626c:	250c      	movcc	r5, #12
 800626e:	2d00      	cmp	r5, #0
 8006270:	4606      	mov	r6, r0
 8006272:	db01      	blt.n	8006278 <_malloc_r+0x1c>
 8006274:	42a9      	cmp	r1, r5
 8006276:	d904      	bls.n	8006282 <_malloc_r+0x26>
 8006278:	230c      	movs	r3, #12
 800627a:	6033      	str	r3, [r6, #0]
 800627c:	2000      	movs	r0, #0
 800627e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006282:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006358 <_malloc_r+0xfc>
 8006286:	f000 f869 	bl	800635c <__malloc_lock>
 800628a:	f8d8 3000 	ldr.w	r3, [r8]
 800628e:	461c      	mov	r4, r3
 8006290:	bb44      	cbnz	r4, 80062e4 <_malloc_r+0x88>
 8006292:	4629      	mov	r1, r5
 8006294:	4630      	mov	r0, r6
 8006296:	f7ff ffbf 	bl	8006218 <sbrk_aligned>
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	4604      	mov	r4, r0
 800629e:	d158      	bne.n	8006352 <_malloc_r+0xf6>
 80062a0:	f8d8 4000 	ldr.w	r4, [r8]
 80062a4:	4627      	mov	r7, r4
 80062a6:	2f00      	cmp	r7, #0
 80062a8:	d143      	bne.n	8006332 <_malloc_r+0xd6>
 80062aa:	2c00      	cmp	r4, #0
 80062ac:	d04b      	beq.n	8006346 <_malloc_r+0xea>
 80062ae:	6823      	ldr	r3, [r4, #0]
 80062b0:	4639      	mov	r1, r7
 80062b2:	4630      	mov	r0, r6
 80062b4:	eb04 0903 	add.w	r9, r4, r3
 80062b8:	f000 fdf0 	bl	8006e9c <_sbrk_r>
 80062bc:	4581      	cmp	r9, r0
 80062be:	d142      	bne.n	8006346 <_malloc_r+0xea>
 80062c0:	6821      	ldr	r1, [r4, #0]
 80062c2:	4630      	mov	r0, r6
 80062c4:	1a6d      	subs	r5, r5, r1
 80062c6:	4629      	mov	r1, r5
 80062c8:	f7ff ffa6 	bl	8006218 <sbrk_aligned>
 80062cc:	3001      	adds	r0, #1
 80062ce:	d03a      	beq.n	8006346 <_malloc_r+0xea>
 80062d0:	6823      	ldr	r3, [r4, #0]
 80062d2:	442b      	add	r3, r5
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	f8d8 3000 	ldr.w	r3, [r8]
 80062da:	685a      	ldr	r2, [r3, #4]
 80062dc:	bb62      	cbnz	r2, 8006338 <_malloc_r+0xdc>
 80062de:	f8c8 7000 	str.w	r7, [r8]
 80062e2:	e00f      	b.n	8006304 <_malloc_r+0xa8>
 80062e4:	6822      	ldr	r2, [r4, #0]
 80062e6:	1b52      	subs	r2, r2, r5
 80062e8:	d420      	bmi.n	800632c <_malloc_r+0xd0>
 80062ea:	2a0b      	cmp	r2, #11
 80062ec:	d917      	bls.n	800631e <_malloc_r+0xc2>
 80062ee:	1961      	adds	r1, r4, r5
 80062f0:	42a3      	cmp	r3, r4
 80062f2:	6025      	str	r5, [r4, #0]
 80062f4:	bf18      	it	ne
 80062f6:	6059      	strne	r1, [r3, #4]
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	bf08      	it	eq
 80062fc:	f8c8 1000 	streq.w	r1, [r8]
 8006300:	5162      	str	r2, [r4, r5]
 8006302:	604b      	str	r3, [r1, #4]
 8006304:	4630      	mov	r0, r6
 8006306:	f000 f82f 	bl	8006368 <__malloc_unlock>
 800630a:	f104 000b 	add.w	r0, r4, #11
 800630e:	1d23      	adds	r3, r4, #4
 8006310:	f020 0007 	bic.w	r0, r0, #7
 8006314:	1ac2      	subs	r2, r0, r3
 8006316:	bf1c      	itt	ne
 8006318:	1a1b      	subne	r3, r3, r0
 800631a:	50a3      	strne	r3, [r4, r2]
 800631c:	e7af      	b.n	800627e <_malloc_r+0x22>
 800631e:	6862      	ldr	r2, [r4, #4]
 8006320:	42a3      	cmp	r3, r4
 8006322:	bf0c      	ite	eq
 8006324:	f8c8 2000 	streq.w	r2, [r8]
 8006328:	605a      	strne	r2, [r3, #4]
 800632a:	e7eb      	b.n	8006304 <_malloc_r+0xa8>
 800632c:	4623      	mov	r3, r4
 800632e:	6864      	ldr	r4, [r4, #4]
 8006330:	e7ae      	b.n	8006290 <_malloc_r+0x34>
 8006332:	463c      	mov	r4, r7
 8006334:	687f      	ldr	r7, [r7, #4]
 8006336:	e7b6      	b.n	80062a6 <_malloc_r+0x4a>
 8006338:	461a      	mov	r2, r3
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	42a3      	cmp	r3, r4
 800633e:	d1fb      	bne.n	8006338 <_malloc_r+0xdc>
 8006340:	2300      	movs	r3, #0
 8006342:	6053      	str	r3, [r2, #4]
 8006344:	e7de      	b.n	8006304 <_malloc_r+0xa8>
 8006346:	230c      	movs	r3, #12
 8006348:	4630      	mov	r0, r6
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	f000 f80c 	bl	8006368 <__malloc_unlock>
 8006350:	e794      	b.n	800627c <_malloc_r+0x20>
 8006352:	6005      	str	r5, [r0, #0]
 8006354:	e7d6      	b.n	8006304 <_malloc_r+0xa8>
 8006356:	bf00      	nop
 8006358:	20000410 	.word	0x20000410

0800635c <__malloc_lock>:
 800635c:	4801      	ldr	r0, [pc, #4]	@ (8006364 <__malloc_lock+0x8>)
 800635e:	f7ff b89e 	b.w	800549e <__retarget_lock_acquire_recursive>
 8006362:	bf00      	nop
 8006364:	20000408 	.word	0x20000408

08006368 <__malloc_unlock>:
 8006368:	4801      	ldr	r0, [pc, #4]	@ (8006370 <__malloc_unlock+0x8>)
 800636a:	f7ff b899 	b.w	80054a0 <__retarget_lock_release_recursive>
 800636e:	bf00      	nop
 8006370:	20000408 	.word	0x20000408

08006374 <_Balloc>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	69c6      	ldr	r6, [r0, #28]
 8006378:	4604      	mov	r4, r0
 800637a:	460d      	mov	r5, r1
 800637c:	b976      	cbnz	r6, 800639c <_Balloc+0x28>
 800637e:	2010      	movs	r0, #16
 8006380:	f7ff ff42 	bl	8006208 <malloc>
 8006384:	4602      	mov	r2, r0
 8006386:	61e0      	str	r0, [r4, #28]
 8006388:	b920      	cbnz	r0, 8006394 <_Balloc+0x20>
 800638a:	216b      	movs	r1, #107	@ 0x6b
 800638c:	4b17      	ldr	r3, [pc, #92]	@ (80063ec <_Balloc+0x78>)
 800638e:	4818      	ldr	r0, [pc, #96]	@ (80063f0 <_Balloc+0x7c>)
 8006390:	f000 fda2 	bl	8006ed8 <__assert_func>
 8006394:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006398:	6006      	str	r6, [r0, #0]
 800639a:	60c6      	str	r6, [r0, #12]
 800639c:	69e6      	ldr	r6, [r4, #28]
 800639e:	68f3      	ldr	r3, [r6, #12]
 80063a0:	b183      	cbz	r3, 80063c4 <_Balloc+0x50>
 80063a2:	69e3      	ldr	r3, [r4, #28]
 80063a4:	68db      	ldr	r3, [r3, #12]
 80063a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80063aa:	b9b8      	cbnz	r0, 80063dc <_Balloc+0x68>
 80063ac:	2101      	movs	r1, #1
 80063ae:	fa01 f605 	lsl.w	r6, r1, r5
 80063b2:	1d72      	adds	r2, r6, #5
 80063b4:	4620      	mov	r0, r4
 80063b6:	0092      	lsls	r2, r2, #2
 80063b8:	f000 fdac 	bl	8006f14 <_calloc_r>
 80063bc:	b160      	cbz	r0, 80063d8 <_Balloc+0x64>
 80063be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80063c2:	e00e      	b.n	80063e2 <_Balloc+0x6e>
 80063c4:	2221      	movs	r2, #33	@ 0x21
 80063c6:	2104      	movs	r1, #4
 80063c8:	4620      	mov	r0, r4
 80063ca:	f000 fda3 	bl	8006f14 <_calloc_r>
 80063ce:	69e3      	ldr	r3, [r4, #28]
 80063d0:	60f0      	str	r0, [r6, #12]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e4      	bne.n	80063a2 <_Balloc+0x2e>
 80063d8:	2000      	movs	r0, #0
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	6802      	ldr	r2, [r0, #0]
 80063de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063e2:	2300      	movs	r3, #0
 80063e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063e8:	e7f7      	b.n	80063da <_Balloc+0x66>
 80063ea:	bf00      	nop
 80063ec:	08007643 	.word	0x08007643
 80063f0:	080076c3 	.word	0x080076c3

080063f4 <_Bfree>:
 80063f4:	b570      	push	{r4, r5, r6, lr}
 80063f6:	69c6      	ldr	r6, [r0, #28]
 80063f8:	4605      	mov	r5, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	b976      	cbnz	r6, 800641c <_Bfree+0x28>
 80063fe:	2010      	movs	r0, #16
 8006400:	f7ff ff02 	bl	8006208 <malloc>
 8006404:	4602      	mov	r2, r0
 8006406:	61e8      	str	r0, [r5, #28]
 8006408:	b920      	cbnz	r0, 8006414 <_Bfree+0x20>
 800640a:	218f      	movs	r1, #143	@ 0x8f
 800640c:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <_Bfree+0x3c>)
 800640e:	4809      	ldr	r0, [pc, #36]	@ (8006434 <_Bfree+0x40>)
 8006410:	f000 fd62 	bl	8006ed8 <__assert_func>
 8006414:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006418:	6006      	str	r6, [r0, #0]
 800641a:	60c6      	str	r6, [r0, #12]
 800641c:	b13c      	cbz	r4, 800642e <_Bfree+0x3a>
 800641e:	69eb      	ldr	r3, [r5, #28]
 8006420:	6862      	ldr	r2, [r4, #4]
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006428:	6021      	str	r1, [r4, #0]
 800642a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800642e:	bd70      	pop	{r4, r5, r6, pc}
 8006430:	08007643 	.word	0x08007643
 8006434:	080076c3 	.word	0x080076c3

08006438 <__multadd>:
 8006438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643c:	4607      	mov	r7, r0
 800643e:	460c      	mov	r4, r1
 8006440:	461e      	mov	r6, r3
 8006442:	2000      	movs	r0, #0
 8006444:	690d      	ldr	r5, [r1, #16]
 8006446:	f101 0c14 	add.w	ip, r1, #20
 800644a:	f8dc 3000 	ldr.w	r3, [ip]
 800644e:	3001      	adds	r0, #1
 8006450:	b299      	uxth	r1, r3
 8006452:	fb02 6101 	mla	r1, r2, r1, r6
 8006456:	0c1e      	lsrs	r6, r3, #16
 8006458:	0c0b      	lsrs	r3, r1, #16
 800645a:	fb02 3306 	mla	r3, r2, r6, r3
 800645e:	b289      	uxth	r1, r1
 8006460:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006464:	4285      	cmp	r5, r0
 8006466:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800646a:	f84c 1b04 	str.w	r1, [ip], #4
 800646e:	dcec      	bgt.n	800644a <__multadd+0x12>
 8006470:	b30e      	cbz	r6, 80064b6 <__multadd+0x7e>
 8006472:	68a3      	ldr	r3, [r4, #8]
 8006474:	42ab      	cmp	r3, r5
 8006476:	dc19      	bgt.n	80064ac <__multadd+0x74>
 8006478:	6861      	ldr	r1, [r4, #4]
 800647a:	4638      	mov	r0, r7
 800647c:	3101      	adds	r1, #1
 800647e:	f7ff ff79 	bl	8006374 <_Balloc>
 8006482:	4680      	mov	r8, r0
 8006484:	b928      	cbnz	r0, 8006492 <__multadd+0x5a>
 8006486:	4602      	mov	r2, r0
 8006488:	21ba      	movs	r1, #186	@ 0xba
 800648a:	4b0c      	ldr	r3, [pc, #48]	@ (80064bc <__multadd+0x84>)
 800648c:	480c      	ldr	r0, [pc, #48]	@ (80064c0 <__multadd+0x88>)
 800648e:	f000 fd23 	bl	8006ed8 <__assert_func>
 8006492:	6922      	ldr	r2, [r4, #16]
 8006494:	f104 010c 	add.w	r1, r4, #12
 8006498:	3202      	adds	r2, #2
 800649a:	0092      	lsls	r2, r2, #2
 800649c:	300c      	adds	r0, #12
 800649e:	f000 fd0d 	bl	8006ebc <memcpy>
 80064a2:	4621      	mov	r1, r4
 80064a4:	4638      	mov	r0, r7
 80064a6:	f7ff ffa5 	bl	80063f4 <_Bfree>
 80064aa:	4644      	mov	r4, r8
 80064ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80064b0:	3501      	adds	r5, #1
 80064b2:	615e      	str	r6, [r3, #20]
 80064b4:	6125      	str	r5, [r4, #16]
 80064b6:	4620      	mov	r0, r4
 80064b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064bc:	080076b2 	.word	0x080076b2
 80064c0:	080076c3 	.word	0x080076c3

080064c4 <__hi0bits>:
 80064c4:	4603      	mov	r3, r0
 80064c6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80064ca:	bf3a      	itte	cc
 80064cc:	0403      	lslcc	r3, r0, #16
 80064ce:	2010      	movcc	r0, #16
 80064d0:	2000      	movcs	r0, #0
 80064d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064d6:	bf3c      	itt	cc
 80064d8:	021b      	lslcc	r3, r3, #8
 80064da:	3008      	addcc	r0, #8
 80064dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80064e0:	bf3c      	itt	cc
 80064e2:	011b      	lslcc	r3, r3, #4
 80064e4:	3004      	addcc	r0, #4
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ea:	bf3c      	itt	cc
 80064ec:	009b      	lslcc	r3, r3, #2
 80064ee:	3002      	addcc	r0, #2
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db05      	blt.n	8006500 <__hi0bits+0x3c>
 80064f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80064f8:	f100 0001 	add.w	r0, r0, #1
 80064fc:	bf08      	it	eq
 80064fe:	2020      	moveq	r0, #32
 8006500:	4770      	bx	lr

08006502 <__lo0bits>:
 8006502:	6803      	ldr	r3, [r0, #0]
 8006504:	4602      	mov	r2, r0
 8006506:	f013 0007 	ands.w	r0, r3, #7
 800650a:	d00b      	beq.n	8006524 <__lo0bits+0x22>
 800650c:	07d9      	lsls	r1, r3, #31
 800650e:	d421      	bmi.n	8006554 <__lo0bits+0x52>
 8006510:	0798      	lsls	r0, r3, #30
 8006512:	bf49      	itett	mi
 8006514:	085b      	lsrmi	r3, r3, #1
 8006516:	089b      	lsrpl	r3, r3, #2
 8006518:	2001      	movmi	r0, #1
 800651a:	6013      	strmi	r3, [r2, #0]
 800651c:	bf5c      	itt	pl
 800651e:	2002      	movpl	r0, #2
 8006520:	6013      	strpl	r3, [r2, #0]
 8006522:	4770      	bx	lr
 8006524:	b299      	uxth	r1, r3
 8006526:	b909      	cbnz	r1, 800652c <__lo0bits+0x2a>
 8006528:	2010      	movs	r0, #16
 800652a:	0c1b      	lsrs	r3, r3, #16
 800652c:	b2d9      	uxtb	r1, r3
 800652e:	b909      	cbnz	r1, 8006534 <__lo0bits+0x32>
 8006530:	3008      	adds	r0, #8
 8006532:	0a1b      	lsrs	r3, r3, #8
 8006534:	0719      	lsls	r1, r3, #28
 8006536:	bf04      	itt	eq
 8006538:	091b      	lsreq	r3, r3, #4
 800653a:	3004      	addeq	r0, #4
 800653c:	0799      	lsls	r1, r3, #30
 800653e:	bf04      	itt	eq
 8006540:	089b      	lsreq	r3, r3, #2
 8006542:	3002      	addeq	r0, #2
 8006544:	07d9      	lsls	r1, r3, #31
 8006546:	d403      	bmi.n	8006550 <__lo0bits+0x4e>
 8006548:	085b      	lsrs	r3, r3, #1
 800654a:	f100 0001 	add.w	r0, r0, #1
 800654e:	d003      	beq.n	8006558 <__lo0bits+0x56>
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	4770      	bx	lr
 8006554:	2000      	movs	r0, #0
 8006556:	4770      	bx	lr
 8006558:	2020      	movs	r0, #32
 800655a:	4770      	bx	lr

0800655c <__i2b>:
 800655c:	b510      	push	{r4, lr}
 800655e:	460c      	mov	r4, r1
 8006560:	2101      	movs	r1, #1
 8006562:	f7ff ff07 	bl	8006374 <_Balloc>
 8006566:	4602      	mov	r2, r0
 8006568:	b928      	cbnz	r0, 8006576 <__i2b+0x1a>
 800656a:	f240 1145 	movw	r1, #325	@ 0x145
 800656e:	4b04      	ldr	r3, [pc, #16]	@ (8006580 <__i2b+0x24>)
 8006570:	4804      	ldr	r0, [pc, #16]	@ (8006584 <__i2b+0x28>)
 8006572:	f000 fcb1 	bl	8006ed8 <__assert_func>
 8006576:	2301      	movs	r3, #1
 8006578:	6144      	str	r4, [r0, #20]
 800657a:	6103      	str	r3, [r0, #16]
 800657c:	bd10      	pop	{r4, pc}
 800657e:	bf00      	nop
 8006580:	080076b2 	.word	0x080076b2
 8006584:	080076c3 	.word	0x080076c3

08006588 <__multiply>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	4617      	mov	r7, r2
 800658e:	690a      	ldr	r2, [r1, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4689      	mov	r9, r1
 8006594:	429a      	cmp	r2, r3
 8006596:	bfa2      	ittt	ge
 8006598:	463b      	movge	r3, r7
 800659a:	460f      	movge	r7, r1
 800659c:	4699      	movge	r9, r3
 800659e:	693d      	ldr	r5, [r7, #16]
 80065a0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	eb05 060a 	add.w	r6, r5, sl
 80065ac:	42b3      	cmp	r3, r6
 80065ae:	b085      	sub	sp, #20
 80065b0:	bfb8      	it	lt
 80065b2:	3101      	addlt	r1, #1
 80065b4:	f7ff fede 	bl	8006374 <_Balloc>
 80065b8:	b930      	cbnz	r0, 80065c8 <__multiply+0x40>
 80065ba:	4602      	mov	r2, r0
 80065bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80065c0:	4b40      	ldr	r3, [pc, #256]	@ (80066c4 <__multiply+0x13c>)
 80065c2:	4841      	ldr	r0, [pc, #260]	@ (80066c8 <__multiply+0x140>)
 80065c4:	f000 fc88 	bl	8006ed8 <__assert_func>
 80065c8:	f100 0414 	add.w	r4, r0, #20
 80065cc:	4623      	mov	r3, r4
 80065ce:	2200      	movs	r2, #0
 80065d0:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80065d4:	4573      	cmp	r3, lr
 80065d6:	d320      	bcc.n	800661a <__multiply+0x92>
 80065d8:	f107 0814 	add.w	r8, r7, #20
 80065dc:	f109 0114 	add.w	r1, r9, #20
 80065e0:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80065e4:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80065e8:	9302      	str	r3, [sp, #8]
 80065ea:	1beb      	subs	r3, r5, r7
 80065ec:	3b15      	subs	r3, #21
 80065ee:	f023 0303 	bic.w	r3, r3, #3
 80065f2:	3304      	adds	r3, #4
 80065f4:	3715      	adds	r7, #21
 80065f6:	42bd      	cmp	r5, r7
 80065f8:	bf38      	it	cc
 80065fa:	2304      	movcc	r3, #4
 80065fc:	9301      	str	r3, [sp, #4]
 80065fe:	9b02      	ldr	r3, [sp, #8]
 8006600:	9103      	str	r1, [sp, #12]
 8006602:	428b      	cmp	r3, r1
 8006604:	d80c      	bhi.n	8006620 <__multiply+0x98>
 8006606:	2e00      	cmp	r6, #0
 8006608:	dd03      	ble.n	8006612 <__multiply+0x8a>
 800660a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800660e:	2b00      	cmp	r3, #0
 8006610:	d055      	beq.n	80066be <__multiply+0x136>
 8006612:	6106      	str	r6, [r0, #16]
 8006614:	b005      	add	sp, #20
 8006616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800661a:	f843 2b04 	str.w	r2, [r3], #4
 800661e:	e7d9      	b.n	80065d4 <__multiply+0x4c>
 8006620:	f8b1 a000 	ldrh.w	sl, [r1]
 8006624:	f1ba 0f00 	cmp.w	sl, #0
 8006628:	d01f      	beq.n	800666a <__multiply+0xe2>
 800662a:	46c4      	mov	ip, r8
 800662c:	46a1      	mov	r9, r4
 800662e:	2700      	movs	r7, #0
 8006630:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006634:	f8d9 3000 	ldr.w	r3, [r9]
 8006638:	fa1f fb82 	uxth.w	fp, r2
 800663c:	b29b      	uxth	r3, r3
 800663e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006642:	443b      	add	r3, r7
 8006644:	f8d9 7000 	ldr.w	r7, [r9]
 8006648:	0c12      	lsrs	r2, r2, #16
 800664a:	0c3f      	lsrs	r7, r7, #16
 800664c:	fb0a 7202 	mla	r2, sl, r2, r7
 8006650:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006654:	b29b      	uxth	r3, r3
 8006656:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800665a:	4565      	cmp	r5, ip
 800665c:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006660:	f849 3b04 	str.w	r3, [r9], #4
 8006664:	d8e4      	bhi.n	8006630 <__multiply+0xa8>
 8006666:	9b01      	ldr	r3, [sp, #4]
 8006668:	50e7      	str	r7, [r4, r3]
 800666a:	9b03      	ldr	r3, [sp, #12]
 800666c:	3104      	adds	r1, #4
 800666e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006672:	f1b9 0f00 	cmp.w	r9, #0
 8006676:	d020      	beq.n	80066ba <__multiply+0x132>
 8006678:	4647      	mov	r7, r8
 800667a:	46a4      	mov	ip, r4
 800667c:	f04f 0a00 	mov.w	sl, #0
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	f8b7 b000 	ldrh.w	fp, [r7]
 8006686:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800668a:	b29b      	uxth	r3, r3
 800668c:	fb09 220b 	mla	r2, r9, fp, r2
 8006690:	4452      	add	r2, sl
 8006692:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006696:	f84c 3b04 	str.w	r3, [ip], #4
 800669a:	f857 3b04 	ldr.w	r3, [r7], #4
 800669e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066a2:	f8bc 3000 	ldrh.w	r3, [ip]
 80066a6:	42bd      	cmp	r5, r7
 80066a8:	fb09 330a 	mla	r3, r9, sl, r3
 80066ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80066b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80066b4:	d8e5      	bhi.n	8006682 <__multiply+0xfa>
 80066b6:	9a01      	ldr	r2, [sp, #4]
 80066b8:	50a3      	str	r3, [r4, r2]
 80066ba:	3404      	adds	r4, #4
 80066bc:	e79f      	b.n	80065fe <__multiply+0x76>
 80066be:	3e01      	subs	r6, #1
 80066c0:	e7a1      	b.n	8006606 <__multiply+0x7e>
 80066c2:	bf00      	nop
 80066c4:	080076b2 	.word	0x080076b2
 80066c8:	080076c3 	.word	0x080076c3

080066cc <__pow5mult>:
 80066cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d0:	4615      	mov	r5, r2
 80066d2:	f012 0203 	ands.w	r2, r2, #3
 80066d6:	4607      	mov	r7, r0
 80066d8:	460e      	mov	r6, r1
 80066da:	d007      	beq.n	80066ec <__pow5mult+0x20>
 80066dc:	4c25      	ldr	r4, [pc, #148]	@ (8006774 <__pow5mult+0xa8>)
 80066de:	3a01      	subs	r2, #1
 80066e0:	2300      	movs	r3, #0
 80066e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066e6:	f7ff fea7 	bl	8006438 <__multadd>
 80066ea:	4606      	mov	r6, r0
 80066ec:	10ad      	asrs	r5, r5, #2
 80066ee:	d03d      	beq.n	800676c <__pow5mult+0xa0>
 80066f0:	69fc      	ldr	r4, [r7, #28]
 80066f2:	b97c      	cbnz	r4, 8006714 <__pow5mult+0x48>
 80066f4:	2010      	movs	r0, #16
 80066f6:	f7ff fd87 	bl	8006208 <malloc>
 80066fa:	4602      	mov	r2, r0
 80066fc:	61f8      	str	r0, [r7, #28]
 80066fe:	b928      	cbnz	r0, 800670c <__pow5mult+0x40>
 8006700:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006704:	4b1c      	ldr	r3, [pc, #112]	@ (8006778 <__pow5mult+0xac>)
 8006706:	481d      	ldr	r0, [pc, #116]	@ (800677c <__pow5mult+0xb0>)
 8006708:	f000 fbe6 	bl	8006ed8 <__assert_func>
 800670c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006710:	6004      	str	r4, [r0, #0]
 8006712:	60c4      	str	r4, [r0, #12]
 8006714:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800671c:	b94c      	cbnz	r4, 8006732 <__pow5mult+0x66>
 800671e:	f240 2171 	movw	r1, #625	@ 0x271
 8006722:	4638      	mov	r0, r7
 8006724:	f7ff ff1a 	bl	800655c <__i2b>
 8006728:	2300      	movs	r3, #0
 800672a:	4604      	mov	r4, r0
 800672c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006730:	6003      	str	r3, [r0, #0]
 8006732:	f04f 0900 	mov.w	r9, #0
 8006736:	07eb      	lsls	r3, r5, #31
 8006738:	d50a      	bpl.n	8006750 <__pow5mult+0x84>
 800673a:	4631      	mov	r1, r6
 800673c:	4622      	mov	r2, r4
 800673e:	4638      	mov	r0, r7
 8006740:	f7ff ff22 	bl	8006588 <__multiply>
 8006744:	4680      	mov	r8, r0
 8006746:	4631      	mov	r1, r6
 8006748:	4638      	mov	r0, r7
 800674a:	f7ff fe53 	bl	80063f4 <_Bfree>
 800674e:	4646      	mov	r6, r8
 8006750:	106d      	asrs	r5, r5, #1
 8006752:	d00b      	beq.n	800676c <__pow5mult+0xa0>
 8006754:	6820      	ldr	r0, [r4, #0]
 8006756:	b938      	cbnz	r0, 8006768 <__pow5mult+0x9c>
 8006758:	4622      	mov	r2, r4
 800675a:	4621      	mov	r1, r4
 800675c:	4638      	mov	r0, r7
 800675e:	f7ff ff13 	bl	8006588 <__multiply>
 8006762:	6020      	str	r0, [r4, #0]
 8006764:	f8c0 9000 	str.w	r9, [r0]
 8006768:	4604      	mov	r4, r0
 800676a:	e7e4      	b.n	8006736 <__pow5mult+0x6a>
 800676c:	4630      	mov	r0, r6
 800676e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006772:	bf00      	nop
 8006774:	08007774 	.word	0x08007774
 8006778:	08007643 	.word	0x08007643
 800677c:	080076c3 	.word	0x080076c3

08006780 <__lshift>:
 8006780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006784:	460c      	mov	r4, r1
 8006786:	4607      	mov	r7, r0
 8006788:	4691      	mov	r9, r2
 800678a:	6923      	ldr	r3, [r4, #16]
 800678c:	6849      	ldr	r1, [r1, #4]
 800678e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006792:	68a3      	ldr	r3, [r4, #8]
 8006794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006798:	f108 0601 	add.w	r6, r8, #1
 800679c:	42b3      	cmp	r3, r6
 800679e:	db0b      	blt.n	80067b8 <__lshift+0x38>
 80067a0:	4638      	mov	r0, r7
 80067a2:	f7ff fde7 	bl	8006374 <_Balloc>
 80067a6:	4605      	mov	r5, r0
 80067a8:	b948      	cbnz	r0, 80067be <__lshift+0x3e>
 80067aa:	4602      	mov	r2, r0
 80067ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80067b0:	4b27      	ldr	r3, [pc, #156]	@ (8006850 <__lshift+0xd0>)
 80067b2:	4828      	ldr	r0, [pc, #160]	@ (8006854 <__lshift+0xd4>)
 80067b4:	f000 fb90 	bl	8006ed8 <__assert_func>
 80067b8:	3101      	adds	r1, #1
 80067ba:	005b      	lsls	r3, r3, #1
 80067bc:	e7ee      	b.n	800679c <__lshift+0x1c>
 80067be:	2300      	movs	r3, #0
 80067c0:	f100 0114 	add.w	r1, r0, #20
 80067c4:	f100 0210 	add.w	r2, r0, #16
 80067c8:	4618      	mov	r0, r3
 80067ca:	4553      	cmp	r3, sl
 80067cc:	db33      	blt.n	8006836 <__lshift+0xb6>
 80067ce:	6920      	ldr	r0, [r4, #16]
 80067d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067d4:	f104 0314 	add.w	r3, r4, #20
 80067d8:	f019 091f 	ands.w	r9, r9, #31
 80067dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80067e4:	d02b      	beq.n	800683e <__lshift+0xbe>
 80067e6:	468a      	mov	sl, r1
 80067e8:	2200      	movs	r2, #0
 80067ea:	f1c9 0e20 	rsb	lr, r9, #32
 80067ee:	6818      	ldr	r0, [r3, #0]
 80067f0:	fa00 f009 	lsl.w	r0, r0, r9
 80067f4:	4310      	orrs	r0, r2
 80067f6:	f84a 0b04 	str.w	r0, [sl], #4
 80067fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80067fe:	459c      	cmp	ip, r3
 8006800:	fa22 f20e 	lsr.w	r2, r2, lr
 8006804:	d8f3      	bhi.n	80067ee <__lshift+0x6e>
 8006806:	ebac 0304 	sub.w	r3, ip, r4
 800680a:	3b15      	subs	r3, #21
 800680c:	f023 0303 	bic.w	r3, r3, #3
 8006810:	3304      	adds	r3, #4
 8006812:	f104 0015 	add.w	r0, r4, #21
 8006816:	4560      	cmp	r0, ip
 8006818:	bf88      	it	hi
 800681a:	2304      	movhi	r3, #4
 800681c:	50ca      	str	r2, [r1, r3]
 800681e:	b10a      	cbz	r2, 8006824 <__lshift+0xa4>
 8006820:	f108 0602 	add.w	r6, r8, #2
 8006824:	3e01      	subs	r6, #1
 8006826:	4638      	mov	r0, r7
 8006828:	4621      	mov	r1, r4
 800682a:	612e      	str	r6, [r5, #16]
 800682c:	f7ff fde2 	bl	80063f4 <_Bfree>
 8006830:	4628      	mov	r0, r5
 8006832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006836:	f842 0f04 	str.w	r0, [r2, #4]!
 800683a:	3301      	adds	r3, #1
 800683c:	e7c5      	b.n	80067ca <__lshift+0x4a>
 800683e:	3904      	subs	r1, #4
 8006840:	f853 2b04 	ldr.w	r2, [r3], #4
 8006844:	459c      	cmp	ip, r3
 8006846:	f841 2f04 	str.w	r2, [r1, #4]!
 800684a:	d8f9      	bhi.n	8006840 <__lshift+0xc0>
 800684c:	e7ea      	b.n	8006824 <__lshift+0xa4>
 800684e:	bf00      	nop
 8006850:	080076b2 	.word	0x080076b2
 8006854:	080076c3 	.word	0x080076c3

08006858 <__mcmp>:
 8006858:	4603      	mov	r3, r0
 800685a:	690a      	ldr	r2, [r1, #16]
 800685c:	6900      	ldr	r0, [r0, #16]
 800685e:	b530      	push	{r4, r5, lr}
 8006860:	1a80      	subs	r0, r0, r2
 8006862:	d10e      	bne.n	8006882 <__mcmp+0x2a>
 8006864:	3314      	adds	r3, #20
 8006866:	3114      	adds	r1, #20
 8006868:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800686c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006870:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006874:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006878:	4295      	cmp	r5, r2
 800687a:	d003      	beq.n	8006884 <__mcmp+0x2c>
 800687c:	d205      	bcs.n	800688a <__mcmp+0x32>
 800687e:	f04f 30ff 	mov.w	r0, #4294967295
 8006882:	bd30      	pop	{r4, r5, pc}
 8006884:	42a3      	cmp	r3, r4
 8006886:	d3f3      	bcc.n	8006870 <__mcmp+0x18>
 8006888:	e7fb      	b.n	8006882 <__mcmp+0x2a>
 800688a:	2001      	movs	r0, #1
 800688c:	e7f9      	b.n	8006882 <__mcmp+0x2a>
	...

08006890 <__mdiff>:
 8006890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006894:	4689      	mov	r9, r1
 8006896:	4606      	mov	r6, r0
 8006898:	4611      	mov	r1, r2
 800689a:	4648      	mov	r0, r9
 800689c:	4614      	mov	r4, r2
 800689e:	f7ff ffdb 	bl	8006858 <__mcmp>
 80068a2:	1e05      	subs	r5, r0, #0
 80068a4:	d112      	bne.n	80068cc <__mdiff+0x3c>
 80068a6:	4629      	mov	r1, r5
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff fd63 	bl	8006374 <_Balloc>
 80068ae:	4602      	mov	r2, r0
 80068b0:	b928      	cbnz	r0, 80068be <__mdiff+0x2e>
 80068b2:	f240 2137 	movw	r1, #567	@ 0x237
 80068b6:	4b3e      	ldr	r3, [pc, #248]	@ (80069b0 <__mdiff+0x120>)
 80068b8:	483e      	ldr	r0, [pc, #248]	@ (80069b4 <__mdiff+0x124>)
 80068ba:	f000 fb0d 	bl	8006ed8 <__assert_func>
 80068be:	2301      	movs	r3, #1
 80068c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068c4:	4610      	mov	r0, r2
 80068c6:	b003      	add	sp, #12
 80068c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068cc:	bfbc      	itt	lt
 80068ce:	464b      	movlt	r3, r9
 80068d0:	46a1      	movlt	r9, r4
 80068d2:	4630      	mov	r0, r6
 80068d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80068d8:	bfba      	itte	lt
 80068da:	461c      	movlt	r4, r3
 80068dc:	2501      	movlt	r5, #1
 80068de:	2500      	movge	r5, #0
 80068e0:	f7ff fd48 	bl	8006374 <_Balloc>
 80068e4:	4602      	mov	r2, r0
 80068e6:	b918      	cbnz	r0, 80068f0 <__mdiff+0x60>
 80068e8:	f240 2145 	movw	r1, #581	@ 0x245
 80068ec:	4b30      	ldr	r3, [pc, #192]	@ (80069b0 <__mdiff+0x120>)
 80068ee:	e7e3      	b.n	80068b8 <__mdiff+0x28>
 80068f0:	f100 0b14 	add.w	fp, r0, #20
 80068f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80068f8:	f109 0310 	add.w	r3, r9, #16
 80068fc:	60c5      	str	r5, [r0, #12]
 80068fe:	f04f 0c00 	mov.w	ip, #0
 8006902:	f109 0514 	add.w	r5, r9, #20
 8006906:	46d9      	mov	r9, fp
 8006908:	6926      	ldr	r6, [r4, #16]
 800690a:	f104 0e14 	add.w	lr, r4, #20
 800690e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006912:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006916:	9301      	str	r3, [sp, #4]
 8006918:	9b01      	ldr	r3, [sp, #4]
 800691a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800691e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006922:	b281      	uxth	r1, r0
 8006924:	9301      	str	r3, [sp, #4]
 8006926:	fa1f f38a 	uxth.w	r3, sl
 800692a:	1a5b      	subs	r3, r3, r1
 800692c:	0c00      	lsrs	r0, r0, #16
 800692e:	4463      	add	r3, ip
 8006930:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006934:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006938:	b29b      	uxth	r3, r3
 800693a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800693e:	4576      	cmp	r6, lr
 8006940:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006944:	f849 3b04 	str.w	r3, [r9], #4
 8006948:	d8e6      	bhi.n	8006918 <__mdiff+0x88>
 800694a:	1b33      	subs	r3, r6, r4
 800694c:	3b15      	subs	r3, #21
 800694e:	f023 0303 	bic.w	r3, r3, #3
 8006952:	3415      	adds	r4, #21
 8006954:	3304      	adds	r3, #4
 8006956:	42a6      	cmp	r6, r4
 8006958:	bf38      	it	cc
 800695a:	2304      	movcc	r3, #4
 800695c:	441d      	add	r5, r3
 800695e:	445b      	add	r3, fp
 8006960:	461e      	mov	r6, r3
 8006962:	462c      	mov	r4, r5
 8006964:	4544      	cmp	r4, r8
 8006966:	d30e      	bcc.n	8006986 <__mdiff+0xf6>
 8006968:	f108 0103 	add.w	r1, r8, #3
 800696c:	1b49      	subs	r1, r1, r5
 800696e:	f021 0103 	bic.w	r1, r1, #3
 8006972:	3d03      	subs	r5, #3
 8006974:	45a8      	cmp	r8, r5
 8006976:	bf38      	it	cc
 8006978:	2100      	movcc	r1, #0
 800697a:	440b      	add	r3, r1
 800697c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006980:	b199      	cbz	r1, 80069aa <__mdiff+0x11a>
 8006982:	6117      	str	r7, [r2, #16]
 8006984:	e79e      	b.n	80068c4 <__mdiff+0x34>
 8006986:	46e6      	mov	lr, ip
 8006988:	f854 1b04 	ldr.w	r1, [r4], #4
 800698c:	fa1f fc81 	uxth.w	ip, r1
 8006990:	44f4      	add	ip, lr
 8006992:	0c08      	lsrs	r0, r1, #16
 8006994:	4471      	add	r1, lr
 8006996:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800699a:	b289      	uxth	r1, r1
 800699c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80069a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069a4:	f846 1b04 	str.w	r1, [r6], #4
 80069a8:	e7dc      	b.n	8006964 <__mdiff+0xd4>
 80069aa:	3f01      	subs	r7, #1
 80069ac:	e7e6      	b.n	800697c <__mdiff+0xec>
 80069ae:	bf00      	nop
 80069b0:	080076b2 	.word	0x080076b2
 80069b4:	080076c3 	.word	0x080076c3

080069b8 <__d2b>:
 80069b8:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80069bc:	2101      	movs	r1, #1
 80069be:	4690      	mov	r8, r2
 80069c0:	4699      	mov	r9, r3
 80069c2:	9e08      	ldr	r6, [sp, #32]
 80069c4:	f7ff fcd6 	bl	8006374 <_Balloc>
 80069c8:	4604      	mov	r4, r0
 80069ca:	b930      	cbnz	r0, 80069da <__d2b+0x22>
 80069cc:	4602      	mov	r2, r0
 80069ce:	f240 310f 	movw	r1, #783	@ 0x30f
 80069d2:	4b23      	ldr	r3, [pc, #140]	@ (8006a60 <__d2b+0xa8>)
 80069d4:	4823      	ldr	r0, [pc, #140]	@ (8006a64 <__d2b+0xac>)
 80069d6:	f000 fa7f 	bl	8006ed8 <__assert_func>
 80069da:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80069de:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80069e2:	b10d      	cbz	r5, 80069e8 <__d2b+0x30>
 80069e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80069e8:	9301      	str	r3, [sp, #4]
 80069ea:	f1b8 0300 	subs.w	r3, r8, #0
 80069ee:	d024      	beq.n	8006a3a <__d2b+0x82>
 80069f0:	4668      	mov	r0, sp
 80069f2:	9300      	str	r3, [sp, #0]
 80069f4:	f7ff fd85 	bl	8006502 <__lo0bits>
 80069f8:	e9dd 1200 	ldrd	r1, r2, [sp]
 80069fc:	b1d8      	cbz	r0, 8006a36 <__d2b+0x7e>
 80069fe:	f1c0 0320 	rsb	r3, r0, #32
 8006a02:	fa02 f303 	lsl.w	r3, r2, r3
 8006a06:	430b      	orrs	r3, r1
 8006a08:	40c2      	lsrs	r2, r0
 8006a0a:	6163      	str	r3, [r4, #20]
 8006a0c:	9201      	str	r2, [sp, #4]
 8006a0e:	9b01      	ldr	r3, [sp, #4]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	bf0c      	ite	eq
 8006a14:	2201      	moveq	r2, #1
 8006a16:	2202      	movne	r2, #2
 8006a18:	61a3      	str	r3, [r4, #24]
 8006a1a:	6122      	str	r2, [r4, #16]
 8006a1c:	b1ad      	cbz	r5, 8006a4a <__d2b+0x92>
 8006a1e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006a22:	4405      	add	r5, r0
 8006a24:	6035      	str	r5, [r6, #0]
 8006a26:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a2c:	6018      	str	r0, [r3, #0]
 8006a2e:	4620      	mov	r0, r4
 8006a30:	b002      	add	sp, #8
 8006a32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006a36:	6161      	str	r1, [r4, #20]
 8006a38:	e7e9      	b.n	8006a0e <__d2b+0x56>
 8006a3a:	a801      	add	r0, sp, #4
 8006a3c:	f7ff fd61 	bl	8006502 <__lo0bits>
 8006a40:	9b01      	ldr	r3, [sp, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	6163      	str	r3, [r4, #20]
 8006a46:	3020      	adds	r0, #32
 8006a48:	e7e7      	b.n	8006a1a <__d2b+0x62>
 8006a4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006a4e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a52:	6030      	str	r0, [r6, #0]
 8006a54:	6918      	ldr	r0, [r3, #16]
 8006a56:	f7ff fd35 	bl	80064c4 <__hi0bits>
 8006a5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a5e:	e7e4      	b.n	8006a2a <__d2b+0x72>
 8006a60:	080076b2 	.word	0x080076b2
 8006a64:	080076c3 	.word	0x080076c3

08006a68 <__ssputs_r>:
 8006a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a6c:	461f      	mov	r7, r3
 8006a6e:	688e      	ldr	r6, [r1, #8]
 8006a70:	4682      	mov	sl, r0
 8006a72:	42be      	cmp	r6, r7
 8006a74:	460c      	mov	r4, r1
 8006a76:	4690      	mov	r8, r2
 8006a78:	680b      	ldr	r3, [r1, #0]
 8006a7a:	d82d      	bhi.n	8006ad8 <__ssputs_r+0x70>
 8006a7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006a80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006a84:	d026      	beq.n	8006ad4 <__ssputs_r+0x6c>
 8006a86:	6965      	ldr	r5, [r4, #20]
 8006a88:	6909      	ldr	r1, [r1, #16]
 8006a8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a8e:	eba3 0901 	sub.w	r9, r3, r1
 8006a92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a96:	1c7b      	adds	r3, r7, #1
 8006a98:	444b      	add	r3, r9
 8006a9a:	106d      	asrs	r5, r5, #1
 8006a9c:	429d      	cmp	r5, r3
 8006a9e:	bf38      	it	cc
 8006aa0:	461d      	movcc	r5, r3
 8006aa2:	0553      	lsls	r3, r2, #21
 8006aa4:	d527      	bpl.n	8006af6 <__ssputs_r+0x8e>
 8006aa6:	4629      	mov	r1, r5
 8006aa8:	f7ff fbd8 	bl	800625c <_malloc_r>
 8006aac:	4606      	mov	r6, r0
 8006aae:	b360      	cbz	r0, 8006b0a <__ssputs_r+0xa2>
 8006ab0:	464a      	mov	r2, r9
 8006ab2:	6921      	ldr	r1, [r4, #16]
 8006ab4:	f000 fa02 	bl	8006ebc <memcpy>
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006abe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ac2:	81a3      	strh	r3, [r4, #12]
 8006ac4:	6126      	str	r6, [r4, #16]
 8006ac6:	444e      	add	r6, r9
 8006ac8:	6026      	str	r6, [r4, #0]
 8006aca:	463e      	mov	r6, r7
 8006acc:	6165      	str	r5, [r4, #20]
 8006ace:	eba5 0509 	sub.w	r5, r5, r9
 8006ad2:	60a5      	str	r5, [r4, #8]
 8006ad4:	42be      	cmp	r6, r7
 8006ad6:	d900      	bls.n	8006ada <__ssputs_r+0x72>
 8006ad8:	463e      	mov	r6, r7
 8006ada:	4632      	mov	r2, r6
 8006adc:	4641      	mov	r1, r8
 8006ade:	6820      	ldr	r0, [r4, #0]
 8006ae0:	f000 f9c2 	bl	8006e68 <memmove>
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	68a3      	ldr	r3, [r4, #8]
 8006ae8:	1b9b      	subs	r3, r3, r6
 8006aea:	60a3      	str	r3, [r4, #8]
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	4433      	add	r3, r6
 8006af0:	6023      	str	r3, [r4, #0]
 8006af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006af6:	462a      	mov	r2, r5
 8006af8:	f000 fa32 	bl	8006f60 <_realloc_r>
 8006afc:	4606      	mov	r6, r0
 8006afe:	2800      	cmp	r0, #0
 8006b00:	d1e0      	bne.n	8006ac4 <__ssputs_r+0x5c>
 8006b02:	4650      	mov	r0, sl
 8006b04:	6921      	ldr	r1, [r4, #16]
 8006b06:	f7ff fb37 	bl	8006178 <_free_r>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	f8ca 3000 	str.w	r3, [sl]
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f04f 30ff 	mov.w	r0, #4294967295
 8006b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b1a:	81a3      	strh	r3, [r4, #12]
 8006b1c:	e7e9      	b.n	8006af2 <__ssputs_r+0x8a>
	...

08006b20 <_svfiprintf_r>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	4698      	mov	r8, r3
 8006b26:	898b      	ldrh	r3, [r1, #12]
 8006b28:	4607      	mov	r7, r0
 8006b2a:	061b      	lsls	r3, r3, #24
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	4614      	mov	r4, r2
 8006b30:	b09d      	sub	sp, #116	@ 0x74
 8006b32:	d510      	bpl.n	8006b56 <_svfiprintf_r+0x36>
 8006b34:	690b      	ldr	r3, [r1, #16]
 8006b36:	b973      	cbnz	r3, 8006b56 <_svfiprintf_r+0x36>
 8006b38:	2140      	movs	r1, #64	@ 0x40
 8006b3a:	f7ff fb8f 	bl	800625c <_malloc_r>
 8006b3e:	6028      	str	r0, [r5, #0]
 8006b40:	6128      	str	r0, [r5, #16]
 8006b42:	b930      	cbnz	r0, 8006b52 <_svfiprintf_r+0x32>
 8006b44:	230c      	movs	r3, #12
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	f04f 30ff 	mov.w	r0, #4294967295
 8006b4c:	b01d      	add	sp, #116	@ 0x74
 8006b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b52:	2340      	movs	r3, #64	@ 0x40
 8006b54:	616b      	str	r3, [r5, #20]
 8006b56:	2300      	movs	r3, #0
 8006b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5a:	2320      	movs	r3, #32
 8006b5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006b60:	2330      	movs	r3, #48	@ 0x30
 8006b62:	f04f 0901 	mov.w	r9, #1
 8006b66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b6a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006d04 <_svfiprintf_r+0x1e4>
 8006b6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006b72:	4623      	mov	r3, r4
 8006b74:	469a      	mov	sl, r3
 8006b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b7a:	b10a      	cbz	r2, 8006b80 <_svfiprintf_r+0x60>
 8006b7c:	2a25      	cmp	r2, #37	@ 0x25
 8006b7e:	d1f9      	bne.n	8006b74 <_svfiprintf_r+0x54>
 8006b80:	ebba 0b04 	subs.w	fp, sl, r4
 8006b84:	d00b      	beq.n	8006b9e <_svfiprintf_r+0x7e>
 8006b86:	465b      	mov	r3, fp
 8006b88:	4622      	mov	r2, r4
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	4638      	mov	r0, r7
 8006b8e:	f7ff ff6b 	bl	8006a68 <__ssputs_r>
 8006b92:	3001      	adds	r0, #1
 8006b94:	f000 80a7 	beq.w	8006ce6 <_svfiprintf_r+0x1c6>
 8006b98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b9a:	445a      	add	r2, fp
 8006b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b9e:	f89a 3000 	ldrb.w	r3, [sl]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	f000 809f 	beq.w	8006ce6 <_svfiprintf_r+0x1c6>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	f04f 32ff 	mov.w	r2, #4294967295
 8006bae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bb2:	f10a 0a01 	add.w	sl, sl, #1
 8006bb6:	9304      	str	r3, [sp, #16]
 8006bb8:	9307      	str	r3, [sp, #28]
 8006bba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006bbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8006bc0:	4654      	mov	r4, sl
 8006bc2:	2205      	movs	r2, #5
 8006bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bc8:	484e      	ldr	r0, [pc, #312]	@ (8006d04 <_svfiprintf_r+0x1e4>)
 8006bca:	f7fe fc6a 	bl	80054a2 <memchr>
 8006bce:	9a04      	ldr	r2, [sp, #16]
 8006bd0:	b9d8      	cbnz	r0, 8006c0a <_svfiprintf_r+0xea>
 8006bd2:	06d0      	lsls	r0, r2, #27
 8006bd4:	bf44      	itt	mi
 8006bd6:	2320      	movmi	r3, #32
 8006bd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006bdc:	0711      	lsls	r1, r2, #28
 8006bde:	bf44      	itt	mi
 8006be0:	232b      	movmi	r3, #43	@ 0x2b
 8006be2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006be6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bea:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bec:	d015      	beq.n	8006c1a <_svfiprintf_r+0xfa>
 8006bee:	4654      	mov	r4, sl
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	f04f 0c0a 	mov.w	ip, #10
 8006bf6:	9a07      	ldr	r2, [sp, #28]
 8006bf8:	4621      	mov	r1, r4
 8006bfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bfe:	3b30      	subs	r3, #48	@ 0x30
 8006c00:	2b09      	cmp	r3, #9
 8006c02:	d94b      	bls.n	8006c9c <_svfiprintf_r+0x17c>
 8006c04:	b1b0      	cbz	r0, 8006c34 <_svfiprintf_r+0x114>
 8006c06:	9207      	str	r2, [sp, #28]
 8006c08:	e014      	b.n	8006c34 <_svfiprintf_r+0x114>
 8006c0a:	eba0 0308 	sub.w	r3, r0, r8
 8006c0e:	fa09 f303 	lsl.w	r3, r9, r3
 8006c12:	4313      	orrs	r3, r2
 8006c14:	46a2      	mov	sl, r4
 8006c16:	9304      	str	r3, [sp, #16]
 8006c18:	e7d2      	b.n	8006bc0 <_svfiprintf_r+0xa0>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	1d19      	adds	r1, r3, #4
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	9103      	str	r1, [sp, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	bfbb      	ittet	lt
 8006c26:	425b      	neglt	r3, r3
 8006c28:	f042 0202 	orrlt.w	r2, r2, #2
 8006c2c:	9307      	strge	r3, [sp, #28]
 8006c2e:	9307      	strlt	r3, [sp, #28]
 8006c30:	bfb8      	it	lt
 8006c32:	9204      	strlt	r2, [sp, #16]
 8006c34:	7823      	ldrb	r3, [r4, #0]
 8006c36:	2b2e      	cmp	r3, #46	@ 0x2e
 8006c38:	d10a      	bne.n	8006c50 <_svfiprintf_r+0x130>
 8006c3a:	7863      	ldrb	r3, [r4, #1]
 8006c3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c3e:	d132      	bne.n	8006ca6 <_svfiprintf_r+0x186>
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	3402      	adds	r4, #2
 8006c44:	1d1a      	adds	r2, r3, #4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	9203      	str	r2, [sp, #12]
 8006c4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006c4e:	9305      	str	r3, [sp, #20]
 8006c50:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006d08 <_svfiprintf_r+0x1e8>
 8006c54:	2203      	movs	r2, #3
 8006c56:	4650      	mov	r0, sl
 8006c58:	7821      	ldrb	r1, [r4, #0]
 8006c5a:	f7fe fc22 	bl	80054a2 <memchr>
 8006c5e:	b138      	cbz	r0, 8006c70 <_svfiprintf_r+0x150>
 8006c60:	2240      	movs	r2, #64	@ 0x40
 8006c62:	9b04      	ldr	r3, [sp, #16]
 8006c64:	eba0 000a 	sub.w	r0, r0, sl
 8006c68:	4082      	lsls	r2, r0
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	3401      	adds	r4, #1
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	2206      	movs	r2, #6
 8006c76:	4825      	ldr	r0, [pc, #148]	@ (8006d0c <_svfiprintf_r+0x1ec>)
 8006c78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006c7c:	f7fe fc11 	bl	80054a2 <memchr>
 8006c80:	2800      	cmp	r0, #0
 8006c82:	d036      	beq.n	8006cf2 <_svfiprintf_r+0x1d2>
 8006c84:	4b22      	ldr	r3, [pc, #136]	@ (8006d10 <_svfiprintf_r+0x1f0>)
 8006c86:	bb1b      	cbnz	r3, 8006cd0 <_svfiprintf_r+0x1b0>
 8006c88:	9b03      	ldr	r3, [sp, #12]
 8006c8a:	3307      	adds	r3, #7
 8006c8c:	f023 0307 	bic.w	r3, r3, #7
 8006c90:	3308      	adds	r3, #8
 8006c92:	9303      	str	r3, [sp, #12]
 8006c94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c96:	4433      	add	r3, r6
 8006c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c9a:	e76a      	b.n	8006b72 <_svfiprintf_r+0x52>
 8006c9c:	460c      	mov	r4, r1
 8006c9e:	2001      	movs	r0, #1
 8006ca0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ca4:	e7a8      	b.n	8006bf8 <_svfiprintf_r+0xd8>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	f04f 0c0a 	mov.w	ip, #10
 8006cac:	4619      	mov	r1, r3
 8006cae:	3401      	adds	r4, #1
 8006cb0:	9305      	str	r3, [sp, #20]
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cb8:	3a30      	subs	r2, #48	@ 0x30
 8006cba:	2a09      	cmp	r2, #9
 8006cbc:	d903      	bls.n	8006cc6 <_svfiprintf_r+0x1a6>
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d0c6      	beq.n	8006c50 <_svfiprintf_r+0x130>
 8006cc2:	9105      	str	r1, [sp, #20]
 8006cc4:	e7c4      	b.n	8006c50 <_svfiprintf_r+0x130>
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	2301      	movs	r3, #1
 8006cca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cce:	e7f0      	b.n	8006cb2 <_svfiprintf_r+0x192>
 8006cd0:	ab03      	add	r3, sp, #12
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	462a      	mov	r2, r5
 8006cd6:	4638      	mov	r0, r7
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d14 <_svfiprintf_r+0x1f4>)
 8006cda:	a904      	add	r1, sp, #16
 8006cdc:	f7fd fe6a 	bl	80049b4 <_printf_float>
 8006ce0:	1c42      	adds	r2, r0, #1
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	d1d6      	bne.n	8006c94 <_svfiprintf_r+0x174>
 8006ce6:	89ab      	ldrh	r3, [r5, #12]
 8006ce8:	065b      	lsls	r3, r3, #25
 8006cea:	f53f af2d 	bmi.w	8006b48 <_svfiprintf_r+0x28>
 8006cee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006cf0:	e72c      	b.n	8006b4c <_svfiprintf_r+0x2c>
 8006cf2:	ab03      	add	r3, sp, #12
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	462a      	mov	r2, r5
 8006cf8:	4638      	mov	r0, r7
 8006cfa:	4b06      	ldr	r3, [pc, #24]	@ (8006d14 <_svfiprintf_r+0x1f4>)
 8006cfc:	a904      	add	r1, sp, #16
 8006cfe:	f7fe f8f7 	bl	8004ef0 <_printf_i>
 8006d02:	e7ed      	b.n	8006ce0 <_svfiprintf_r+0x1c0>
 8006d04:	0800771c 	.word	0x0800771c
 8006d08:	08007722 	.word	0x08007722
 8006d0c:	08007726 	.word	0x08007726
 8006d10:	080049b5 	.word	0x080049b5
 8006d14:	08006a69 	.word	0x08006a69

08006d18 <__sflush_r>:
 8006d18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1e:	0716      	lsls	r6, r2, #28
 8006d20:	4605      	mov	r5, r0
 8006d22:	460c      	mov	r4, r1
 8006d24:	d454      	bmi.n	8006dd0 <__sflush_r+0xb8>
 8006d26:	684b      	ldr	r3, [r1, #4]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dc02      	bgt.n	8006d32 <__sflush_r+0x1a>
 8006d2c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	dd48      	ble.n	8006dc4 <__sflush_r+0xac>
 8006d32:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d34:	2e00      	cmp	r6, #0
 8006d36:	d045      	beq.n	8006dc4 <__sflush_r+0xac>
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d3e:	682f      	ldr	r7, [r5, #0]
 8006d40:	6a21      	ldr	r1, [r4, #32]
 8006d42:	602b      	str	r3, [r5, #0]
 8006d44:	d030      	beq.n	8006da8 <__sflush_r+0x90>
 8006d46:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	0759      	lsls	r1, r3, #29
 8006d4c:	d505      	bpl.n	8006d5a <__sflush_r+0x42>
 8006d4e:	6863      	ldr	r3, [r4, #4]
 8006d50:	1ad2      	subs	r2, r2, r3
 8006d52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d54:	b10b      	cbz	r3, 8006d5a <__sflush_r+0x42>
 8006d56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d58:	1ad2      	subs	r2, r2, r3
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d60:	6a21      	ldr	r1, [r4, #32]
 8006d62:	47b0      	blx	r6
 8006d64:	1c43      	adds	r3, r0, #1
 8006d66:	89a3      	ldrh	r3, [r4, #12]
 8006d68:	d106      	bne.n	8006d78 <__sflush_r+0x60>
 8006d6a:	6829      	ldr	r1, [r5, #0]
 8006d6c:	291d      	cmp	r1, #29
 8006d6e:	d82b      	bhi.n	8006dc8 <__sflush_r+0xb0>
 8006d70:	4a28      	ldr	r2, [pc, #160]	@ (8006e14 <__sflush_r+0xfc>)
 8006d72:	40ca      	lsrs	r2, r1
 8006d74:	07d6      	lsls	r6, r2, #31
 8006d76:	d527      	bpl.n	8006dc8 <__sflush_r+0xb0>
 8006d78:	2200      	movs	r2, #0
 8006d7a:	6062      	str	r2, [r4, #4]
 8006d7c:	6922      	ldr	r2, [r4, #16]
 8006d7e:	04d9      	lsls	r1, r3, #19
 8006d80:	6022      	str	r2, [r4, #0]
 8006d82:	d504      	bpl.n	8006d8e <__sflush_r+0x76>
 8006d84:	1c42      	adds	r2, r0, #1
 8006d86:	d101      	bne.n	8006d8c <__sflush_r+0x74>
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	b903      	cbnz	r3, 8006d8e <__sflush_r+0x76>
 8006d8c:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d8e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d90:	602f      	str	r7, [r5, #0]
 8006d92:	b1b9      	cbz	r1, 8006dc4 <__sflush_r+0xac>
 8006d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d98:	4299      	cmp	r1, r3
 8006d9a:	d002      	beq.n	8006da2 <__sflush_r+0x8a>
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f7ff f9eb 	bl	8006178 <_free_r>
 8006da2:	2300      	movs	r3, #0
 8006da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006da6:	e00d      	b.n	8006dc4 <__sflush_r+0xac>
 8006da8:	2301      	movs	r3, #1
 8006daa:	4628      	mov	r0, r5
 8006dac:	47b0      	blx	r6
 8006dae:	4602      	mov	r2, r0
 8006db0:	1c50      	adds	r0, r2, #1
 8006db2:	d1c9      	bne.n	8006d48 <__sflush_r+0x30>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0c6      	beq.n	8006d48 <__sflush_r+0x30>
 8006dba:	2b1d      	cmp	r3, #29
 8006dbc:	d001      	beq.n	8006dc2 <__sflush_r+0xaa>
 8006dbe:	2b16      	cmp	r3, #22
 8006dc0:	d11d      	bne.n	8006dfe <__sflush_r+0xe6>
 8006dc2:	602f      	str	r7, [r5, #0]
 8006dc4:	2000      	movs	r0, #0
 8006dc6:	e021      	b.n	8006e0c <__sflush_r+0xf4>
 8006dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dcc:	b21b      	sxth	r3, r3
 8006dce:	e01a      	b.n	8006e06 <__sflush_r+0xee>
 8006dd0:	690f      	ldr	r7, [r1, #16]
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	d0f6      	beq.n	8006dc4 <__sflush_r+0xac>
 8006dd6:	0793      	lsls	r3, r2, #30
 8006dd8:	bf18      	it	ne
 8006dda:	2300      	movne	r3, #0
 8006ddc:	680e      	ldr	r6, [r1, #0]
 8006dde:	bf08      	it	eq
 8006de0:	694b      	ldreq	r3, [r1, #20]
 8006de2:	1bf6      	subs	r6, r6, r7
 8006de4:	600f      	str	r7, [r1, #0]
 8006de6:	608b      	str	r3, [r1, #8]
 8006de8:	2e00      	cmp	r6, #0
 8006dea:	ddeb      	ble.n	8006dc4 <__sflush_r+0xac>
 8006dec:	4633      	mov	r3, r6
 8006dee:	463a      	mov	r2, r7
 8006df0:	4628      	mov	r0, r5
 8006df2:	6a21      	ldr	r1, [r4, #32]
 8006df4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006df8:	47e0      	blx	ip
 8006dfa:	2800      	cmp	r0, #0
 8006dfc:	dc07      	bgt.n	8006e0e <__sflush_r+0xf6>
 8006dfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e06:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0a:	81a3      	strh	r3, [r4, #12]
 8006e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e0e:	4407      	add	r7, r0
 8006e10:	1a36      	subs	r6, r6, r0
 8006e12:	e7e9      	b.n	8006de8 <__sflush_r+0xd0>
 8006e14:	20400001 	.word	0x20400001

08006e18 <_fflush_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b913      	cbnz	r3, 8006e28 <_fflush_r+0x10>
 8006e22:	2500      	movs	r5, #0
 8006e24:	4628      	mov	r0, r5
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	b118      	cbz	r0, 8006e32 <_fflush_r+0x1a>
 8006e2a:	6a03      	ldr	r3, [r0, #32]
 8006e2c:	b90b      	cbnz	r3, 8006e32 <_fflush_r+0x1a>
 8006e2e:	f7fe fa09 	bl	8005244 <__sinit>
 8006e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f3      	beq.n	8006e22 <_fflush_r+0xa>
 8006e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e3c:	07d0      	lsls	r0, r2, #31
 8006e3e:	d404      	bmi.n	8006e4a <_fflush_r+0x32>
 8006e40:	0599      	lsls	r1, r3, #22
 8006e42:	d402      	bmi.n	8006e4a <_fflush_r+0x32>
 8006e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e46:	f7fe fb2a 	bl	800549e <__retarget_lock_acquire_recursive>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f7ff ff63 	bl	8006d18 <__sflush_r>
 8006e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e54:	4605      	mov	r5, r0
 8006e56:	07da      	lsls	r2, r3, #31
 8006e58:	d4e4      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	059b      	lsls	r3, r3, #22
 8006e5e:	d4e1      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e62:	f7fe fb1d 	bl	80054a0 <__retarget_lock_release_recursive>
 8006e66:	e7dd      	b.n	8006e24 <_fflush_r+0xc>

08006e68 <memmove>:
 8006e68:	4288      	cmp	r0, r1
 8006e6a:	b510      	push	{r4, lr}
 8006e6c:	eb01 0402 	add.w	r4, r1, r2
 8006e70:	d902      	bls.n	8006e78 <memmove+0x10>
 8006e72:	4284      	cmp	r4, r0
 8006e74:	4623      	mov	r3, r4
 8006e76:	d807      	bhi.n	8006e88 <memmove+0x20>
 8006e78:	1e43      	subs	r3, r0, #1
 8006e7a:	42a1      	cmp	r1, r4
 8006e7c:	d008      	beq.n	8006e90 <memmove+0x28>
 8006e7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e86:	e7f8      	b.n	8006e7a <memmove+0x12>
 8006e88:	4601      	mov	r1, r0
 8006e8a:	4402      	add	r2, r0
 8006e8c:	428a      	cmp	r2, r1
 8006e8e:	d100      	bne.n	8006e92 <memmove+0x2a>
 8006e90:	bd10      	pop	{r4, pc}
 8006e92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e9a:	e7f7      	b.n	8006e8c <memmove+0x24>

08006e9c <_sbrk_r>:
 8006e9c:	b538      	push	{r3, r4, r5, lr}
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	4d05      	ldr	r5, [pc, #20]	@ (8006eb8 <_sbrk_r+0x1c>)
 8006ea2:	4604      	mov	r4, r0
 8006ea4:	4608      	mov	r0, r1
 8006ea6:	602b      	str	r3, [r5, #0]
 8006ea8:	f7fa fefa 	bl	8001ca0 <_sbrk>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_sbrk_r+0x1a>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_sbrk_r+0x1a>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	20000404 	.word	0x20000404

08006ebc <memcpy>:
 8006ebc:	440a      	add	r2, r1
 8006ebe:	4291      	cmp	r1, r2
 8006ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ec4:	d100      	bne.n	8006ec8 <memcpy+0xc>
 8006ec6:	4770      	bx	lr
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ece:	4291      	cmp	r1, r2
 8006ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ed4:	d1f9      	bne.n	8006eca <memcpy+0xe>
 8006ed6:	bd10      	pop	{r4, pc}

08006ed8 <__assert_func>:
 8006ed8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006eda:	4614      	mov	r4, r2
 8006edc:	461a      	mov	r2, r3
 8006ede:	4b09      	ldr	r3, [pc, #36]	@ (8006f04 <__assert_func+0x2c>)
 8006ee0:	4605      	mov	r5, r0
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68d8      	ldr	r0, [r3, #12]
 8006ee6:	b14c      	cbz	r4, 8006efc <__assert_func+0x24>
 8006ee8:	4b07      	ldr	r3, [pc, #28]	@ (8006f08 <__assert_func+0x30>)
 8006eea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006eee:	9100      	str	r1, [sp, #0]
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	4906      	ldr	r1, [pc, #24]	@ (8006f0c <__assert_func+0x34>)
 8006ef4:	f000 f870 	bl	8006fd8 <fiprintf>
 8006ef8:	f000 f880 	bl	8006ffc <abort>
 8006efc:	4b04      	ldr	r3, [pc, #16]	@ (8006f10 <__assert_func+0x38>)
 8006efe:	461c      	mov	r4, r3
 8006f00:	e7f3      	b.n	8006eea <__assert_func+0x12>
 8006f02:	bf00      	nop
 8006f04:	2000001c 	.word	0x2000001c
 8006f08:	08007737 	.word	0x08007737
 8006f0c:	08007744 	.word	0x08007744
 8006f10:	08007772 	.word	0x08007772

08006f14 <_calloc_r>:
 8006f14:	b570      	push	{r4, r5, r6, lr}
 8006f16:	fba1 5402 	umull	r5, r4, r1, r2
 8006f1a:	b934      	cbnz	r4, 8006f2a <_calloc_r+0x16>
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	f7ff f99d 	bl	800625c <_malloc_r>
 8006f22:	4606      	mov	r6, r0
 8006f24:	b928      	cbnz	r0, 8006f32 <_calloc_r+0x1e>
 8006f26:	4630      	mov	r0, r6
 8006f28:	bd70      	pop	{r4, r5, r6, pc}
 8006f2a:	220c      	movs	r2, #12
 8006f2c:	2600      	movs	r6, #0
 8006f2e:	6002      	str	r2, [r0, #0]
 8006f30:	e7f9      	b.n	8006f26 <_calloc_r+0x12>
 8006f32:	462a      	mov	r2, r5
 8006f34:	4621      	mov	r1, r4
 8006f36:	f7fe fa34 	bl	80053a2 <memset>
 8006f3a:	e7f4      	b.n	8006f26 <_calloc_r+0x12>

08006f3c <__ascii_mbtowc>:
 8006f3c:	b082      	sub	sp, #8
 8006f3e:	b901      	cbnz	r1, 8006f42 <__ascii_mbtowc+0x6>
 8006f40:	a901      	add	r1, sp, #4
 8006f42:	b142      	cbz	r2, 8006f56 <__ascii_mbtowc+0x1a>
 8006f44:	b14b      	cbz	r3, 8006f5a <__ascii_mbtowc+0x1e>
 8006f46:	7813      	ldrb	r3, [r2, #0]
 8006f48:	600b      	str	r3, [r1, #0]
 8006f4a:	7812      	ldrb	r2, [r2, #0]
 8006f4c:	1e10      	subs	r0, r2, #0
 8006f4e:	bf18      	it	ne
 8006f50:	2001      	movne	r0, #1
 8006f52:	b002      	add	sp, #8
 8006f54:	4770      	bx	lr
 8006f56:	4610      	mov	r0, r2
 8006f58:	e7fb      	b.n	8006f52 <__ascii_mbtowc+0x16>
 8006f5a:	f06f 0001 	mvn.w	r0, #1
 8006f5e:	e7f8      	b.n	8006f52 <__ascii_mbtowc+0x16>

08006f60 <_realloc_r>:
 8006f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f64:	4607      	mov	r7, r0
 8006f66:	4614      	mov	r4, r2
 8006f68:	460d      	mov	r5, r1
 8006f6a:	b921      	cbnz	r1, 8006f76 <_realloc_r+0x16>
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f72:	f7ff b973 	b.w	800625c <_malloc_r>
 8006f76:	b92a      	cbnz	r2, 8006f84 <_realloc_r+0x24>
 8006f78:	f7ff f8fe 	bl	8006178 <_free_r>
 8006f7c:	4625      	mov	r5, r4
 8006f7e:	4628      	mov	r0, r5
 8006f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f84:	f000 f841 	bl	800700a <_malloc_usable_size_r>
 8006f88:	4284      	cmp	r4, r0
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	d802      	bhi.n	8006f94 <_realloc_r+0x34>
 8006f8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f92:	d8f4      	bhi.n	8006f7e <_realloc_r+0x1e>
 8006f94:	4621      	mov	r1, r4
 8006f96:	4638      	mov	r0, r7
 8006f98:	f7ff f960 	bl	800625c <_malloc_r>
 8006f9c:	4680      	mov	r8, r0
 8006f9e:	b908      	cbnz	r0, 8006fa4 <_realloc_r+0x44>
 8006fa0:	4645      	mov	r5, r8
 8006fa2:	e7ec      	b.n	8006f7e <_realloc_r+0x1e>
 8006fa4:	42b4      	cmp	r4, r6
 8006fa6:	4622      	mov	r2, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	bf28      	it	cs
 8006fac:	4632      	movcs	r2, r6
 8006fae:	f7ff ff85 	bl	8006ebc <memcpy>
 8006fb2:	4629      	mov	r1, r5
 8006fb4:	4638      	mov	r0, r7
 8006fb6:	f7ff f8df 	bl	8006178 <_free_r>
 8006fba:	e7f1      	b.n	8006fa0 <_realloc_r+0x40>

08006fbc <__ascii_wctomb>:
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	b141      	cbz	r1, 8006fd4 <__ascii_wctomb+0x18>
 8006fc2:	2aff      	cmp	r2, #255	@ 0xff
 8006fc4:	d904      	bls.n	8006fd0 <__ascii_wctomb+0x14>
 8006fc6:	228a      	movs	r2, #138	@ 0x8a
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	601a      	str	r2, [r3, #0]
 8006fce:	4770      	bx	lr
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	700a      	strb	r2, [r1, #0]
 8006fd4:	4770      	bx	lr
	...

08006fd8 <fiprintf>:
 8006fd8:	b40e      	push	{r1, r2, r3}
 8006fda:	b503      	push	{r0, r1, lr}
 8006fdc:	4601      	mov	r1, r0
 8006fde:	ab03      	add	r3, sp, #12
 8006fe0:	4805      	ldr	r0, [pc, #20]	@ (8006ff8 <fiprintf+0x20>)
 8006fe2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe6:	6800      	ldr	r0, [r0, #0]
 8006fe8:	9301      	str	r3, [sp, #4]
 8006fea:	f000 f83d 	bl	8007068 <_vfiprintf_r>
 8006fee:	b002      	add	sp, #8
 8006ff0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff4:	b003      	add	sp, #12
 8006ff6:	4770      	bx	lr
 8006ff8:	2000001c 	.word	0x2000001c

08006ffc <abort>:
 8006ffc:	2006      	movs	r0, #6
 8006ffe:	b508      	push	{r3, lr}
 8007000:	f000 fa06 	bl	8007410 <raise>
 8007004:	2001      	movs	r0, #1
 8007006:	f7fa fdd6 	bl	8001bb6 <_exit>

0800700a <_malloc_usable_size_r>:
 800700a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800700e:	1f18      	subs	r0, r3, #4
 8007010:	2b00      	cmp	r3, #0
 8007012:	bfbc      	itt	lt
 8007014:	580b      	ldrlt	r3, [r1, r0]
 8007016:	18c0      	addlt	r0, r0, r3
 8007018:	4770      	bx	lr

0800701a <__sfputc_r>:
 800701a:	6893      	ldr	r3, [r2, #8]
 800701c:	b410      	push	{r4}
 800701e:	3b01      	subs	r3, #1
 8007020:	2b00      	cmp	r3, #0
 8007022:	6093      	str	r3, [r2, #8]
 8007024:	da07      	bge.n	8007036 <__sfputc_r+0x1c>
 8007026:	6994      	ldr	r4, [r2, #24]
 8007028:	42a3      	cmp	r3, r4
 800702a:	db01      	blt.n	8007030 <__sfputc_r+0x16>
 800702c:	290a      	cmp	r1, #10
 800702e:	d102      	bne.n	8007036 <__sfputc_r+0x1c>
 8007030:	bc10      	pop	{r4}
 8007032:	f000 b931 	b.w	8007298 <__swbuf_r>
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	1c58      	adds	r0, r3, #1
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	7019      	strb	r1, [r3, #0]
 800703e:	4608      	mov	r0, r1
 8007040:	bc10      	pop	{r4}
 8007042:	4770      	bx	lr

08007044 <__sfputs_r>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	4606      	mov	r6, r0
 8007048:	460f      	mov	r7, r1
 800704a:	4614      	mov	r4, r2
 800704c:	18d5      	adds	r5, r2, r3
 800704e:	42ac      	cmp	r4, r5
 8007050:	d101      	bne.n	8007056 <__sfputs_r+0x12>
 8007052:	2000      	movs	r0, #0
 8007054:	e007      	b.n	8007066 <__sfputs_r+0x22>
 8007056:	463a      	mov	r2, r7
 8007058:	4630      	mov	r0, r6
 800705a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800705e:	f7ff ffdc 	bl	800701a <__sfputc_r>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d1f3      	bne.n	800704e <__sfputs_r+0xa>
 8007066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007068 <_vfiprintf_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	460d      	mov	r5, r1
 800706e:	4614      	mov	r4, r2
 8007070:	4698      	mov	r8, r3
 8007072:	4606      	mov	r6, r0
 8007074:	b09d      	sub	sp, #116	@ 0x74
 8007076:	b118      	cbz	r0, 8007080 <_vfiprintf_r+0x18>
 8007078:	6a03      	ldr	r3, [r0, #32]
 800707a:	b90b      	cbnz	r3, 8007080 <_vfiprintf_r+0x18>
 800707c:	f7fe f8e2 	bl	8005244 <__sinit>
 8007080:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007082:	07d9      	lsls	r1, r3, #31
 8007084:	d405      	bmi.n	8007092 <_vfiprintf_r+0x2a>
 8007086:	89ab      	ldrh	r3, [r5, #12]
 8007088:	059a      	lsls	r2, r3, #22
 800708a:	d402      	bmi.n	8007092 <_vfiprintf_r+0x2a>
 800708c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800708e:	f7fe fa06 	bl	800549e <__retarget_lock_acquire_recursive>
 8007092:	89ab      	ldrh	r3, [r5, #12]
 8007094:	071b      	lsls	r3, r3, #28
 8007096:	d501      	bpl.n	800709c <_vfiprintf_r+0x34>
 8007098:	692b      	ldr	r3, [r5, #16]
 800709a:	b99b      	cbnz	r3, 80070c4 <_vfiprintf_r+0x5c>
 800709c:	4629      	mov	r1, r5
 800709e:	4630      	mov	r0, r6
 80070a0:	f000 f938 	bl	8007314 <__swsetup_r>
 80070a4:	b170      	cbz	r0, 80070c4 <_vfiprintf_r+0x5c>
 80070a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80070a8:	07dc      	lsls	r4, r3, #31
 80070aa:	d504      	bpl.n	80070b6 <_vfiprintf_r+0x4e>
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295
 80070b0:	b01d      	add	sp, #116	@ 0x74
 80070b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	0598      	lsls	r0, r3, #22
 80070ba:	d4f7      	bmi.n	80070ac <_vfiprintf_r+0x44>
 80070bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80070be:	f7fe f9ef 	bl	80054a0 <__retarget_lock_release_recursive>
 80070c2:	e7f3      	b.n	80070ac <_vfiprintf_r+0x44>
 80070c4:	2300      	movs	r3, #0
 80070c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80070c8:	2320      	movs	r3, #32
 80070ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070ce:	2330      	movs	r3, #48	@ 0x30
 80070d0:	f04f 0901 	mov.w	r9, #1
 80070d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070d8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007284 <_vfiprintf_r+0x21c>
 80070dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070e0:	4623      	mov	r3, r4
 80070e2:	469a      	mov	sl, r3
 80070e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070e8:	b10a      	cbz	r2, 80070ee <_vfiprintf_r+0x86>
 80070ea:	2a25      	cmp	r2, #37	@ 0x25
 80070ec:	d1f9      	bne.n	80070e2 <_vfiprintf_r+0x7a>
 80070ee:	ebba 0b04 	subs.w	fp, sl, r4
 80070f2:	d00b      	beq.n	800710c <_vfiprintf_r+0xa4>
 80070f4:	465b      	mov	r3, fp
 80070f6:	4622      	mov	r2, r4
 80070f8:	4629      	mov	r1, r5
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7ff ffa2 	bl	8007044 <__sfputs_r>
 8007100:	3001      	adds	r0, #1
 8007102:	f000 80a7 	beq.w	8007254 <_vfiprintf_r+0x1ec>
 8007106:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007108:	445a      	add	r2, fp
 800710a:	9209      	str	r2, [sp, #36]	@ 0x24
 800710c:	f89a 3000 	ldrb.w	r3, [sl]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 809f 	beq.w	8007254 <_vfiprintf_r+0x1ec>
 8007116:	2300      	movs	r3, #0
 8007118:	f04f 32ff 	mov.w	r2, #4294967295
 800711c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007120:	f10a 0a01 	add.w	sl, sl, #1
 8007124:	9304      	str	r3, [sp, #16]
 8007126:	9307      	str	r3, [sp, #28]
 8007128:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800712c:	931a      	str	r3, [sp, #104]	@ 0x68
 800712e:	4654      	mov	r4, sl
 8007130:	2205      	movs	r2, #5
 8007132:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007136:	4853      	ldr	r0, [pc, #332]	@ (8007284 <_vfiprintf_r+0x21c>)
 8007138:	f7fe f9b3 	bl	80054a2 <memchr>
 800713c:	9a04      	ldr	r2, [sp, #16]
 800713e:	b9d8      	cbnz	r0, 8007178 <_vfiprintf_r+0x110>
 8007140:	06d1      	lsls	r1, r2, #27
 8007142:	bf44      	itt	mi
 8007144:	2320      	movmi	r3, #32
 8007146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800714a:	0713      	lsls	r3, r2, #28
 800714c:	bf44      	itt	mi
 800714e:	232b      	movmi	r3, #43	@ 0x2b
 8007150:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007154:	f89a 3000 	ldrb.w	r3, [sl]
 8007158:	2b2a      	cmp	r3, #42	@ 0x2a
 800715a:	d015      	beq.n	8007188 <_vfiprintf_r+0x120>
 800715c:	4654      	mov	r4, sl
 800715e:	2000      	movs	r0, #0
 8007160:	f04f 0c0a 	mov.w	ip, #10
 8007164:	9a07      	ldr	r2, [sp, #28]
 8007166:	4621      	mov	r1, r4
 8007168:	f811 3b01 	ldrb.w	r3, [r1], #1
 800716c:	3b30      	subs	r3, #48	@ 0x30
 800716e:	2b09      	cmp	r3, #9
 8007170:	d94b      	bls.n	800720a <_vfiprintf_r+0x1a2>
 8007172:	b1b0      	cbz	r0, 80071a2 <_vfiprintf_r+0x13a>
 8007174:	9207      	str	r2, [sp, #28]
 8007176:	e014      	b.n	80071a2 <_vfiprintf_r+0x13a>
 8007178:	eba0 0308 	sub.w	r3, r0, r8
 800717c:	fa09 f303 	lsl.w	r3, r9, r3
 8007180:	4313      	orrs	r3, r2
 8007182:	46a2      	mov	sl, r4
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	e7d2      	b.n	800712e <_vfiprintf_r+0xc6>
 8007188:	9b03      	ldr	r3, [sp, #12]
 800718a:	1d19      	adds	r1, r3, #4
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	9103      	str	r1, [sp, #12]
 8007190:	2b00      	cmp	r3, #0
 8007192:	bfbb      	ittet	lt
 8007194:	425b      	neglt	r3, r3
 8007196:	f042 0202 	orrlt.w	r2, r2, #2
 800719a:	9307      	strge	r3, [sp, #28]
 800719c:	9307      	strlt	r3, [sp, #28]
 800719e:	bfb8      	it	lt
 80071a0:	9204      	strlt	r2, [sp, #16]
 80071a2:	7823      	ldrb	r3, [r4, #0]
 80071a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80071a6:	d10a      	bne.n	80071be <_vfiprintf_r+0x156>
 80071a8:	7863      	ldrb	r3, [r4, #1]
 80071aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80071ac:	d132      	bne.n	8007214 <_vfiprintf_r+0x1ac>
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	3402      	adds	r4, #2
 80071b2:	1d1a      	adds	r2, r3, #4
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	9203      	str	r2, [sp, #12]
 80071b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071bc:	9305      	str	r3, [sp, #20]
 80071be:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007288 <_vfiprintf_r+0x220>
 80071c2:	2203      	movs	r2, #3
 80071c4:	4650      	mov	r0, sl
 80071c6:	7821      	ldrb	r1, [r4, #0]
 80071c8:	f7fe f96b 	bl	80054a2 <memchr>
 80071cc:	b138      	cbz	r0, 80071de <_vfiprintf_r+0x176>
 80071ce:	2240      	movs	r2, #64	@ 0x40
 80071d0:	9b04      	ldr	r3, [sp, #16]
 80071d2:	eba0 000a 	sub.w	r0, r0, sl
 80071d6:	4082      	lsls	r2, r0
 80071d8:	4313      	orrs	r3, r2
 80071da:	3401      	adds	r4, #1
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e2:	2206      	movs	r2, #6
 80071e4:	4829      	ldr	r0, [pc, #164]	@ (800728c <_vfiprintf_r+0x224>)
 80071e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071ea:	f7fe f95a 	bl	80054a2 <memchr>
 80071ee:	2800      	cmp	r0, #0
 80071f0:	d03f      	beq.n	8007272 <_vfiprintf_r+0x20a>
 80071f2:	4b27      	ldr	r3, [pc, #156]	@ (8007290 <_vfiprintf_r+0x228>)
 80071f4:	bb1b      	cbnz	r3, 800723e <_vfiprintf_r+0x1d6>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	3307      	adds	r3, #7
 80071fa:	f023 0307 	bic.w	r3, r3, #7
 80071fe:	3308      	adds	r3, #8
 8007200:	9303      	str	r3, [sp, #12]
 8007202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007204:	443b      	add	r3, r7
 8007206:	9309      	str	r3, [sp, #36]	@ 0x24
 8007208:	e76a      	b.n	80070e0 <_vfiprintf_r+0x78>
 800720a:	460c      	mov	r4, r1
 800720c:	2001      	movs	r0, #1
 800720e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007212:	e7a8      	b.n	8007166 <_vfiprintf_r+0xfe>
 8007214:	2300      	movs	r3, #0
 8007216:	f04f 0c0a 	mov.w	ip, #10
 800721a:	4619      	mov	r1, r3
 800721c:	3401      	adds	r4, #1
 800721e:	9305      	str	r3, [sp, #20]
 8007220:	4620      	mov	r0, r4
 8007222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007226:	3a30      	subs	r2, #48	@ 0x30
 8007228:	2a09      	cmp	r2, #9
 800722a:	d903      	bls.n	8007234 <_vfiprintf_r+0x1cc>
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0c6      	beq.n	80071be <_vfiprintf_r+0x156>
 8007230:	9105      	str	r1, [sp, #20]
 8007232:	e7c4      	b.n	80071be <_vfiprintf_r+0x156>
 8007234:	4604      	mov	r4, r0
 8007236:	2301      	movs	r3, #1
 8007238:	fb0c 2101 	mla	r1, ip, r1, r2
 800723c:	e7f0      	b.n	8007220 <_vfiprintf_r+0x1b8>
 800723e:	ab03      	add	r3, sp, #12
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	462a      	mov	r2, r5
 8007244:	4630      	mov	r0, r6
 8007246:	4b13      	ldr	r3, [pc, #76]	@ (8007294 <_vfiprintf_r+0x22c>)
 8007248:	a904      	add	r1, sp, #16
 800724a:	f7fd fbb3 	bl	80049b4 <_printf_float>
 800724e:	4607      	mov	r7, r0
 8007250:	1c78      	adds	r0, r7, #1
 8007252:	d1d6      	bne.n	8007202 <_vfiprintf_r+0x19a>
 8007254:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007256:	07d9      	lsls	r1, r3, #31
 8007258:	d405      	bmi.n	8007266 <_vfiprintf_r+0x1fe>
 800725a:	89ab      	ldrh	r3, [r5, #12]
 800725c:	059a      	lsls	r2, r3, #22
 800725e:	d402      	bmi.n	8007266 <_vfiprintf_r+0x1fe>
 8007260:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007262:	f7fe f91d 	bl	80054a0 <__retarget_lock_release_recursive>
 8007266:	89ab      	ldrh	r3, [r5, #12]
 8007268:	065b      	lsls	r3, r3, #25
 800726a:	f53f af1f 	bmi.w	80070ac <_vfiprintf_r+0x44>
 800726e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007270:	e71e      	b.n	80070b0 <_vfiprintf_r+0x48>
 8007272:	ab03      	add	r3, sp, #12
 8007274:	9300      	str	r3, [sp, #0]
 8007276:	462a      	mov	r2, r5
 8007278:	4630      	mov	r0, r6
 800727a:	4b06      	ldr	r3, [pc, #24]	@ (8007294 <_vfiprintf_r+0x22c>)
 800727c:	a904      	add	r1, sp, #16
 800727e:	f7fd fe37 	bl	8004ef0 <_printf_i>
 8007282:	e7e4      	b.n	800724e <_vfiprintf_r+0x1e6>
 8007284:	0800771c 	.word	0x0800771c
 8007288:	08007722 	.word	0x08007722
 800728c:	08007726 	.word	0x08007726
 8007290:	080049b5 	.word	0x080049b5
 8007294:	08007045 	.word	0x08007045

08007298 <__swbuf_r>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	460e      	mov	r6, r1
 800729c:	4614      	mov	r4, r2
 800729e:	4605      	mov	r5, r0
 80072a0:	b118      	cbz	r0, 80072aa <__swbuf_r+0x12>
 80072a2:	6a03      	ldr	r3, [r0, #32]
 80072a4:	b90b      	cbnz	r3, 80072aa <__swbuf_r+0x12>
 80072a6:	f7fd ffcd 	bl	8005244 <__sinit>
 80072aa:	69a3      	ldr	r3, [r4, #24]
 80072ac:	60a3      	str	r3, [r4, #8]
 80072ae:	89a3      	ldrh	r3, [r4, #12]
 80072b0:	071a      	lsls	r2, r3, #28
 80072b2:	d501      	bpl.n	80072b8 <__swbuf_r+0x20>
 80072b4:	6923      	ldr	r3, [r4, #16]
 80072b6:	b943      	cbnz	r3, 80072ca <__swbuf_r+0x32>
 80072b8:	4621      	mov	r1, r4
 80072ba:	4628      	mov	r0, r5
 80072bc:	f000 f82a 	bl	8007314 <__swsetup_r>
 80072c0:	b118      	cbz	r0, 80072ca <__swbuf_r+0x32>
 80072c2:	f04f 37ff 	mov.w	r7, #4294967295
 80072c6:	4638      	mov	r0, r7
 80072c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	6922      	ldr	r2, [r4, #16]
 80072ce:	b2f6      	uxtb	r6, r6
 80072d0:	1a98      	subs	r0, r3, r2
 80072d2:	6963      	ldr	r3, [r4, #20]
 80072d4:	4637      	mov	r7, r6
 80072d6:	4283      	cmp	r3, r0
 80072d8:	dc05      	bgt.n	80072e6 <__swbuf_r+0x4e>
 80072da:	4621      	mov	r1, r4
 80072dc:	4628      	mov	r0, r5
 80072de:	f7ff fd9b 	bl	8006e18 <_fflush_r>
 80072e2:	2800      	cmp	r0, #0
 80072e4:	d1ed      	bne.n	80072c2 <__swbuf_r+0x2a>
 80072e6:	68a3      	ldr	r3, [r4, #8]
 80072e8:	3b01      	subs	r3, #1
 80072ea:	60a3      	str	r3, [r4, #8]
 80072ec:	6823      	ldr	r3, [r4, #0]
 80072ee:	1c5a      	adds	r2, r3, #1
 80072f0:	6022      	str	r2, [r4, #0]
 80072f2:	701e      	strb	r6, [r3, #0]
 80072f4:	6962      	ldr	r2, [r4, #20]
 80072f6:	1c43      	adds	r3, r0, #1
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d004      	beq.n	8007306 <__swbuf_r+0x6e>
 80072fc:	89a3      	ldrh	r3, [r4, #12]
 80072fe:	07db      	lsls	r3, r3, #31
 8007300:	d5e1      	bpl.n	80072c6 <__swbuf_r+0x2e>
 8007302:	2e0a      	cmp	r6, #10
 8007304:	d1df      	bne.n	80072c6 <__swbuf_r+0x2e>
 8007306:	4621      	mov	r1, r4
 8007308:	4628      	mov	r0, r5
 800730a:	f7ff fd85 	bl	8006e18 <_fflush_r>
 800730e:	2800      	cmp	r0, #0
 8007310:	d0d9      	beq.n	80072c6 <__swbuf_r+0x2e>
 8007312:	e7d6      	b.n	80072c2 <__swbuf_r+0x2a>

08007314 <__swsetup_r>:
 8007314:	b538      	push	{r3, r4, r5, lr}
 8007316:	4b29      	ldr	r3, [pc, #164]	@ (80073bc <__swsetup_r+0xa8>)
 8007318:	4605      	mov	r5, r0
 800731a:	6818      	ldr	r0, [r3, #0]
 800731c:	460c      	mov	r4, r1
 800731e:	b118      	cbz	r0, 8007328 <__swsetup_r+0x14>
 8007320:	6a03      	ldr	r3, [r0, #32]
 8007322:	b90b      	cbnz	r3, 8007328 <__swsetup_r+0x14>
 8007324:	f7fd ff8e 	bl	8005244 <__sinit>
 8007328:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800732c:	0719      	lsls	r1, r3, #28
 800732e:	d422      	bmi.n	8007376 <__swsetup_r+0x62>
 8007330:	06da      	lsls	r2, r3, #27
 8007332:	d407      	bmi.n	8007344 <__swsetup_r+0x30>
 8007334:	2209      	movs	r2, #9
 8007336:	602a      	str	r2, [r5, #0]
 8007338:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800733c:	f04f 30ff 	mov.w	r0, #4294967295
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e033      	b.n	80073ac <__swsetup_r+0x98>
 8007344:	0758      	lsls	r0, r3, #29
 8007346:	d512      	bpl.n	800736e <__swsetup_r+0x5a>
 8007348:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800734a:	b141      	cbz	r1, 800735e <__swsetup_r+0x4a>
 800734c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007350:	4299      	cmp	r1, r3
 8007352:	d002      	beq.n	800735a <__swsetup_r+0x46>
 8007354:	4628      	mov	r0, r5
 8007356:	f7fe ff0f 	bl	8006178 <_free_r>
 800735a:	2300      	movs	r3, #0
 800735c:	6363      	str	r3, [r4, #52]	@ 0x34
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	2300      	movs	r3, #0
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	b94b      	cbnz	r3, 800738e <__swsetup_r+0x7a>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007384:	d003      	beq.n	800738e <__swsetup_r+0x7a>
 8007386:	4621      	mov	r1, r4
 8007388:	4628      	mov	r0, r5
 800738a:	f000 f882 	bl	8007492 <__smakebuf_r>
 800738e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007392:	f013 0201 	ands.w	r2, r3, #1
 8007396:	d00a      	beq.n	80073ae <__swsetup_r+0x9a>
 8007398:	2200      	movs	r2, #0
 800739a:	60a2      	str	r2, [r4, #8]
 800739c:	6962      	ldr	r2, [r4, #20]
 800739e:	4252      	negs	r2, r2
 80073a0:	61a2      	str	r2, [r4, #24]
 80073a2:	6922      	ldr	r2, [r4, #16]
 80073a4:	b942      	cbnz	r2, 80073b8 <__swsetup_r+0xa4>
 80073a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80073aa:	d1c5      	bne.n	8007338 <__swsetup_r+0x24>
 80073ac:	bd38      	pop	{r3, r4, r5, pc}
 80073ae:	0799      	lsls	r1, r3, #30
 80073b0:	bf58      	it	pl
 80073b2:	6962      	ldrpl	r2, [r4, #20]
 80073b4:	60a2      	str	r2, [r4, #8]
 80073b6:	e7f4      	b.n	80073a2 <__swsetup_r+0x8e>
 80073b8:	2000      	movs	r0, #0
 80073ba:	e7f7      	b.n	80073ac <__swsetup_r+0x98>
 80073bc:	2000001c 	.word	0x2000001c

080073c0 <_raise_r>:
 80073c0:	291f      	cmp	r1, #31
 80073c2:	b538      	push	{r3, r4, r5, lr}
 80073c4:	4605      	mov	r5, r0
 80073c6:	460c      	mov	r4, r1
 80073c8:	d904      	bls.n	80073d4 <_raise_r+0x14>
 80073ca:	2316      	movs	r3, #22
 80073cc:	6003      	str	r3, [r0, #0]
 80073ce:	f04f 30ff 	mov.w	r0, #4294967295
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80073d6:	b112      	cbz	r2, 80073de <_raise_r+0x1e>
 80073d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80073dc:	b94b      	cbnz	r3, 80073f2 <_raise_r+0x32>
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 f830 	bl	8007444 <_getpid_r>
 80073e4:	4622      	mov	r2, r4
 80073e6:	4601      	mov	r1, r0
 80073e8:	4628      	mov	r0, r5
 80073ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073ee:	f000 b817 	b.w	8007420 <_kill_r>
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d00a      	beq.n	800740c <_raise_r+0x4c>
 80073f6:	1c59      	adds	r1, r3, #1
 80073f8:	d103      	bne.n	8007402 <_raise_r+0x42>
 80073fa:	2316      	movs	r3, #22
 80073fc:	6003      	str	r3, [r0, #0]
 80073fe:	2001      	movs	r0, #1
 8007400:	e7e7      	b.n	80073d2 <_raise_r+0x12>
 8007402:	2100      	movs	r1, #0
 8007404:	4620      	mov	r0, r4
 8007406:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800740a:	4798      	blx	r3
 800740c:	2000      	movs	r0, #0
 800740e:	e7e0      	b.n	80073d2 <_raise_r+0x12>

08007410 <raise>:
 8007410:	4b02      	ldr	r3, [pc, #8]	@ (800741c <raise+0xc>)
 8007412:	4601      	mov	r1, r0
 8007414:	6818      	ldr	r0, [r3, #0]
 8007416:	f7ff bfd3 	b.w	80073c0 <_raise_r>
 800741a:	bf00      	nop
 800741c:	2000001c 	.word	0x2000001c

08007420 <_kill_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	2300      	movs	r3, #0
 8007424:	4d06      	ldr	r5, [pc, #24]	@ (8007440 <_kill_r+0x20>)
 8007426:	4604      	mov	r4, r0
 8007428:	4608      	mov	r0, r1
 800742a:	4611      	mov	r1, r2
 800742c:	602b      	str	r3, [r5, #0]
 800742e:	f7fa fbb2 	bl	8001b96 <_kill>
 8007432:	1c43      	adds	r3, r0, #1
 8007434:	d102      	bne.n	800743c <_kill_r+0x1c>
 8007436:	682b      	ldr	r3, [r5, #0]
 8007438:	b103      	cbz	r3, 800743c <_kill_r+0x1c>
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	bd38      	pop	{r3, r4, r5, pc}
 800743e:	bf00      	nop
 8007440:	20000404 	.word	0x20000404

08007444 <_getpid_r>:
 8007444:	f7fa bba0 	b.w	8001b88 <_getpid>

08007448 <__swhatbuf_r>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	460c      	mov	r4, r1
 800744c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007450:	4615      	mov	r5, r2
 8007452:	2900      	cmp	r1, #0
 8007454:	461e      	mov	r6, r3
 8007456:	b096      	sub	sp, #88	@ 0x58
 8007458:	da0c      	bge.n	8007474 <__swhatbuf_r+0x2c>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	2100      	movs	r1, #0
 800745e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007462:	bf14      	ite	ne
 8007464:	2340      	movne	r3, #64	@ 0x40
 8007466:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800746a:	2000      	movs	r0, #0
 800746c:	6031      	str	r1, [r6, #0]
 800746e:	602b      	str	r3, [r5, #0]
 8007470:	b016      	add	sp, #88	@ 0x58
 8007472:	bd70      	pop	{r4, r5, r6, pc}
 8007474:	466a      	mov	r2, sp
 8007476:	f000 f849 	bl	800750c <_fstat_r>
 800747a:	2800      	cmp	r0, #0
 800747c:	dbed      	blt.n	800745a <__swhatbuf_r+0x12>
 800747e:	9901      	ldr	r1, [sp, #4]
 8007480:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007484:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007488:	4259      	negs	r1, r3
 800748a:	4159      	adcs	r1, r3
 800748c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007490:	e7eb      	b.n	800746a <__swhatbuf_r+0x22>

08007492 <__smakebuf_r>:
 8007492:	898b      	ldrh	r3, [r1, #12]
 8007494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007496:	079d      	lsls	r5, r3, #30
 8007498:	4606      	mov	r6, r0
 800749a:	460c      	mov	r4, r1
 800749c:	d507      	bpl.n	80074ae <__smakebuf_r+0x1c>
 800749e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	6123      	str	r3, [r4, #16]
 80074a6:	2301      	movs	r3, #1
 80074a8:	6163      	str	r3, [r4, #20]
 80074aa:	b003      	add	sp, #12
 80074ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ae:	466a      	mov	r2, sp
 80074b0:	ab01      	add	r3, sp, #4
 80074b2:	f7ff ffc9 	bl	8007448 <__swhatbuf_r>
 80074b6:	9f00      	ldr	r7, [sp, #0]
 80074b8:	4605      	mov	r5, r0
 80074ba:	4639      	mov	r1, r7
 80074bc:	4630      	mov	r0, r6
 80074be:	f7fe fecd 	bl	800625c <_malloc_r>
 80074c2:	b948      	cbnz	r0, 80074d8 <__smakebuf_r+0x46>
 80074c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c8:	059a      	lsls	r2, r3, #22
 80074ca:	d4ee      	bmi.n	80074aa <__smakebuf_r+0x18>
 80074cc:	f023 0303 	bic.w	r3, r3, #3
 80074d0:	f043 0302 	orr.w	r3, r3, #2
 80074d4:	81a3      	strh	r3, [r4, #12]
 80074d6:	e7e2      	b.n	800749e <__smakebuf_r+0xc>
 80074d8:	89a3      	ldrh	r3, [r4, #12]
 80074da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e2:	81a3      	strh	r3, [r4, #12]
 80074e4:	9b01      	ldr	r3, [sp, #4]
 80074e6:	6020      	str	r0, [r4, #0]
 80074e8:	b15b      	cbz	r3, 8007502 <__smakebuf_r+0x70>
 80074ea:	4630      	mov	r0, r6
 80074ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f0:	f000 f81e 	bl	8007530 <_isatty_r>
 80074f4:	b128      	cbz	r0, 8007502 <__smakebuf_r+0x70>
 80074f6:	89a3      	ldrh	r3, [r4, #12]
 80074f8:	f023 0303 	bic.w	r3, r3, #3
 80074fc:	f043 0301 	orr.w	r3, r3, #1
 8007500:	81a3      	strh	r3, [r4, #12]
 8007502:	89a3      	ldrh	r3, [r4, #12]
 8007504:	431d      	orrs	r5, r3
 8007506:	81a5      	strh	r5, [r4, #12]
 8007508:	e7cf      	b.n	80074aa <__smakebuf_r+0x18>
	...

0800750c <_fstat_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	2300      	movs	r3, #0
 8007510:	4d06      	ldr	r5, [pc, #24]	@ (800752c <_fstat_r+0x20>)
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	f7fa fb9b 	bl	8001c54 <_fstat>
 800751e:	1c43      	adds	r3, r0, #1
 8007520:	d102      	bne.n	8007528 <_fstat_r+0x1c>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	b103      	cbz	r3, 8007528 <_fstat_r+0x1c>
 8007526:	6023      	str	r3, [r4, #0]
 8007528:	bd38      	pop	{r3, r4, r5, pc}
 800752a:	bf00      	nop
 800752c:	20000404 	.word	0x20000404

08007530 <_isatty_r>:
 8007530:	b538      	push	{r3, r4, r5, lr}
 8007532:	2300      	movs	r3, #0
 8007534:	4d05      	ldr	r5, [pc, #20]	@ (800754c <_isatty_r+0x1c>)
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	602b      	str	r3, [r5, #0]
 800753c:	f7fa fb99 	bl	8001c72 <_isatty>
 8007540:	1c43      	adds	r3, r0, #1
 8007542:	d102      	bne.n	800754a <_isatty_r+0x1a>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	b103      	cbz	r3, 800754a <_isatty_r+0x1a>
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	bd38      	pop	{r3, r4, r5, pc}
 800754c:	20000404 	.word	0x20000404

08007550 <_init>:
 8007550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007552:	bf00      	nop
 8007554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007556:	bc08      	pop	{r3}
 8007558:	469e      	mov	lr, r3
 800755a:	4770      	bx	lr

0800755c <_fini>:
 800755c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755e:	bf00      	nop
 8007560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007562:	bc08      	pop	{r3}
 8007564:	469e      	mov	lr, r3
 8007566:	4770      	bx	lr
