
dosificador_pileta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007200  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007310  08007310  00008310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007744  08007744  000091d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007744  08007744  00008744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800774c  0800774c  000091d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800774c  0800774c  0000874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007750  08007750  00008750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08007754  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  200001d8  0800792c  000091d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000414  0800792c  00009414  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000091d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c8ae  00000000  00000000  00009201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002047  00000000  00000000  00015aaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ea0  00000000  00000000  00017af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b5f  00000000  00000000  00018998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001941e  00000000  00000000  000194f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a8a  00000000  00000000  00032915  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091ec0  00000000  00000000  0004439f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d625f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000500c  00000000  00000000  000d62a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000db2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080072f8 	.word	0x080072f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080072f8 	.word	0x080072f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__gesf2>:
 8000ca4:	f04f 3cff 	mov.w	ip, #4294967295
 8000ca8:	e006      	b.n	8000cb8 <__cmpsf2+0x4>
 8000caa:	bf00      	nop

08000cac <__lesf2>:
 8000cac:	f04f 0c01 	mov.w	ip, #1
 8000cb0:	e002      	b.n	8000cb8 <__cmpsf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__cmpsf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cbc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000cc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	bf18      	it	ne
 8000cca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cce:	d011      	beq.n	8000cf4 <__cmpsf2+0x40>
 8000cd0:	b001      	add	sp, #4
 8000cd2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000cd6:	bf18      	it	ne
 8000cd8:	ea90 0f01 	teqne	r0, r1
 8000cdc:	bf58      	it	pl
 8000cde:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ce2:	bf88      	it	hi
 8000ce4:	17c8      	asrhi	r0, r1, #31
 8000ce6:	bf38      	it	cc
 8000ce8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cec:	bf18      	it	ne
 8000cee:	f040 0001 	orrne.w	r0, r0, #1
 8000cf2:	4770      	bx	lr
 8000cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf8:	d102      	bne.n	8000d00 <__cmpsf2+0x4c>
 8000cfa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cfe:	d105      	bne.n	8000d0c <__cmpsf2+0x58>
 8000d00:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000d04:	d1e4      	bne.n	8000cd0 <__cmpsf2+0x1c>
 8000d06:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000d0a:	d0e1      	beq.n	8000cd0 <__cmpsf2+0x1c>
 8000d0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop

08000d14 <__aeabi_cfrcmple>:
 8000d14:	4684      	mov	ip, r0
 8000d16:	4608      	mov	r0, r1
 8000d18:	4661      	mov	r1, ip
 8000d1a:	e7ff      	b.n	8000d1c <__aeabi_cfcmpeq>

08000d1c <__aeabi_cfcmpeq>:
 8000d1c:	b50f      	push	{r0, r1, r2, r3, lr}
 8000d1e:	f7ff ffc9 	bl	8000cb4 <__cmpsf2>
 8000d22:	2800      	cmp	r0, #0
 8000d24:	bf48      	it	mi
 8000d26:	f110 0f00 	cmnmi.w	r0, #0
 8000d2a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000d2c <__aeabi_fcmpeq>:
 8000d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d30:	f7ff fff4 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d34:	bf0c      	ite	eq
 8000d36:	2001      	moveq	r0, #1
 8000d38:	2000      	movne	r0, #0
 8000d3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d3e:	bf00      	nop

08000d40 <__aeabi_fcmplt>:
 8000d40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d44:	f7ff ffea 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d48:	bf34      	ite	cc
 8000d4a:	2001      	movcc	r0, #1
 8000d4c:	2000      	movcs	r0, #0
 8000d4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d52:	bf00      	nop

08000d54 <__aeabi_fcmple>:
 8000d54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d58:	f7ff ffe0 	bl	8000d1c <__aeabi_cfcmpeq>
 8000d5c:	bf94      	ite	ls
 8000d5e:	2001      	movls	r0, #1
 8000d60:	2000      	movhi	r0, #0
 8000d62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d66:	bf00      	nop

08000d68 <__aeabi_fcmpge>:
 8000d68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d6c:	f7ff ffd2 	bl	8000d14 <__aeabi_cfrcmple>
 8000d70:	bf94      	ite	ls
 8000d72:	2001      	movls	r0, #1
 8000d74:	2000      	movhi	r0, #0
 8000d76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7a:	bf00      	nop

08000d7c <__aeabi_fcmpgt>:
 8000d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d80:	f7ff ffc8 	bl	8000d14 <__aeabi_cfrcmple>
 8000d84:	bf34      	ite	cc
 8000d86:	2001      	movcc	r0, #1
 8000d88:	2000      	movcs	r0, #0
 8000d8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d8e:	bf00      	nop

08000d90 <i2c_write>:
static void lcd_pulse_enable(uint8_t data);
static void lcd_cmd(uint8_t cmd);
static void lcd_data(uint8_t data);


static void i2c_write(uint8_t val) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af02      	add	r7, sp, #8
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDR, &val, 1, HAL_MAX_DELAY);
 8000d9a:	1dfa      	adds	r2, r7, #7
 8000d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	214e      	movs	r1, #78	@ 0x4e
 8000da6:	4803      	ldr	r0, [pc, #12]	@ (8000db4 <i2c_write+0x24>)
 8000da8:	f001 ff3a 	bl	8002c20 <HAL_I2C_Master_Transmit>
}
 8000dac:	bf00      	nop
 8000dae:	3708      	adds	r7, #8
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	20000224 	.word	0x20000224

08000db8 <lcd_pulse_enable>:


static void lcd_pulse_enable(uint8_t data) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
i2c_write(data | LCD_EN | bl_state);
 8000dc2:	4b10      	ldr	r3, [pc, #64]	@ (8000e04 <lcd_pulse_enable+0x4c>)
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	f043 0304 	orr.w	r3, r3, #4
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ffdc 	bl	8000d90 <i2c_write>
HAL_Delay(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f000 fef9 	bl	8001bd0 <HAL_Delay>
i2c_write((data & ~LCD_EN) | bl_state);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	f023 0304 	bic.w	r3, r3, #4
 8000de4:	b2da      	uxtb	r2, r3
 8000de6:	4b07      	ldr	r3, [pc, #28]	@ (8000e04 <lcd_pulse_enable+0x4c>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff ffce 	bl	8000d90 <i2c_write>
HAL_Delay(1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 feeb 	bl	8001bd0 <HAL_Delay>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000000 	.word	0x20000000

08000e08 <lcd_write_nibble>:


static void lcd_write_nibble(uint8_t nibble, uint8_t mode_rs) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	460a      	mov	r2, r1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	4613      	mov	r3, r2
 8000e16:	71bb      	strb	r3, [r7, #6]
// D7..D4 del LCD están en P7..P4 del PCF; por eso usamos (nibble & 0xF0)
uint8_t out = (nibble & 0xF0) | mode_rs; // RW=0 siempre (escritura)
 8000e18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1c:	f023 030f 	bic.w	r3, r3, #15
 8000e20:	b25a      	sxtb	r2, r3
 8000e22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b25b      	sxtb	r3, r3
 8000e2a:	73fb      	strb	r3, [r7, #15]
i2c_write(out | bl_state);
 8000e2c:	4b07      	ldr	r3, [pc, #28]	@ (8000e4c <lcd_write_nibble+0x44>)
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	7bfb      	ldrb	r3, [r7, #15]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ffaa 	bl	8000d90 <i2c_write>
lcd_pulse_enable(out);
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ffba 	bl	8000db8 <lcd_pulse_enable>
}
 8000e44:	bf00      	nop
 8000e46:	3710      	adds	r7, #16
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000000 	.word	0x20000000

08000e50 <lcd_send>:


static void lcd_send(uint8_t value, uint8_t mode_rs) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	460a      	mov	r2, r1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	71bb      	strb	r3, [r7, #6]
lcd_write_nibble(value & 0xF0, mode_rs);
 8000e60:	79fb      	ldrb	r3, [r7, #7]
 8000e62:	f023 030f 	bic.w	r3, r3, #15
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	79ba      	ldrb	r2, [r7, #6]
 8000e6a:	4611      	mov	r1, r2
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff ffcb 	bl	8000e08 <lcd_write_nibble>
lcd_write_nibble((value << 4) & 0xF0, mode_rs);
 8000e72:	79fb      	ldrb	r3, [r7, #7]
 8000e74:	011b      	lsls	r3, r3, #4
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	79ba      	ldrb	r2, [r7, #6]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ffc3 	bl	8000e08 <lcd_write_nibble>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <lcd_cmd>:


static void lcd_cmd(uint8_t cmd) { lcd_send(cmd, 0); }
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	71fb      	strb	r3, [r7, #7]
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ffd9 	bl	8000e50 <lcd_send>
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <lcd_data>:
static void lcd_data(uint8_t data) { lcd_send(data, LCD_RS); }
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	4603      	mov	r3, r0
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ffcb 	bl	8000e50 <lcd_send>
 8000eba:	bf00      	nop
 8000ebc:	3708      	adds	r7, #8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <lcd_clear>:
bl_state = on ? LCD_BL : 0;
i2c_write(bl_state);
}


void lcd_clear(void) {
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	af00      	add	r7, sp, #0
lcd_cmd(0x01); // clear
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff ffdf 	bl	8000e8a <lcd_cmd>
HAL_Delay(2); // >1.53 ms
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f000 fe7f 	bl	8001bd0 <HAL_Delay>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <lcd_put_cur>:


void lcd_put_cur(uint8_t row, uint8_t col) {
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	460a      	mov	r2, r1
 8000ee0:	71fb      	strb	r3, [r7, #7]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	71bb      	strb	r3, [r7, #6]
uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d101      	bne.n	8000ef0 <lcd_put_cur+0x1a>
 8000eec:	2200      	movs	r2, #0
 8000eee:	e000      	b.n	8000ef2 <lcd_put_cur+0x1c>
 8000ef0:	2240      	movs	r2, #64	@ 0x40
 8000ef2:	79bb      	ldrb	r3, [r7, #6]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	73fb      	strb	r3, [r7, #15]
lcd_cmd(0x80 | addr);
 8000ef8:	7bfb      	ldrb	r3, [r7, #15]
 8000efa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ffc2 	bl	8000e8a <lcd_cmd>
}
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <lcd_init>:


void lcd_init(void) {
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
HAL_Delay(50); // >40 ms después de VCC sube
 8000f12:	2032      	movs	r0, #50	@ 0x32
 8000f14:	f000 fe5c 	bl	8001bd0 <HAL_Delay>


// Secuencia de arranque en 4‑bit
lcd_write_nibble(0x30, 0); HAL_Delay(5);
 8000f18:	2100      	movs	r1, #0
 8000f1a:	2030      	movs	r0, #48	@ 0x30
 8000f1c:	f7ff ff74 	bl	8000e08 <lcd_write_nibble>
 8000f20:	2005      	movs	r0, #5
 8000f22:	f000 fe55 	bl	8001bd0 <HAL_Delay>
lcd_write_nibble(0x30, 0); HAL_Delay(1);
 8000f26:	2100      	movs	r1, #0
 8000f28:	2030      	movs	r0, #48	@ 0x30
 8000f2a:	f7ff ff6d 	bl	8000e08 <lcd_write_nibble>
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 fe4e 	bl	8001bd0 <HAL_Delay>
lcd_write_nibble(0x30, 0); HAL_Delay(1);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2030      	movs	r0, #48	@ 0x30
 8000f38:	f7ff ff66 	bl	8000e08 <lcd_write_nibble>
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	f000 fe47 	bl	8001bd0 <HAL_Delay>
lcd_write_nibble(0x20, 0); HAL_Delay(1); // 4‑bit
 8000f42:	2100      	movs	r1, #0
 8000f44:	2020      	movs	r0, #32
 8000f46:	f7ff ff5f 	bl	8000e08 <lcd_write_nibble>
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	f000 fe40 	bl	8001bd0 <HAL_Delay>


// Función: 2 líneas, 5x8 dots
lcd_cmd(0x28);
 8000f50:	2028      	movs	r0, #40	@ 0x28
 8000f52:	f7ff ff9a 	bl	8000e8a <lcd_cmd>
// Display ON, cursor OFF, blink OFF
lcd_cmd(0x0C);
 8000f56:	200c      	movs	r0, #12
 8000f58:	f7ff ff97 	bl	8000e8a <lcd_cmd>
// Entry mode: incrementar, sin shift
lcd_cmd(0x06);
 8000f5c:	2006      	movs	r0, #6
 8000f5e:	f7ff ff94 	bl	8000e8a <lcd_cmd>
lcd_clear();
 8000f62:	f7ff ffae 	bl	8000ec2 <lcd_clear>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <lcd_write_char>:


void lcd_write_char(char ch) { lcd_data((uint8_t)ch); }
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	b082      	sub	sp, #8
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	4603      	mov	r3, r0
 8000f72:	71fb      	strb	r3, [r7, #7]
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff ff95 	bl	8000ea6 <lcd_data>
 8000f7c:	bf00      	nop
 8000f7e:	3708      	adds	r7, #8
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <lcd_send_string>:


void lcd_send_string(const char *str) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
while (*str) {
 8000f8c:	e006      	b.n	8000f9c <lcd_send_string+0x18>
lcd_write_char(*str++);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	607a      	str	r2, [r7, #4]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffe7 	bl	8000f6a <lcd_write_char>
while (*str) {
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1f4      	bne.n	8000f8e <lcd_send_string+0xa>
}
}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <calcularErrorPH>:
#define PH_OFFSET 1460 //offset
#define PH_TOLERANCIA 5


//funcion para calcular el error de ph
int calcularErrorPH(int ph_actual){
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
	return PH_IDEAL - ph_actual;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f5c3 7339 	rsb	r3, r3, #740	@ 0x2e4
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bc80      	pop	{r7}
 8000fc4:	4770      	bx	lr

08000fc6 <obtenerSensibilidad>:

//determino sensibilidad segun error
int obtenerSensibilidad(int error){
 8000fc6:	b480      	push	{r7}
 8000fc8:	b083      	sub	sp, #12
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
	return (error < 0) ? SENSIBILIDAD_BAJAR_PH : SENSIBILIDAD_SUBIR_PH;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	da01      	bge.n	8000fd8 <obtenerSensibilidad+0x12>
 8000fd4:	2364      	movs	r3, #100	@ 0x64
 8000fd6:	e001      	b.n	8000fdc <obtenerSensibilidad+0x16>
 8000fd8:	f240 136b 	movw	r3, #363	@ 0x16b
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bc80      	pop	{r7}
 8000fe4:	4770      	bx	lr

08000fe6 <calcularVolumen>:
 //calculo volumen
int calcularVolumen (int error, int sensibilidad){
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
 8000fee:	6039      	str	r1, [r7, #0]
	return (abs(error)*100)/sensibilidad;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	bfb8      	it	lt
 8000ff6:	425b      	neglt	r3, r3
 8000ff8:	2264      	movs	r2, #100	@ 0x64
 8000ffa:	fb03 f202 	mul.w	r2, r3, r2
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr
	...

08001010 <calcularCaudal>:

//Calculo caudal
int calcularCaudal(int volumen){
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
	return volumen/TC;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4a05      	ldr	r2, [pc, #20]	@ (8001030 <calcularCaudal+0x20>)
 800101c:	fb82 1203 	smull	r1, r2, r2, r3
 8001020:	1152      	asrs	r2, r2, #5
 8001022:	17db      	asrs	r3, r3, #31
 8001024:	1ad3      	subs	r3, r2, r3
}
 8001026:	4618      	mov	r0, r3
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	10624dd3 	.word	0x10624dd3

08001034 <calcularDutyFinal>:

//calculo duty final limitado

int calcularDutyFinal(int caudal){
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
	int duty_crudo = (caudal * KP) / CAUDAL_MAXIMO;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	22aa      	movs	r2, #170	@ 0xaa
 8001040:	fb02 f303 	mul.w	r3, r2, r3
 8001044:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <calcularDutyFinal+0x4c>)
 8001046:	fb82 1203 	smull	r1, r2, r2, r3
 800104a:	441a      	add	r2, r3
 800104c:	11d2      	asrs	r2, r2, #7
 800104e:	17db      	asrs	r3, r3, #31
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	60fb      	str	r3, [r7, #12]


	if (duty_crudo > DUTY_MAX*100) return DUTY_MAX*100;
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f242 7210 	movw	r2, #10000	@ 0x2710
 800105a:	4293      	cmp	r3, r2
 800105c:	dd02      	ble.n	8001064 <calcularDutyFinal+0x30>
 800105e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001062:	e007      	b.n	8001074 <calcularDutyFinal+0x40>
	if (duty_crudo < DUTY_MIN*100) return DUTY_MIN*100;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800106a:	da02      	bge.n	8001072 <calcularDutyFinal+0x3e>
 800106c:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001070:	e000      	b.n	8001074 <calcularDutyFinal+0x40>
	else return duty_crudo;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3714      	adds	r7, #20
 8001078:	46bd      	mov	sp, r7
 800107a:	bc80      	pop	{r7}
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	f6603d99 	.word	0xf6603d99

08001084 <setBombaPWM>:

void setBombaPWM(int duty, int subir) {
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
    uint32_t pulse = (uint32_t)((duty/100) * htim2.Init.Period);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a12      	ldr	r2, [pc, #72]	@ (80010dc <setBombaPWM+0x58>)
 8001092:	fb82 1203 	smull	r1, r2, r2, r3
 8001096:	1152      	asrs	r2, r2, #5
 8001098:	17db      	asrs	r3, r3, #31
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	461a      	mov	r2, r3
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <setBombaPWM+0x5c>)
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	60fb      	str	r3, [r7, #12]
    if (subir) {
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <setBombaPWM+0x3c>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);  // Bomba subir pH
 80010ae:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <setBombaPWM+0x5c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);      // Apaga bomba bajar
 80010b6:	4b0a      	ldr	r3, [pc, #40]	@ (80010e0 <setBombaPWM+0x5c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2200      	movs	r2, #0
 80010bc:	639a      	str	r2, [r3, #56]	@ 0x38
    } else {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // Apaga bomba subir
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);  // Bomba bajar pH
    }
}
 80010be:	e007      	b.n	80010d0 <setBombaPWM+0x4c>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // Apaga bomba subir
 80010c0:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <setBombaPWM+0x5c>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2200      	movs	r2, #0
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);  // Bomba bajar pH
 80010c8:	4b05      	ldr	r3, [pc, #20]	@ (80010e0 <setBombaPWM+0x5c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68fa      	ldr	r2, [r7, #12]
 80010ce:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	51eb851f 	.word	0x51eb851f
 80010e0:	20000278 	.word	0x20000278

080010e4 <leerVoltaje>:

int leerVoltaje(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
	uint32_t adc_raw = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	607b      	str	r3, [r7, #4]

	HAL_ADC_Start(&hadc1);
 80010ee:	4811      	ldr	r0, [pc, #68]	@ (8001134 <leerVoltaje+0x50>)
 80010f0:	f000 fe6a 	bl	8001dc8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 80010f4:	2164      	movs	r1, #100	@ 0x64
 80010f6:	480f      	ldr	r0, [pc, #60]	@ (8001134 <leerVoltaje+0x50>)
 80010f8:	f000 ff40 	bl	8001f7c <HAL_ADC_PollForConversion>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d103      	bne.n	800110a <leerVoltaje+0x26>
		adc_raw = HAL_ADC_GetValue(&hadc1);
 8001102:	480c      	ldr	r0, [pc, #48]	@ (8001134 <leerVoltaje+0x50>)
 8001104:	f001 f840 	bl	8002188 <HAL_ADC_GetValue>
 8001108:	6078      	str	r0, [r7, #4]
	}
	HAL_ADC_Stop(&hadc1);
 800110a:	480a      	ldr	r0, [pc, #40]	@ (8001134 <leerVoltaje+0x50>)
 800110c:	f000 ff0a 	bl	8001f24 <HAL_ADC_Stop>
	int volt = (adc_raw *330)/4095;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8001116:	fb03 f202 	mul.w	r2, r3, r2
 800111a:	4b07      	ldr	r3, [pc, #28]	@ (8001138 <leerVoltaje+0x54>)
 800111c:	fba3 1302 	umull	r1, r3, r3, r2
 8001120:	1ad2      	subs	r2, r2, r3
 8001122:	0852      	lsrs	r2, r2, #1
 8001124:	4413      	add	r3, r2
 8001126:	0adb      	lsrs	r3, r3, #11
 8001128:	603b      	str	r3, [r7, #0]
	return volt;
 800112a:	683b      	ldr	r3, [r7, #0]
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	200001f4 	.word	0x200001f4
 8001138:	00100101 	.word	0x00100101

0800113c <leerPH>:

int leerPH(void){
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0
	uint32_t adc_raw = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]

	HAL_ADC_Start(&hadc1);
 8001146:	4818      	ldr	r0, [pc, #96]	@ (80011a8 <leerPH+0x6c>)
 8001148:	f000 fe3e 	bl	8001dc8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK){
 800114c:	2164      	movs	r1, #100	@ 0x64
 800114e:	4816      	ldr	r0, [pc, #88]	@ (80011a8 <leerPH+0x6c>)
 8001150:	f000 ff14 	bl	8001f7c <HAL_ADC_PollForConversion>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <leerPH+0x26>
		adc_raw = HAL_ADC_GetValue(&hadc1);
 800115a:	4813      	ldr	r0, [pc, #76]	@ (80011a8 <leerPH+0x6c>)
 800115c:	f001 f814 	bl	8002188 <HAL_ADC_GetValue>
 8001160:	60f8      	str	r0, [r7, #12]
	}
	HAL_ADC_Stop(&hadc1);
 8001162:	4811      	ldr	r0, [pc, #68]	@ (80011a8 <leerPH+0x6c>)
 8001164:	f000 fede 	bl	8001f24 <HAL_ADC_Stop>

	int volt = (adc_raw * 330 ) / 4095; // convertir voltaje
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800116e:	fb03 f202 	mul.w	r2, r3, r2
 8001172:	4b0e      	ldr	r3, [pc, #56]	@ (80011ac <leerPH+0x70>)
 8001174:	fba3 1302 	umull	r1, r3, r3, r2
 8001178:	1ad2      	subs	r2, r2, r3
 800117a:	0852      	lsrs	r2, r2, #1
 800117c:	4413      	add	r3, r2
 800117e:	0adb      	lsrs	r3, r3, #11
 8001180:	60bb      	str	r3, [r7, #8]
	int ph = (PH_SLOPE * volt)/100 + PH_OFFSET; //formula lineal
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f46f 7293 	mvn.w	r2, #294	@ 0x126
 8001188:	fb02 f303 	mul.w	r3, r2, r3
 800118c:	4a08      	ldr	r2, [pc, #32]	@ (80011b0 <leerPH+0x74>)
 800118e:	fb82 1203 	smull	r1, r2, r2, r3
 8001192:	1152      	asrs	r2, r2, #5
 8001194:	17db      	asrs	r3, r3, #31
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	f203 53b4 	addw	r3, r3, #1460	@ 0x5b4
 800119c:	607b      	str	r3, [r7, #4]
	return ph;
 800119e:	687b      	ldr	r3, [r7, #4]


}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	200001f4 	.word	0x200001f4
 80011ac:	00100101 	.word	0x00100101
 80011b0:	51eb851f 	.word	0x51eb851f

080011b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b0a6      	sub	sp, #152	@ 0x98
 80011b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ba:	f000 fca7 	bl	8001b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011be:	f000 f94b 	bl	8001458 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c2:	f000 fa69 	bl	8001698 <MX_GPIO_Init>
  MX_I2C1_Init();
 80011c6:	f000 f9d5 	bl	8001574 <MX_I2C1_Init>
  MX_TIM2_Init();
 80011ca:	f000 fa01 	bl	80015d0 <MX_TIM2_Init>
  MX_ADC1_Init();
 80011ce:	f000 f993 	bl	80014f8 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 80011d2:	f7ff fe9c 	bl	8000f0e <lcd_init>
  lcd_clear();
 80011d6:	f7ff fe74 	bl	8000ec2 <lcd_clear>
  lcd_put_cur(0,0);
 80011da:	2100      	movs	r1, #0
 80011dc:	2000      	movs	r0, #0
 80011de:	f7ff fe7a 	bl	8000ed6 <lcd_put_cur>
  lcd_send_string("Control PH ON");
 80011e2:	4894      	ldr	r0, [pc, #592]	@ (8001434 <main+0x280>)
 80011e4:	f7ff fece 	bl	8000f84 <lcd_send_string>
  HAL_Delay(2000);
 80011e8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011ec:	f000 fcf0 	bl	8001bd0 <HAL_Delay>

  //arrancar los canales PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Bomba subir pH
 80011f0:	2100      	movs	r1, #0
 80011f2:	4891      	ldr	r0, [pc, #580]	@ (8001438 <main+0x284>)
 80011f4:	f002 fe38 	bl	8003e68 <HAL_TIM_PWM_Start>
 HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Bomba bajar pH
 80011f8:	2104      	movs	r1, #4
 80011fa:	488f      	ldr	r0, [pc, #572]	@ (8001438 <main+0x284>)
 80011fc:	f002 fe34 	bl	8003e68 <HAL_TIM_PWM_Start>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int  ph_actual = leerPH();
 8001200:	f7ff ff9c 	bl	800113c <leerPH>
 8001204:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
	  int volt = leerVoltaje();
 8001208:	f7ff ff6c 	bl	80010e4 <leerVoltaje>
 800120c:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
	 int error = calcularErrorPH(ph_actual);
 8001210:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 8001214:	f7ff fecb 	bl	8000fae <calcularErrorPH>
 8001218:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
	 int decimal = ph_actual % 100;
 800121c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001220:	4a86      	ldr	r2, [pc, #536]	@ (800143c <main+0x288>)
 8001222:	fb82 1203 	smull	r1, r2, r2, r3
 8001226:	1151      	asrs	r1, r2, #5
 8001228:	17da      	asrs	r2, r3, #31
 800122a:	1a8a      	subs	r2, r1, r2
 800122c:	2164      	movs	r1, #100	@ 0x64
 800122e:	fb01 f202 	mul.w	r2, r1, r2
 8001232:	1a9b      	subs	r3, r3, r2
 8001234:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	 int entero = ph_actual / 100;
 8001238:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800123c:	4a7f      	ldr	r2, [pc, #508]	@ (800143c <main+0x288>)
 800123e:	fb82 1203 	smull	r1, r2, r2, r3
 8001242:	1152      	asrs	r2, r2, #5
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	67fb      	str	r3, [r7, #124]	@ 0x7c

	  //Mostrar el valor actual de ph
	   lcd_clear();
 800124a:	f7ff fe3a 	bl	8000ec2 <lcd_clear>
	   lcd_put_cur(0,0);
 800124e:	2100      	movs	r1, #0
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff fe40 	bl	8000ed6 <lcd_put_cur>
	   char line1[17];
	   snprintf(line1, sizeof(line1), "pH: %02d.%02d", entero, decimal);
 8001256:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800125a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001262:	4a77      	ldr	r2, [pc, #476]	@ (8001440 <main+0x28c>)
 8001264:	2111      	movs	r1, #17
 8001266:	f003 fef7 	bl	8005058 <sniprintf>
	   lcd_send_string(line1);
 800126a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fe88 	bl	8000f84 <lcd_send_string>
	   HAL_Delay(1000);
 8001274:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001278:	f000 fcaa 	bl	8001bd0 <HAL_Delay>

	   // Segunda línea: voltaje

	   	 int decimal1 = volt % 100;
 800127c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001280:	4a6e      	ldr	r2, [pc, #440]	@ (800143c <main+0x288>)
 8001282:	fb82 1203 	smull	r1, r2, r2, r3
 8001286:	1151      	asrs	r1, r2, #5
 8001288:	17da      	asrs	r2, r3, #31
 800128a:	1a8a      	subs	r2, r1, r2
 800128c:	2164      	movs	r1, #100	@ 0x64
 800128e:	fb01 f202 	mul.w	r2, r1, r2
 8001292:	1a9b      	subs	r3, r3, r2
 8001294:	67bb      	str	r3, [r7, #120]	@ 0x78
	  	 int entero1 = volt / 100;
 8001296:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800129a:	4a68      	ldr	r2, [pc, #416]	@ (800143c <main+0x288>)
 800129c:	fb82 1203 	smull	r1, r2, r2, r3
 80012a0:	1152      	asrs	r2, r2, #5
 80012a2:	17db      	asrs	r3, r3, #31
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	677b      	str	r3, [r7, #116]	@ 0x74
	   	  char line2[17];
	   	  snprintf(line2, sizeof(line2), "V: %02d.%02d", entero1, decimal1);
 80012a8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 80012ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80012ae:	9300      	str	r3, [sp, #0]
 80012b0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80012b2:	4a64      	ldr	r2, [pc, #400]	@ (8001444 <main+0x290>)
 80012b4:	2111      	movs	r1, #17
 80012b6:	f003 fecf 	bl	8005058 <sniprintf>
	   	  lcd_put_cur(1,0);
 80012ba:	2100      	movs	r1, #0
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fe0a 	bl	8000ed6 <lcd_put_cur>
	   	  lcd_send_string(line2);
 80012c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fe5c 	bl	8000f84 <lcd_send_string>

	   	  HAL_Delay(1000);
 80012cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012d0:	f000 fc7e 	bl	8001bd0 <HAL_Delay>



	  if (abs(error)< PH_TOLERANCIA){
 80012d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012d8:	f113 0f04 	cmn.w	r3, #4
 80012dc:	db13      	blt.n	8001306 <main+0x152>
 80012de:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	dc0f      	bgt.n	8001306 <main+0x152>
		  lcd_put_cur(1,0);
 80012e6:	2100      	movs	r1, #0
 80012e8:	2001      	movs	r0, #1
 80012ea:	f7ff fdf4 	bl	8000ed6 <lcd_put_cur>
		  lcd_send_string("pH ideal");
 80012ee:	4856      	ldr	r0, [pc, #344]	@ (8001448 <main+0x294>)
 80012f0:	f7ff fe48 	bl	8000f84 <lcd_send_string>
		  setBombaPWM(0, 1);
 80012f4:	2101      	movs	r1, #1
 80012f6:	2000      	movs	r0, #0
 80012f8:	f7ff fec4 	bl	8001084 <setBombaPWM>
		  HAL_Delay(2000); // espera 2 segundos
 80012fc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001300:	f000 fc66 	bl	8001bd0 <HAL_Delay>
 8001304:	e095      	b.n	8001432 <main+0x27e>

	  } else {

	  int sensibilidad = obtenerSensibilidad(error);
 8001306:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800130a:	f7ff fe5c 	bl	8000fc6 <obtenerSensibilidad>
 800130e:	6738      	str	r0, [r7, #112]	@ 0x70
	  int volumen = calcularVolumen(error, sensibilidad);
 8001310:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8001312:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001316:	f7ff fe66 	bl	8000fe6 <calcularVolumen>
 800131a:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  int caudal = calcularCaudal(volumen);
 800131c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800131e:	f7ff fe77 	bl	8001010 <calcularCaudal>
 8001322:	66b8      	str	r0, [r7, #104]	@ 0x68
	  int duty = calcularDutyFinal(abs(caudal));
 8001324:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001326:	2b00      	cmp	r3, #0
 8001328:	bfb8      	it	lt
 800132a:	425b      	neglt	r3, r3
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fe81 	bl	8001034 <calcularDutyFinal>
 8001332:	6678      	str	r0, [r7, #100]	@ 0x64


	  int decimal2 = abs (error) % 100;
 8001334:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001338:	2b00      	cmp	r3, #0
 800133a:	bfb8      	it	lt
 800133c:	425b      	neglt	r3, r3
 800133e:	4a3f      	ldr	r2, [pc, #252]	@ (800143c <main+0x288>)
 8001340:	fb82 1203 	smull	r1, r2, r2, r3
 8001344:	1151      	asrs	r1, r2, #5
 8001346:	17da      	asrs	r2, r3, #31
 8001348:	1a8a      	subs	r2, r1, r2
 800134a:	2164      	movs	r1, #100	@ 0x64
 800134c:	fb01 f202 	mul.w	r2, r1, r2
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	663b      	str	r3, [r7, #96]	@ 0x60
	  int entero2 = abs (error) / 100;
 8001354:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001358:	2b00      	cmp	r3, #0
 800135a:	bfb8      	it	lt
 800135c:	425b      	neglt	r3, r3
 800135e:	4a37      	ldr	r2, [pc, #220]	@ (800143c <main+0x288>)
 8001360:	fb82 1203 	smull	r1, r2, r2, r3
 8001364:	1152      	asrs	r2, r2, #5
 8001366:	17db      	asrs	r3, r3, #31
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	    lcd_put_cur(1,0);
 800136c:	2100      	movs	r1, #0
 800136e:	2001      	movs	r0, #1
 8001370:	f7ff fdb1 	bl	8000ed6 <lcd_put_cur>
	    char ph_line[17];
	    if(error < 0.0f){
 8001374:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8001378:	f7ff fc40 	bl	8000bfc <__aeabi_i2f>
 800137c:	4603      	mov	r3, r0
 800137e:	f04f 0100 	mov.w	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fcdc 	bl	8000d40 <__aeabi_fcmplt>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d00d      	beq.n	80013aa <main+0x1f6>
	    snprintf(ph_line, sizeof(ph_line), "Bajar:  %02d.%02d pH", entero2, decimal2);
 800138e:	f107 0018 	add.w	r0, r7, #24
 8001392:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001398:	4a2c      	ldr	r2, [pc, #176]	@ (800144c <main+0x298>)
 800139a:	2111      	movs	r1, #17
 800139c:	f003 fe5c 	bl	8005058 <sniprintf>
	    setBombaPWM(duty, 0);
 80013a0:	2100      	movs	r1, #0
 80013a2:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80013a4:	f7ff fe6e 	bl	8001084 <setBombaPWM>
 80013a8:	e00c      	b.n	80013c4 <main+0x210>
	  } else{
	     snprintf(ph_line, sizeof(ph_line), "Subir:  %02d.%02d pH",entero2, decimal2);
 80013aa:	f107 0018 	add.w	r0, r7, #24
 80013ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013b4:	4a26      	ldr	r2, [pc, #152]	@ (8001450 <main+0x29c>)
 80013b6:	2111      	movs	r1, #17
 80013b8:	f003 fe4e 	bl	8005058 <sniprintf>
	     setBombaPWM(duty,1);
 80013bc:	2101      	movs	r1, #1
 80013be:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80013c0:	f7ff fe60 	bl	8001084 <setBombaPWM>
	  }

	    lcd_send_string(ph_line);       //  mostrar el texto
 80013c4:	f107 0318 	add.w	r3, r7, #24
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fddb 	bl	8000f84 <lcd_send_string>
	    HAL_Delay(2000);
 80013ce:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013d2:	f000 fbfd 	bl	8001bd0 <HAL_Delay>

	    HAL_Delay(2000);
 80013d6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80013da:	f000 fbf9 	bl	8001bd0 <HAL_Delay>

	 // Secuencia: Duty de la bomba
	     lcd_clear();
 80013de:	f7ff fd70 	bl	8000ec2 <lcd_clear>
	     lcd_put_cur(0,0);
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff fd76 	bl	8000ed6 <lcd_put_cur>
	     char duty_line[17];
	     int decimal3 = duty % 100;
 80013ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80013ec:	4a13      	ldr	r2, [pc, #76]	@ (800143c <main+0x288>)
 80013ee:	fb82 1203 	smull	r1, r2, r2, r3
 80013f2:	1151      	asrs	r1, r2, #5
 80013f4:	17da      	asrs	r2, r3, #31
 80013f6:	1a8a      	subs	r2, r1, r2
 80013f8:	2164      	movs	r1, #100	@ 0x64
 80013fa:	fb01 f202 	mul.w	r2, r1, r2
 80013fe:	1a9b      	subs	r3, r3, r2
 8001400:	65bb      	str	r3, [r7, #88]	@ 0x58
	     int entero3 = duty / 100;
 8001402:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <main+0x288>)
 8001406:	fb82 1203 	smull	r1, r2, r2, r3
 800140a:	1152      	asrs	r2, r2, #5
 800140c:	17db      	asrs	r3, r3, #31
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	657b      	str	r3, [r7, #84]	@ 0x54

	     snprintf(duty_line, sizeof(duty_line), "Duty:  %02d.%02d", entero3, decimal3);
 8001412:	1d38      	adds	r0, r7, #4
 8001414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001416:	9300      	str	r3, [sp, #0]
 8001418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <main+0x2a0>)
 800141c:	2111      	movs	r1, #17
 800141e:	f003 fe1b 	bl	8005058 <sniprintf>
	     lcd_send_string(duty_line);
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fdad 	bl	8000f84 <lcd_send_string>
	      HAL_Delay(2000);
 800142a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800142e:	f000 fbcf 	bl	8001bd0 <HAL_Delay>
  {
 8001432:	e6e5      	b.n	8001200 <main+0x4c>
 8001434:	08007310 	.word	0x08007310
 8001438:	20000278 	.word	0x20000278
 800143c:	51eb851f 	.word	0x51eb851f
 8001440:	08007320 	.word	0x08007320
 8001444:	08007330 	.word	0x08007330
 8001448:	08007340 	.word	0x08007340
 800144c:	0800734c 	.word	0x0800734c
 8001450:	08007364 	.word	0x08007364
 8001454:	0800737c 	.word	0x0800737c

08001458 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b094      	sub	sp, #80	@ 0x50
 800145c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800145e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001462:	2228      	movs	r2, #40	@ 0x28
 8001464:	2100      	movs	r1, #0
 8001466:	4618      	mov	r0, r3
 8001468:	f003 fe6f 	bl	800514a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2200      	movs	r2, #0
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	605a      	str	r2, [r3, #4]
 8001484:	609a      	str	r2, [r3, #8]
 8001486:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001488:	2302      	movs	r3, #2
 800148a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800148c:	2301      	movs	r3, #1
 800148e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001490:	2310      	movs	r3, #16
 8001492:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001494:	2300      	movs	r3, #0
 8001496:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800149c:	4618      	mov	r0, r3
 800149e:	f001 ff17 	bl	80032d0 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014a8:	f000 f918 	bl	80016dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ac:	230f      	movs	r3, #15
 80014ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014c0:	f107 0314 	add.w	r3, r7, #20
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f002 f984 	bl	80037d4 <HAL_RCC_ClockConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80014d2:	f000 f903 	bl	80016dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014d6:	2302      	movs	r3, #2
 80014d8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fb05 	bl	8003af0 <HAL_RCCEx_PeriphCLKConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014ec:	f000 f8f6 	bl	80016dc <Error_Handler>
  }
}
 80014f0:	bf00      	nop
 80014f2:	3750      	adds	r7, #80	@ 0x50
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001508:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_ADC1_Init+0x74>)
 800150a:	4a19      	ldr	r2, [pc, #100]	@ (8001570 <MX_ADC1_Init+0x78>)
 800150c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800150e:	4b17      	ldr	r3, [pc, #92]	@ (800156c <MX_ADC1_Init+0x74>)
 8001510:	2200      	movs	r2, #0
 8001512:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001514:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_ADC1_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800151a:	4b14      	ldr	r3, [pc, #80]	@ (800156c <MX_ADC1_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001520:	4b12      	ldr	r3, [pc, #72]	@ (800156c <MX_ADC1_Init+0x74>)
 8001522:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001526:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001528:	4b10      	ldr	r3, [pc, #64]	@ (800156c <MX_ADC1_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <MX_ADC1_Init+0x74>)
 8001530:	2201      	movs	r2, #1
 8001532:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001534:	480d      	ldr	r0, [pc, #52]	@ (800156c <MX_ADC1_Init+0x74>)
 8001536:	f000 fb6f 	bl	8001c18 <HAL_ADC_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001540:	f000 f8cc 	bl	80016dc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001544:	2303      	movs	r3, #3
 8001546:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001548:	2301      	movs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	@ (800156c <MX_ADC1_Init+0x74>)
 8001556:	f000 fe23 	bl	80021a0 <HAL_ADC_ConfigChannel>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001560:	f000 f8bc 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200001f4 	.word	0x200001f4
 8001570:	40012400 	.word	0x40012400

08001574 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001578:	4b12      	ldr	r3, [pc, #72]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800157a:	4a13      	ldr	r2, [pc, #76]	@ (80015c8 <MX_I2C1_Init+0x54>)
 800157c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800157e:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001580:	4a12      	ldr	r2, [pc, #72]	@ (80015cc <MX_I2C1_Init+0x58>)
 8001582:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800158a:	4b0e      	ldr	r3, [pc, #56]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800158c:	2200      	movs	r2, #0
 800158e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <MX_I2C1_Init+0x50>)
 8001592:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001596:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001598:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <MX_I2C1_Init+0x50>)
 800159a:	2200      	movs	r2, #0
 800159c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015a4:	4b07      	ldr	r3, [pc, #28]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015aa:	4b06      	ldr	r3, [pc, #24]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015b0:	4804      	ldr	r0, [pc, #16]	@ (80015c4 <MX_I2C1_Init+0x50>)
 80015b2:	f001 f9f1 	bl	8002998 <HAL_I2C_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015bc:	f000 f88e 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000224 	.word	0x20000224
 80015c8:	40005400 	.word	0x40005400
 80015cc:	000186a0 	.word	0x000186a0

080015d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	@ 0x28
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015d6:	f107 0320 	add.w	r3, r7, #32
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
 80015ee:	615a      	str	r2, [r3, #20]
 80015f0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f2:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <MX_TIM2_Init+0xc4>)
 80015f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015f8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 80015fa:	4b26      	ldr	r3, [pc, #152]	@ (8001694 <MX_TIM2_Init+0xc4>)
 80015fc:	2207      	movs	r2, #7
 80015fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b24      	ldr	r3, [pc, #144]	@ (8001694 <MX_TIM2_Init+0xc4>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001606:	4b23      	ldr	r3, [pc, #140]	@ (8001694 <MX_TIM2_Init+0xc4>)
 8001608:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800160c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b21      	ldr	r3, [pc, #132]	@ (8001694 <MX_TIM2_Init+0xc4>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001614:	4b1f      	ldr	r3, [pc, #124]	@ (8001694 <MX_TIM2_Init+0xc4>)
 8001616:	2200      	movs	r2, #0
 8001618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800161a:	481e      	ldr	r0, [pc, #120]	@ (8001694 <MX_TIM2_Init+0xc4>)
 800161c:	f002 fbd4 	bl	8003dc8 <HAL_TIM_PWM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001626:	f000 f859 	bl	80016dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162e:	2300      	movs	r3, #0
 8001630:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001632:	f107 0320 	add.w	r3, r7, #32
 8001636:	4619      	mov	r1, r3
 8001638:	4816      	ldr	r0, [pc, #88]	@ (8001694 <MX_TIM2_Init+0xc4>)
 800163a:	f002 ff93 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001644:	f000 f84a 	bl	80016dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001648:	2360      	movs	r3, #96	@ 0x60
 800164a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001650:	2300      	movs	r3, #0
 8001652:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001654:	2300      	movs	r3, #0
 8001656:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2200      	movs	r2, #0
 800165c:	4619      	mov	r1, r3
 800165e:	480d      	ldr	r0, [pc, #52]	@ (8001694 <MX_TIM2_Init+0xc4>)
 8001660:	f002 fca4 	bl	8003fac <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800166a:	f000 f837 	bl	80016dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800166e:	1d3b      	adds	r3, r7, #4
 8001670:	2204      	movs	r2, #4
 8001672:	4619      	mov	r1, r3
 8001674:	4807      	ldr	r0, [pc, #28]	@ (8001694 <MX_TIM2_Init+0xc4>)
 8001676:	f002 fc99 	bl	8003fac <HAL_TIM_PWM_ConfigChannel>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001680:	f000 f82c 	bl	80016dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001684:	4803      	ldr	r0, [pc, #12]	@ (8001694 <MX_TIM2_Init+0xc4>)
 8001686:	f000 f8f7 	bl	8001878 <HAL_TIM_MspPostInit>

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	@ 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000278 	.word	0x20000278

08001698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b0e      	ldr	r3, [pc, #56]	@ (80016d8 <MX_GPIO_Init+0x40>)
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	4a0d      	ldr	r2, [pc, #52]	@ (80016d8 <MX_GPIO_Init+0x40>)
 80016a4:	f043 0304 	orr.w	r3, r3, #4
 80016a8:	6193      	str	r3, [r2, #24]
 80016aa:	4b0b      	ldr	r3, [pc, #44]	@ (80016d8 <MX_GPIO_Init+0x40>)
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0304 	and.w	r3, r3, #4
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b08      	ldr	r3, [pc, #32]	@ (80016d8 <MX_GPIO_Init+0x40>)
 80016b8:	699b      	ldr	r3, [r3, #24]
 80016ba:	4a07      	ldr	r2, [pc, #28]	@ (80016d8 <MX_GPIO_Init+0x40>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6193      	str	r3, [r2, #24]
 80016c2:	4b05      	ldr	r3, [pc, #20]	@ (80016d8 <MX_GPIO_Init+0x40>)
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016ce:	bf00      	nop
 80016d0:	370c      	adds	r7, #12
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000

080016dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e0:	b672      	cpsid	i
}
 80016e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e4:	bf00      	nop
 80016e6:	e7fd      	b.n	80016e4 <Error_Handler+0x8>

080016e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_MspInit+0x5c>)
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	4a14      	ldr	r2, [pc, #80]	@ (8001744 <HAL_MspInit+0x5c>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6193      	str	r3, [r2, #24]
 80016fa:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_MspInit+0x5c>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001706:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <HAL_MspInit+0x5c>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	4a0e      	ldr	r2, [pc, #56]	@ (8001744 <HAL_MspInit+0x5c>)
 800170c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001710:	61d3      	str	r3, [r2, #28]
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_MspInit+0x5c>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800171e:	4b0a      	ldr	r3, [pc, #40]	@ (8001748 <HAL_MspInit+0x60>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <HAL_MspInit+0x60>)
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	40021000 	.word	0x40021000
 8001748:	40010000 	.word	0x40010000

0800174c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 0310 	add.w	r3, r7, #16
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a14      	ldr	r2, [pc, #80]	@ (80017b8 <HAL_ADC_MspInit+0x6c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d121      	bne.n	80017b0 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <HAL_ADC_MspInit+0x70>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a12      	ldr	r2, [pc, #72]	@ (80017bc <HAL_ADC_MspInit+0x70>)
 8001772:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <HAL_ADC_MspInit+0x70>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001784:	4b0d      	ldr	r3, [pc, #52]	@ (80017bc <HAL_ADC_MspInit+0x70>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a0c      	ldr	r2, [pc, #48]	@ (80017bc <HAL_ADC_MspInit+0x70>)
 800178a:	f043 0304 	orr.w	r3, r3, #4
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_ADC_MspInit+0x70>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0304 	and.w	r3, r3, #4
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800179c:	2308      	movs	r3, #8
 800179e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017a0:	2303      	movs	r3, #3
 80017a2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a4:	f107 0310 	add.w	r3, r7, #16
 80017a8:	4619      	mov	r1, r3
 80017aa:	4805      	ldr	r0, [pc, #20]	@ (80017c0 <HAL_ADC_MspInit+0x74>)
 80017ac:	f000 ff70 	bl	8002690 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80017b0:	bf00      	nop
 80017b2:	3720      	adds	r7, #32
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40012400 	.word	0x40012400
 80017bc:	40021000 	.word	0x40021000
 80017c0:	40010800 	.word	0x40010800

080017c4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b088      	sub	sp, #32
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <HAL_I2C_MspInit+0x70>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d123      	bne.n	800182c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <HAL_I2C_MspInit+0x74>)
 80017e6:	699b      	ldr	r3, [r3, #24]
 80017e8:	4a13      	ldr	r2, [pc, #76]	@ (8001838 <HAL_I2C_MspInit+0x74>)
 80017ea:	f043 0308 	orr.w	r3, r3, #8
 80017ee:	6193      	str	r3, [r2, #24]
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <HAL_I2C_MspInit+0x74>)
 80017f2:	699b      	ldr	r3, [r3, #24]
 80017f4:	f003 0308 	and.w	r3, r3, #8
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017fc:	23c0      	movs	r3, #192	@ 0xc0
 80017fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001800:	2312      	movs	r3, #18
 8001802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001808:	f107 0310 	add.w	r3, r7, #16
 800180c:	4619      	mov	r1, r3
 800180e:	480b      	ldr	r0, [pc, #44]	@ (800183c <HAL_I2C_MspInit+0x78>)
 8001810:	f000 ff3e 	bl	8002690 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <HAL_I2C_MspInit+0x74>)
 8001816:	69db      	ldr	r3, [r3, #28]
 8001818:	4a07      	ldr	r2, [pc, #28]	@ (8001838 <HAL_I2C_MspInit+0x74>)
 800181a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800181e:	61d3      	str	r3, [r2, #28]
 8001820:	4b05      	ldr	r3, [pc, #20]	@ (8001838 <HAL_I2C_MspInit+0x74>)
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800182c:	bf00      	nop
 800182e:	3720      	adds	r7, #32
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40005400 	.word	0x40005400
 8001838:	40021000 	.word	0x40021000
 800183c:	40010c00 	.word	0x40010c00

08001840 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001850:	d10b      	bne.n	800186a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_TIM_PWM_MspInit+0x34>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_TIM_PWM_MspInit+0x34>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	61d3      	str	r3, [r2, #28]
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_TIM_PWM_MspInit+0x34>)
 8001860:	69db      	ldr	r3, [r3, #28]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr
 8001874:	40021000 	.word	0x40021000

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0310 	add.w	r3, r7, #16
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001896:	d117      	bne.n	80018c8 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001898:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <HAL_TIM_MspPostInit+0x58>)
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	4a0c      	ldr	r2, [pc, #48]	@ (80018d0 <HAL_TIM_MspPostInit+0x58>)
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6193      	str	r3, [r2, #24]
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_TIM_MspPostInit+0x58>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018b0:	2303      	movs	r3, #3
 80018b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2302      	movs	r3, #2
 80018ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018bc:	f107 0310 	add.w	r3, r7, #16
 80018c0:	4619      	mov	r1, r3
 80018c2:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <HAL_TIM_MspPostInit+0x5c>)
 80018c4:	f000 fee4 	bl	8002690 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018c8:	bf00      	nop
 80018ca:	3720      	adds	r7, #32
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40021000 	.word	0x40021000
 80018d4:	40010800 	.word	0x40010800

080018d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <NMI_Handler+0x4>

080018e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <HardFault_Handler+0x4>

080018e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <MemManage_Handler+0x4>

080018f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <BusFault_Handler+0x4>

080018f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018fc:	bf00      	nop
 80018fe:	e7fd      	b.n	80018fc <UsageFault_Handler+0x4>

08001900 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr

08001924 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001928:	f000 f936 	bl	8001b98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return 1;
 8001934:	2301      	movs	r3, #1
}
 8001936:	4618      	mov	r0, r3
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <_kill>:

int _kill(int pid, int sig)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	b082      	sub	sp, #8
 8001942:	af00      	add	r7, sp, #0
 8001944:	6078      	str	r0, [r7, #4]
 8001946:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001948:	f003 fc52 	bl	80051f0 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	2216      	movs	r2, #22
 8001950:	601a      	str	r2, [r3, #0]
  return -1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001956:	4618      	mov	r0, r3
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <_exit>:

void _exit (int status)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001966:	f04f 31ff 	mov.w	r1, #4294967295
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7ff ffe7 	bl	800193e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001970:	bf00      	nop
 8001972:	e7fd      	b.n	8001970 <_exit+0x12>

08001974 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	e00a      	b.n	800199c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001986:	f3af 8000 	nop.w
 800198a:	4601      	mov	r1, r0
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	b2ca      	uxtb	r2, r1
 8001994:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	3301      	adds	r3, #1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	697a      	ldr	r2, [r7, #20]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	dbf0      	blt.n	8001986 <_read+0x12>
  }

  return len;
 80019a4:	687b      	ldr	r3, [r7, #4]
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b086      	sub	sp, #24
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	e009      	b.n	80019d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	1c5a      	adds	r2, r3, #1
 80019c4:	60ba      	str	r2, [r7, #8]
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	697a      	ldr	r2, [r7, #20]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	429a      	cmp	r2, r3
 80019da:	dbf1      	blt.n	80019c0 <_write+0x12>
  }
  return len;
 80019dc:	687b      	ldr	r3, [r7, #4]
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3718      	adds	r7, #24
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <_close>:

int _close(int file)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bc80      	pop	{r7}
 80019fa:	4770      	bx	lr

080019fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr

08001a1a <_isatty>:

int _isatty(int file)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	b083      	sub	sp, #12
 8001a1e:	af00      	add	r7, sp, #0
 8001a20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a22:	2301      	movs	r3, #1
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	60b9      	str	r1, [r7, #8]
 8001a38:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bc80      	pop	{r7}
 8001a44:	4770      	bx	lr
	...

08001a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <_sbrk+0x5c>)
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <_sbrk+0x60>)
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a5c:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d102      	bne.n	8001a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <_sbrk+0x64>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	@ (8001ab0 <_sbrk+0x68>)
 8001a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <_sbrk+0x64>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4413      	add	r3, r2
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d207      	bcs.n	8001a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a78:	f003 fbba 	bl	80051f0 <__errno>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	220c      	movs	r2, #12
 8001a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a82:	f04f 33ff 	mov.w	r3, #4294967295
 8001a86:	e009      	b.n	8001a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a88:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <_sbrk+0x64>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a8e:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	4a05      	ldr	r2, [pc, #20]	@ (8001aac <_sbrk+0x64>)
 8001a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	20005000 	.word	0x20005000
 8001aa8:	00000400 	.word	0x00000400
 8001aac:	200002c0 	.word	0x200002c0
 8001ab0:	20000418 	.word	0x20000418

08001ab4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
   bl  SystemInit
 8001ac0:	f7ff fff8 	bl	8001ab4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ac4:	480b      	ldr	r0, [pc, #44]	@ (8001af4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ac6:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ac8:	4a0c      	ldr	r2, [pc, #48]	@ (8001afc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001acc:	e002      	b.n	8001ad4 <LoopCopyDataInit>

08001ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad2:	3304      	adds	r3, #4

08001ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ad8:	d3f9      	bcc.n	8001ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ada:	4a09      	ldr	r2, [pc, #36]	@ (8001b00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001adc:	4c09      	ldr	r4, [pc, #36]	@ (8001b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae0:	e001      	b.n	8001ae6 <LoopFillZerobss>

08001ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae4:	3204      	adds	r2, #4

08001ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ae8:	d3fb      	bcc.n	8001ae2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aea:	f003 fb87 	bl	80051fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001aee:	f7ff fb61 	bl	80011b4 <main>
  bx lr
 8001af2:	4770      	bx	lr
  ldr r0, =_sdata
 8001af4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001af8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001afc:	08007754 	.word	0x08007754
  ldr r2, =_sbss
 8001b00:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001b04:	20000414 	.word	0x20000414

08001b08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b08:	e7fe      	b.n	8001b08 <ADC1_2_IRQHandler>
	...

08001b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b10:	4b08      	ldr	r3, [pc, #32]	@ (8001b34 <HAL_Init+0x28>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a07      	ldr	r2, [pc, #28]	@ (8001b34 <HAL_Init+0x28>)
 8001b16:	f043 0310 	orr.w	r3, r3, #16
 8001b1a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1c:	2003      	movs	r0, #3
 8001b1e:	f000 fd83 	bl	8002628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b22:	200f      	movs	r0, #15
 8001b24:	f000 f808 	bl	8001b38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b28:	f7ff fdde 	bl	80016e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40022000 	.word	0x40022000

08001b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b40:	4b12      	ldr	r3, [pc, #72]	@ (8001b8c <HAL_InitTick+0x54>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	4b12      	ldr	r3, [pc, #72]	@ (8001b90 <HAL_InitTick+0x58>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	4619      	mov	r1, r3
 8001b4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 fd8d 	bl	8002676 <HAL_SYSTICK_Config>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e00e      	b.n	8001b84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d80a      	bhi.n	8001b82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295
 8001b74:	f000 fd63 	bl	800263e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b78:	4a06      	ldr	r2, [pc, #24]	@ (8001b94 <HAL_InitTick+0x5c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	e000      	b.n	8001b84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	20000004 	.word	0x20000004
 8001b90:	2000000c 	.word	0x2000000c
 8001b94:	20000008 	.word	0x20000008

08001b98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b9c:	4b05      	ldr	r3, [pc, #20]	@ (8001bb4 <HAL_IncTick+0x1c>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	4a03      	ldr	r2, [pc, #12]	@ (8001bb8 <HAL_IncTick+0x20>)
 8001baa:	6013      	str	r3, [r2, #0]
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr
 8001bb4:	2000000c 	.word	0x2000000c
 8001bb8:	200002c4 	.word	0x200002c4

08001bbc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return uwTick;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <HAL_GetTick+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	200002c4 	.word	0x200002c4

08001bd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff fff0 	bl	8001bbc <HAL_GetTick>
 8001bdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be8:	d005      	beq.n	8001bf6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bea:	4b0a      	ldr	r3, [pc, #40]	@ (8001c14 <HAL_Delay+0x44>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bf6:	bf00      	nop
 8001bf8:	f7ff ffe0 	bl	8001bbc <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d8f7      	bhi.n	8001bf8 <HAL_Delay+0x28>
  {
  }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	2000000c 	.word	0x2000000c

08001c18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001c24:	2300      	movs	r3, #0
 8001c26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e0be      	b.n	8001db8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d109      	bne.n	8001c5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fd78 	bl	800174c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 fbf1 	bl	8002444 <ADC_ConversionStop_Disable>
 8001c62:	4603      	mov	r3, r0
 8001c64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	f040 8099 	bne.w	8001da6 <HAL_ADC_Init+0x18e>
 8001c74:	7dfb      	ldrb	r3, [r7, #23]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f040 8095 	bne.w	8001da6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c84:	f023 0302 	bic.w	r3, r3, #2
 8001c88:	f043 0202 	orr.w	r2, r3, #2
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	7b1b      	ldrb	r3, [r3, #12]
 8001c9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ca0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001cb0:	d003      	beq.n	8001cba <HAL_ADC_Init+0xa2>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_ADC_Init+0xa8>
 8001cba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cbe:	e000      	b.n	8001cc2 <HAL_ADC_Init+0xaa>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	7d1b      	ldrb	r3, [r3, #20]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d119      	bne.n	8001d04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	7b1b      	ldrb	r3, [r3, #12]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d109      	bne.n	8001cec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	035a      	lsls	r2, r3, #13
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ce8:	613b      	str	r3, [r7, #16]
 8001cea:	e00b      	b.n	8001d04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfc:	f043 0201 	orr.w	r2, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	4b28      	ldr	r3, [pc, #160]	@ (8001dc0 <HAL_ADC_Init+0x1a8>)
 8001d20:	4013      	ands	r3, r2
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6812      	ldr	r2, [r2, #0]
 8001d26:	68b9      	ldr	r1, [r7, #8]
 8001d28:	430b      	orrs	r3, r1
 8001d2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d34:	d003      	beq.n	8001d3e <HAL_ADC_Init+0x126>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d104      	bne.n	8001d48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	691b      	ldr	r3, [r3, #16]
 8001d42:	3b01      	subs	r3, #1
 8001d44:	051b      	lsls	r3, r3, #20
 8001d46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68fa      	ldr	r2, [r7, #12]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	4b18      	ldr	r3, [pc, #96]	@ (8001dc4 <HAL_ADC_Init+0x1ac>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d10b      	bne.n	8001d84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d76:	f023 0303 	bic.w	r3, r3, #3
 8001d7a:	f043 0201 	orr.w	r2, r3, #1
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001d82:	e018      	b.n	8001db6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	f023 0312 	bic.w	r3, r3, #18
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001da4:	e007      	b.n	8001db6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001daa:	f043 0210 	orr.w	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	ffe1f7fd 	.word	0xffe1f7fd
 8001dc4:	ff1f0efe 	.word	0xff1f0efe

08001dc8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b084      	sub	sp, #16
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d101      	bne.n	8001de2 <HAL_ADC_Start+0x1a>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e098      	b.n	8001f14 <HAL_ADC_Start+0x14c>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 fad0 	bl	8002390 <ADC_Enable>
 8001df0:	4603      	mov	r3, r0
 8001df2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f040 8087 	bne.w	8001f0a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a41      	ldr	r2, [pc, #260]	@ (8001f1c <HAL_ADC_Start+0x154>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d105      	bne.n	8001e26 <HAL_ADC_Start+0x5e>
 8001e1a:	4b41      	ldr	r3, [pc, #260]	@ (8001f20 <HAL_ADC_Start+0x158>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d115      	bne.n	8001e52 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d026      	beq.n	8001e8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e44:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e48:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e50:	e01d      	b.n	8001e8e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e56:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2f      	ldr	r2, [pc, #188]	@ (8001f20 <HAL_ADC_Start+0x158>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d004      	beq.n	8001e72 <HAL_ADC_Start+0xaa>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f1c <HAL_ADC_Start+0x154>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d10d      	bne.n	8001e8e <HAL_ADC_Start+0xc6>
 8001e72:	4b2b      	ldr	r3, [pc, #172]	@ (8001f20 <HAL_ADC_Start+0x158>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e82:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e86:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9e:	f023 0206 	bic.w	r2, r3, #6
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001ea6:	e002      	b.n	8001eae <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f06f 0202 	mvn.w	r2, #2
 8001ebe:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001eca:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001ece:	d113      	bne.n	8001ef8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ed4:	4a11      	ldr	r2, [pc, #68]	@ (8001f1c <HAL_ADC_Start+0x154>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d105      	bne.n	8001ee6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_ADC_Start+0x158>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d108      	bne.n	8001ef8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	689a      	ldr	r2, [r3, #8]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001ef4:	609a      	str	r2, [r3, #8]
 8001ef6:	e00c      	b.n	8001f12 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3710      	adds	r7, #16
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40012800 	.word	0x40012800
 8001f20:	40012400 	.word	0x40012400

08001f24 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_ADC_Stop+0x1a>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e01a      	b.n	8001f74 <HAL_ADC_Stop+0x50>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2201      	movs	r2, #1
 8001f42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 fa7c 	bl	8002444 <ADC_ConversionStop_Disable>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f5a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001f5e:	f023 0301 	bic.w	r3, r3, #1
 8001f62:	f043 0201 	orr.w	r2, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001f92:	f7ff fe13 	bl	8001bbc <HAL_GetTick>
 8001f96:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00b      	beq.n	8001fbe <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001faa:	f043 0220 	orr.w	r2, r3, #32
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0d3      	b.n	8002166 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d131      	bne.n	8002030 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d12a      	bne.n	8002030 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001fda:	e021      	b.n	8002020 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fe2:	d01d      	beq.n	8002020 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d007      	beq.n	8001ffa <HAL_ADC_PollForConversion+0x7e>
 8001fea:	f7ff fde7 	bl	8001bbc <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d212      	bcs.n	8002020 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10b      	bne.n	8002020 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0a2      	b.n	8002166 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d0d6      	beq.n	8001fdc <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800202e:	e070      	b.n	8002112 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002030:	4b4f      	ldr	r3, [pc, #316]	@ (8002170 <HAL_ADC_PollForConversion+0x1f4>)
 8002032:	681c      	ldr	r4, [r3, #0]
 8002034:	2002      	movs	r0, #2
 8002036:	f001 fe11 	bl	8003c5c <HAL_RCCEx_GetPeriphCLKFreq>
 800203a:	4603      	mov	r3, r0
 800203c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6919      	ldr	r1, [r3, #16]
 8002046:	4b4b      	ldr	r3, [pc, #300]	@ (8002174 <HAL_ADC_PollForConversion+0x1f8>)
 8002048:	400b      	ands	r3, r1
 800204a:	2b00      	cmp	r3, #0
 800204c:	d118      	bne.n	8002080 <HAL_ADC_PollForConversion+0x104>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68d9      	ldr	r1, [r3, #12]
 8002054:	4b48      	ldr	r3, [pc, #288]	@ (8002178 <HAL_ADC_PollForConversion+0x1fc>)
 8002056:	400b      	ands	r3, r1
 8002058:	2b00      	cmp	r3, #0
 800205a:	d111      	bne.n	8002080 <HAL_ADC_PollForConversion+0x104>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6919      	ldr	r1, [r3, #16]
 8002062:	4b46      	ldr	r3, [pc, #280]	@ (800217c <HAL_ADC_PollForConversion+0x200>)
 8002064:	400b      	ands	r3, r1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d108      	bne.n	800207c <HAL_ADC_PollForConversion+0x100>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68d9      	ldr	r1, [r3, #12]
 8002070:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <HAL_ADC_PollForConversion+0x204>)
 8002072:	400b      	ands	r3, r1
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_ADC_PollForConversion+0x100>
 8002078:	2314      	movs	r3, #20
 800207a:	e020      	b.n	80020be <HAL_ADC_PollForConversion+0x142>
 800207c:	2329      	movs	r3, #41	@ 0x29
 800207e:	e01e      	b.n	80020be <HAL_ADC_PollForConversion+0x142>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	4b3d      	ldr	r3, [pc, #244]	@ (800217c <HAL_ADC_PollForConversion+0x200>)
 8002088:	400b      	ands	r3, r1
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <HAL_ADC_PollForConversion+0x120>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68d9      	ldr	r1, [r3, #12]
 8002094:	4b3a      	ldr	r3, [pc, #232]	@ (8002180 <HAL_ADC_PollForConversion+0x204>)
 8002096:	400b      	ands	r3, r1
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_ADC_PollForConversion+0x13c>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6919      	ldr	r1, [r3, #16]
 80020a2:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <HAL_ADC_PollForConversion+0x208>)
 80020a4:	400b      	ands	r3, r1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d108      	bne.n	80020bc <HAL_ADC_PollForConversion+0x140>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68d9      	ldr	r1, [r3, #12]
 80020b0:	4b34      	ldr	r3, [pc, #208]	@ (8002184 <HAL_ADC_PollForConversion+0x208>)
 80020b2:	400b      	ands	r3, r1
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_ADC_PollForConversion+0x140>
 80020b8:	2354      	movs	r3, #84	@ 0x54
 80020ba:	e000      	b.n	80020be <HAL_ADC_PollForConversion+0x142>
 80020bc:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 80020be:	fb02 f303 	mul.w	r3, r2, r3
 80020c2:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020c4:	e021      	b.n	800210a <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020cc:	d01a      	beq.n	8002104 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_ADC_PollForConversion+0x168>
 80020d4:	f7ff fd72 	bl	8001bbc <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d20f      	bcs.n	8002104 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d90b      	bls.n	8002104 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020f0:	f043 0204 	orr.w	r2, r3, #4
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e030      	b.n	8002166 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	3301      	adds	r3, #1
 8002108:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	429a      	cmp	r2, r3
 8002110:	d8d9      	bhi.n	80020c6 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f06f 0212 	mvn.w	r2, #18
 800211a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002120:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002132:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002136:	d115      	bne.n	8002164 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800213c:	2b00      	cmp	r3, #0
 800213e:	d111      	bne.n	8002164 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002144:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800215c:	f043 0201 	orr.w	r2, r3, #1
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	20000004 	.word	0x20000004
 8002174:	24924924 	.word	0x24924924
 8002178:	00924924 	.word	0x00924924
 800217c:	12492492 	.word	0x12492492
 8002180:	00492492 	.word	0x00492492
 8002184:	00249249 	.word	0x00249249

08002188 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021aa:	2300      	movs	r3, #0
 80021ac:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x20>
 80021bc:	2302      	movs	r3, #2
 80021be:	e0dc      	b.n	800237a <HAL_ADC_ConfigChannel+0x1da>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b06      	cmp	r3, #6
 80021ce:	d81c      	bhi.n	800220a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685a      	ldr	r2, [r3, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	3b05      	subs	r3, #5
 80021e2:	221f      	movs	r2, #31
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	4019      	ands	r1, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	6818      	ldr	r0, [r3, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685a      	ldr	r2, [r3, #4]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	3b05      	subs	r3, #5
 80021fc:	fa00 f203 	lsl.w	r2, r0, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	430a      	orrs	r2, r1
 8002206:	635a      	str	r2, [r3, #52]	@ 0x34
 8002208:	e03c      	b.n	8002284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d81c      	bhi.n	800224c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	3b23      	subs	r3, #35	@ 0x23
 8002224:	221f      	movs	r2, #31
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	4019      	ands	r1, r3
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	6818      	ldr	r0, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685a      	ldr	r2, [r3, #4]
 8002236:	4613      	mov	r3, r2
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	3b23      	subs	r3, #35	@ 0x23
 800223e:	fa00 f203 	lsl.w	r2, r0, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	631a      	str	r2, [r3, #48]	@ 0x30
 800224a:	e01b      	b.n	8002284 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	3b41      	subs	r3, #65	@ 0x41
 800225e:	221f      	movs	r2, #31
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	4019      	ands	r1, r3
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6818      	ldr	r0, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	3b41      	subs	r3, #65	@ 0x41
 8002278:	fa00 f203 	lsl.w	r2, r0, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	430a      	orrs	r2, r1
 8002282:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d91c      	bls.n	80022c6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	4613      	mov	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4413      	add	r3, r2
 800229c:	3b1e      	subs	r3, #30
 800229e:	2207      	movs	r2, #7
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	4019      	ands	r1, r3
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	6898      	ldr	r0, [r3, #8]
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	4613      	mov	r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	4413      	add	r3, r2
 80022b6:	3b1e      	subs	r3, #30
 80022b8:	fa00 f203 	lsl.w	r2, r0, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	60da      	str	r2, [r3, #12]
 80022c4:	e019      	b.n	80022fa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6919      	ldr	r1, [r3, #16]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4413      	add	r3, r2
 80022d6:	2207      	movs	r2, #7
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	4019      	ands	r1, r3
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	6898      	ldr	r0, [r3, #8]
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	fa00 f203 	lsl.w	r2, r0, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	430a      	orrs	r2, r1
 80022f8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b10      	cmp	r3, #16
 8002300:	d003      	beq.n	800230a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002306:	2b11      	cmp	r3, #17
 8002308:	d132      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1d      	ldr	r2, [pc, #116]	@ (8002384 <HAL_ADC_ConfigChannel+0x1e4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d125      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d126      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002330:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b10      	cmp	r3, #16
 8002338:	d11a      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800233a:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <HAL_ADC_ConfigChannel+0x1e8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a13      	ldr	r2, [pc, #76]	@ (800238c <HAL_ADC_ConfigChannel+0x1ec>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	0c9a      	lsrs	r2, r3, #18
 8002346:	4613      	mov	r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4413      	add	r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002350:	e002      	b.n	8002358 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3b01      	subs	r3, #1
 8002356:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1f9      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x1b2>
 800235e:	e007      	b.n	8002370 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002364:	f043 0220 	orr.w	r2, r3, #32
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002378:	7bfb      	ldrb	r3, [r7, #15]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3714      	adds	r7, #20
 800237e:	46bd      	mov	sp, r7
 8002380:	bc80      	pop	{r7}
 8002382:	4770      	bx	lr
 8002384:	40012400 	.word	0x40012400
 8002388:	20000004 	.word	0x20000004
 800238c:	431bde83 	.word	0x431bde83

08002390 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d040      	beq.n	8002430 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023be:	4b1f      	ldr	r3, [pc, #124]	@ (800243c <ADC_Enable+0xac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a1f      	ldr	r2, [pc, #124]	@ (8002440 <ADC_Enable+0xb0>)
 80023c4:	fba2 2303 	umull	r2, r3, r2, r3
 80023c8:	0c9b      	lsrs	r3, r3, #18
 80023ca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023cc:	e002      	b.n	80023d4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023da:	f7ff fbef 	bl	8001bbc <HAL_GetTick>
 80023de:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80023e0:	e01f      	b.n	8002422 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80023e2:	f7ff fbeb 	bl	8001bbc <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d918      	bls.n	8002422 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d011      	beq.n	8002422 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002402:	f043 0210 	orr.w	r2, r3, #16
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240e:	f043 0201 	orr.w	r2, r3, #1
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e007      	b.n	8002432 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d1d8      	bne.n	80023e2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000004 	.word	0x20000004
 8002440:	431bde83 	.word	0x431bde83

08002444 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b01      	cmp	r3, #1
 800245c:	d12e      	bne.n	80024bc <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0201 	bic.w	r2, r2, #1
 800246c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800246e:	f7ff fba5 	bl	8001bbc <HAL_GetTick>
 8002472:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002474:	e01b      	b.n	80024ae <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002476:	f7ff fba1 	bl	8001bbc <HAL_GetTick>
 800247a:	4602      	mov	r2, r0
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1ad3      	subs	r3, r2, r3
 8002480:	2b02      	cmp	r3, #2
 8002482:	d914      	bls.n	80024ae <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b01      	cmp	r3, #1
 8002490:	d10d      	bne.n	80024ae <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024a2:	f043 0201 	orr.w	r2, r3, #1
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e007      	b.n	80024be <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d0dc      	beq.n	8002476 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	@ (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	bc80      	pop	{r7}
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	@ (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	6039      	str	r1, [r7, #0]
 8002536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	db0a      	blt.n	8002556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	b2da      	uxtb	r2, r3
 8002544:	490c      	ldr	r1, [pc, #48]	@ (8002578 <__NVIC_SetPriority+0x4c>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	0112      	lsls	r2, r2, #4
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	440b      	add	r3, r1
 8002550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002554:	e00a      	b.n	800256c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	b2da      	uxtb	r2, r3
 800255a:	4908      	ldr	r1, [pc, #32]	@ (800257c <__NVIC_SetPriority+0x50>)
 800255c:	79fb      	ldrb	r3, [r7, #7]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	3b04      	subs	r3, #4
 8002564:	0112      	lsls	r2, r2, #4
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	440b      	add	r3, r1
 800256a:	761a      	strb	r2, [r3, #24]
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	e000e100 	.word	0xe000e100
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002580:	b480      	push	{r7}
 8002582:	b089      	sub	sp, #36	@ 0x24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f1c3 0307 	rsb	r3, r3, #7
 800259a:	2b04      	cmp	r3, #4
 800259c:	bf28      	it	cs
 800259e:	2304      	movcs	r3, #4
 80025a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3304      	adds	r3, #4
 80025a6:	2b06      	cmp	r3, #6
 80025a8:	d902      	bls.n	80025b0 <NVIC_EncodePriority+0x30>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3b03      	subs	r3, #3
 80025ae:	e000      	b.n	80025b2 <NVIC_EncodePriority+0x32>
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	fa02 f303 	lsl.w	r3, r2, r3
 80025be:	43da      	mvns	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	401a      	ands	r2, r3
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c8:	f04f 31ff 	mov.w	r1, #4294967295
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	fa01 f303 	lsl.w	r3, r1, r3
 80025d2:	43d9      	mvns	r1, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d8:	4313      	orrs	r3, r2
         );
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3724      	adds	r7, #36	@ 0x24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025f4:	d301      	bcc.n	80025fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f6:	2301      	movs	r3, #1
 80025f8:	e00f      	b.n	800261a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002624 <SysTick_Config+0x40>)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002602:	210f      	movs	r1, #15
 8002604:	f04f 30ff 	mov.w	r0, #4294967295
 8002608:	f7ff ff90 	bl	800252c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800260c:	4b05      	ldr	r3, [pc, #20]	@ (8002624 <SysTick_Config+0x40>)
 800260e:	2200      	movs	r2, #0
 8002610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002612:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <SysTick_Config+0x40>)
 8002614:	2207      	movs	r2, #7
 8002616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	e000e010 	.word	0xe000e010

08002628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff49 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263e:	b580      	push	{r7, lr}
 8002640:	b086      	sub	sp, #24
 8002642:	af00      	add	r7, sp, #0
 8002644:	4603      	mov	r3, r0
 8002646:	60b9      	str	r1, [r7, #8]
 8002648:	607a      	str	r2, [r7, #4]
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002650:	f7ff ff5e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	68b9      	ldr	r1, [r7, #8]
 800265a:	6978      	ldr	r0, [r7, #20]
 800265c:	f7ff ff90 	bl	8002580 <NVIC_EncodePriority>
 8002660:	4602      	mov	r2, r0
 8002662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff5f 	bl	800252c <__NVIC_SetPriority>
}
 800266e:	bf00      	nop
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffb0 	bl	80025e4 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
	...

08002690 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002690:	b480      	push	{r7}
 8002692:	b08b      	sub	sp, #44	@ 0x2c
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800269a:	2300      	movs	r3, #0
 800269c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800269e:	2300      	movs	r3, #0
 80026a0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80026a2:	e169      	b.n	8002978 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80026a4:	2201      	movs	r2, #1
 80026a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69fa      	ldr	r2, [r7, #28]
 80026b4:	4013      	ands	r3, r2
 80026b6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	429a      	cmp	r2, r3
 80026be:	f040 8158 	bne.w	8002972 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	4a9a      	ldr	r2, [pc, #616]	@ (8002930 <HAL_GPIO_Init+0x2a0>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d05e      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026cc:	4a98      	ldr	r2, [pc, #608]	@ (8002930 <HAL_GPIO_Init+0x2a0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d875      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026d2:	4a98      	ldr	r2, [pc, #608]	@ (8002934 <HAL_GPIO_Init+0x2a4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d058      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026d8:	4a96      	ldr	r2, [pc, #600]	@ (8002934 <HAL_GPIO_Init+0x2a4>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d86f      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026de:	4a96      	ldr	r2, [pc, #600]	@ (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d052      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026e4:	4a94      	ldr	r2, [pc, #592]	@ (8002938 <HAL_GPIO_Init+0x2a8>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d869      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026ea:	4a94      	ldr	r2, [pc, #592]	@ (800293c <HAL_GPIO_Init+0x2ac>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d04c      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026f0:	4a92      	ldr	r2, [pc, #584]	@ (800293c <HAL_GPIO_Init+0x2ac>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d863      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 80026f6:	4a92      	ldr	r2, [pc, #584]	@ (8002940 <HAL_GPIO_Init+0x2b0>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d046      	beq.n	800278a <HAL_GPIO_Init+0xfa>
 80026fc:	4a90      	ldr	r2, [pc, #576]	@ (8002940 <HAL_GPIO_Init+0x2b0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d85d      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 8002702:	2b12      	cmp	r3, #18
 8002704:	d82a      	bhi.n	800275c <HAL_GPIO_Init+0xcc>
 8002706:	2b12      	cmp	r3, #18
 8002708:	d859      	bhi.n	80027be <HAL_GPIO_Init+0x12e>
 800270a:	a201      	add	r2, pc, #4	@ (adr r2, 8002710 <HAL_GPIO_Init+0x80>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	0800278b 	.word	0x0800278b
 8002714:	08002765 	.word	0x08002765
 8002718:	08002777 	.word	0x08002777
 800271c:	080027b9 	.word	0x080027b9
 8002720:	080027bf 	.word	0x080027bf
 8002724:	080027bf 	.word	0x080027bf
 8002728:	080027bf 	.word	0x080027bf
 800272c:	080027bf 	.word	0x080027bf
 8002730:	080027bf 	.word	0x080027bf
 8002734:	080027bf 	.word	0x080027bf
 8002738:	080027bf 	.word	0x080027bf
 800273c:	080027bf 	.word	0x080027bf
 8002740:	080027bf 	.word	0x080027bf
 8002744:	080027bf 	.word	0x080027bf
 8002748:	080027bf 	.word	0x080027bf
 800274c:	080027bf 	.word	0x080027bf
 8002750:	080027bf 	.word	0x080027bf
 8002754:	0800276d 	.word	0x0800276d
 8002758:	08002781 	.word	0x08002781
 800275c:	4a79      	ldr	r2, [pc, #484]	@ (8002944 <HAL_GPIO_Init+0x2b4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002762:	e02c      	b.n	80027be <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	623b      	str	r3, [r7, #32]
          break;
 800276a:	e029      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	3304      	adds	r3, #4
 8002772:	623b      	str	r3, [r7, #32]
          break;
 8002774:	e024      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	3308      	adds	r3, #8
 800277c:	623b      	str	r3, [r7, #32]
          break;
 800277e:	e01f      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	330c      	adds	r3, #12
 8002786:	623b      	str	r3, [r7, #32]
          break;
 8002788:	e01a      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d102      	bne.n	8002798 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002792:	2304      	movs	r3, #4
 8002794:	623b      	str	r3, [r7, #32]
          break;
 8002796:	e013      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d105      	bne.n	80027ac <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027a0:	2308      	movs	r3, #8
 80027a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	611a      	str	r2, [r3, #16]
          break;
 80027aa:	e009      	b.n	80027c0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80027ac:	2308      	movs	r3, #8
 80027ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69fa      	ldr	r2, [r7, #28]
 80027b4:	615a      	str	r2, [r3, #20]
          break;
 80027b6:	e003      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
          break;
 80027bc:	e000      	b.n	80027c0 <HAL_GPIO_Init+0x130>
          break;
 80027be:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2bff      	cmp	r3, #255	@ 0xff
 80027c4:	d801      	bhi.n	80027ca <HAL_GPIO_Init+0x13a>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	e001      	b.n	80027ce <HAL_GPIO_Init+0x13e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	3304      	adds	r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2bff      	cmp	r3, #255	@ 0xff
 80027d4:	d802      	bhi.n	80027dc <HAL_GPIO_Init+0x14c>
 80027d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	e002      	b.n	80027e2 <HAL_GPIO_Init+0x152>
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	3b08      	subs	r3, #8
 80027e0:	009b      	lsls	r3, r3, #2
 80027e2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	210f      	movs	r1, #15
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	401a      	ands	r2, r3
 80027f4:	6a39      	ldr	r1, [r7, #32]
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	fa01 f303 	lsl.w	r3, r1, r3
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	f000 80b1 	beq.w	8002972 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002810:	4b4d      	ldr	r3, [pc, #308]	@ (8002948 <HAL_GPIO_Init+0x2b8>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a4c      	ldr	r2, [pc, #304]	@ (8002948 <HAL_GPIO_Init+0x2b8>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b4a      	ldr	r3, [pc, #296]	@ (8002948 <HAL_GPIO_Init+0x2b8>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002828:	4a48      	ldr	r2, [pc, #288]	@ (800294c <HAL_GPIO_Init+0x2bc>)
 800282a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002834:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	009b      	lsls	r3, r3, #2
 800283e:	220f      	movs	r2, #15
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4013      	ands	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a40      	ldr	r2, [pc, #256]	@ (8002950 <HAL_GPIO_Init+0x2c0>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d013      	beq.n	800287c <HAL_GPIO_Init+0x1ec>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3f      	ldr	r2, [pc, #252]	@ (8002954 <HAL_GPIO_Init+0x2c4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00d      	beq.n	8002878 <HAL_GPIO_Init+0x1e8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3e      	ldr	r2, [pc, #248]	@ (8002958 <HAL_GPIO_Init+0x2c8>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <HAL_GPIO_Init+0x1e4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3d      	ldr	r2, [pc, #244]	@ (800295c <HAL_GPIO_Init+0x2cc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d101      	bne.n	8002870 <HAL_GPIO_Init+0x1e0>
 800286c:	2303      	movs	r3, #3
 800286e:	e006      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002870:	2304      	movs	r3, #4
 8002872:	e004      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002874:	2302      	movs	r3, #2
 8002876:	e002      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_GPIO_Init+0x1ee>
 800287c:	2300      	movs	r3, #0
 800287e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002880:	f002 0203 	and.w	r2, r2, #3
 8002884:	0092      	lsls	r2, r2, #2
 8002886:	4093      	lsls	r3, r2
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800288e:	492f      	ldr	r1, [pc, #188]	@ (800294c <HAL_GPIO_Init+0x2bc>)
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	089b      	lsrs	r3, r3, #2
 8002894:	3302      	adds	r3, #2
 8002896:	68fa      	ldr	r2, [r7, #12]
 8002898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d006      	beq.n	80028b6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80028a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	492c      	ldr	r1, [pc, #176]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	608b      	str	r3, [r1, #8]
 80028b4:	e006      	b.n	80028c4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80028b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	43db      	mvns	r3, r3
 80028be:	4928      	ldr	r1, [pc, #160]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d006      	beq.n	80028de <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80028d0:	4b23      	ldr	r3, [pc, #140]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d2:	68da      	ldr	r2, [r3, #12]
 80028d4:	4922      	ldr	r1, [pc, #136]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	60cb      	str	r3, [r1, #12]
 80028dc:	e006      	b.n	80028ec <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80028de:	4b20      	ldr	r3, [pc, #128]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e0:	68da      	ldr	r2, [r3, #12]
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	43db      	mvns	r3, r3
 80028e6:	491e      	ldr	r1, [pc, #120]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d006      	beq.n	8002906 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80028f8:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	4918      	ldr	r1, [pc, #96]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e006      	b.n	8002914 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002906:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	43db      	mvns	r3, r3
 800290e:	4914      	ldr	r1, [pc, #80]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 8002910:	4013      	ands	r3, r2
 8002912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d021      	beq.n	8002964 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002920:	4b0f      	ldr	r3, [pc, #60]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	490e      	ldr	r1, [pc, #56]	@ (8002960 <HAL_GPIO_Init+0x2d0>)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	600b      	str	r3, [r1, #0]
 800292c:	e021      	b.n	8002972 <HAL_GPIO_Init+0x2e2>
 800292e:	bf00      	nop
 8002930:	10320000 	.word	0x10320000
 8002934:	10310000 	.word	0x10310000
 8002938:	10220000 	.word	0x10220000
 800293c:	10210000 	.word	0x10210000
 8002940:	10120000 	.word	0x10120000
 8002944:	10110000 	.word	0x10110000
 8002948:	40021000 	.word	0x40021000
 800294c:	40010000 	.word	0x40010000
 8002950:	40010800 	.word	0x40010800
 8002954:	40010c00 	.word	0x40010c00
 8002958:	40011000 	.word	0x40011000
 800295c:	40011400 	.word	0x40011400
 8002960:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002964:	4b0b      	ldr	r3, [pc, #44]	@ (8002994 <HAL_GPIO_Init+0x304>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	43db      	mvns	r3, r3
 800296c:	4909      	ldr	r1, [pc, #36]	@ (8002994 <HAL_GPIO_Init+0x304>)
 800296e:	4013      	ands	r3, r2
 8002970:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	3301      	adds	r3, #1
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297e:	fa22 f303 	lsr.w	r3, r2, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	f47f ae8e 	bne.w	80026a4 <HAL_GPIO_Init+0x14>
  }
}
 8002988:	bf00      	nop
 800298a:	bf00      	nop
 800298c:	372c      	adds	r7, #44	@ 0x2c
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40010400 	.word	0x40010400

08002998 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e12b      	b.n	8002c02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f7fe ff00 	bl	80017c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	@ 0x24
 80029c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f022 0201 	bic.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029fc:	f001 f832 	bl	8003a64 <HAL_RCC_GetPCLK1Freq>
 8002a00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a81      	ldr	r2, [pc, #516]	@ (8002c0c <HAL_I2C_Init+0x274>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d807      	bhi.n	8002a1c <HAL_I2C_Init+0x84>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a80      	ldr	r2, [pc, #512]	@ (8002c10 <HAL_I2C_Init+0x278>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	bf94      	ite	ls
 8002a14:	2301      	movls	r3, #1
 8002a16:	2300      	movhi	r3, #0
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	e006      	b.n	8002a2a <HAL_I2C_Init+0x92>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4a7d      	ldr	r2, [pc, #500]	@ (8002c14 <HAL_I2C_Init+0x27c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	bf94      	ite	ls
 8002a24:	2301      	movls	r3, #1
 8002a26:	2300      	movhi	r3, #0
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0e7      	b.n	8002c02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	4a78      	ldr	r2, [pc, #480]	@ (8002c18 <HAL_I2C_Init+0x280>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	0c9b      	lsrs	r3, r3, #18
 8002a3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	68ba      	ldr	r2, [r7, #8]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	4a6a      	ldr	r2, [pc, #424]	@ (8002c0c <HAL_I2C_Init+0x274>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d802      	bhi.n	8002a6c <HAL_I2C_Init+0xd4>
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	e009      	b.n	8002a80 <HAL_I2C_Init+0xe8>
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002a72:	fb02 f303 	mul.w	r3, r2, r3
 8002a76:	4a69      	ldr	r2, [pc, #420]	@ (8002c1c <HAL_I2C_Init+0x284>)
 8002a78:	fba2 2303 	umull	r2, r3, r2, r3
 8002a7c:	099b      	lsrs	r3, r3, #6
 8002a7e:	3301      	adds	r3, #1
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6812      	ldr	r2, [r2, #0]
 8002a84:	430b      	orrs	r3, r1
 8002a86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	69db      	ldr	r3, [r3, #28]
 8002a8e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a92:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	495c      	ldr	r1, [pc, #368]	@ (8002c0c <HAL_I2C_Init+0x274>)
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	d819      	bhi.n	8002ad4 <HAL_I2C_Init+0x13c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e59      	subs	r1, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aae:	1c59      	adds	r1, r3, #1
 8002ab0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002ab4:	400b      	ands	r3, r1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d00a      	beq.n	8002ad0 <HAL_I2C_Init+0x138>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1e59      	subs	r1, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac8:	3301      	adds	r3, #1
 8002aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ace:	e051      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	e04f      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d111      	bne.n	8002b00 <HAL_I2C_Init+0x168>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e58      	subs	r0, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6859      	ldr	r1, [r3, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	440b      	add	r3, r1
 8002aea:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aee:	3301      	adds	r3, #1
 8002af0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	bf0c      	ite	eq
 8002af8:	2301      	moveq	r3, #1
 8002afa:	2300      	movne	r3, #0
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	e012      	b.n	8002b26 <HAL_I2C_Init+0x18e>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e58      	subs	r0, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	0099      	lsls	r1, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <HAL_I2C_Init+0x196>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e022      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10e      	bne.n	8002b54 <HAL_I2C_Init+0x1bc>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	1e58      	subs	r0, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6859      	ldr	r1, [r3, #4]
 8002b3e:	460b      	mov	r3, r1
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	440b      	add	r3, r1
 8002b44:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b48:	3301      	adds	r3, #1
 8002b4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b52:	e00f      	b.n	8002b74 <HAL_I2C_Init+0x1dc>
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1e58      	subs	r0, r3, #1
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6859      	ldr	r1, [r3, #4]
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	0099      	lsls	r1, r3, #2
 8002b64:	440b      	add	r3, r1
 8002b66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b70:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	6809      	ldr	r1, [r1, #0]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	69da      	ldr	r2, [r3, #28]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002ba2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6911      	ldr	r1, [r2, #16]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	68d2      	ldr	r2, [r2, #12]
 8002bae:	4311      	orrs	r1, r2
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2220      	movs	r2, #32
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	000186a0 	.word	0x000186a0
 8002c10:	001e847f 	.word	0x001e847f
 8002c14:	003d08ff 	.word	0x003d08ff
 8002c18:	431bde83 	.word	0x431bde83
 8002c1c:	10624dd3 	.word	0x10624dd3

08002c20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af02      	add	r7, sp, #8
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	607a      	str	r2, [r7, #4]
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	817b      	strh	r3, [r7, #10]
 8002c30:	4613      	mov	r3, r2
 8002c32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c34:	f7fe ffc2 	bl	8001bbc <HAL_GetTick>
 8002c38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	f040 80e0 	bne.w	8002e08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	9300      	str	r3, [sp, #0]
 8002c4c:	2319      	movs	r3, #25
 8002c4e:	2201      	movs	r2, #1
 8002c50:	4970      	ldr	r1, [pc, #448]	@ (8002e14 <HAL_I2C_Master_Transmit+0x1f4>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f964 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
 8002c60:	e0d3      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_I2C_Master_Transmit+0x50>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e0cc      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x1ea>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d007      	beq.n	8002c96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0201 	orr.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2221      	movs	r2, #33	@ 0x21
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2210      	movs	r2, #16
 8002cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	893a      	ldrh	r2, [r7, #8]
 8002cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a50      	ldr	r2, [pc, #320]	@ (8002e18 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cd6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002cd8:	8979      	ldrh	r1, [r7, #10]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	6a3a      	ldr	r2, [r7, #32]
 8002cde:	68f8      	ldr	r0, [r7, #12]
 8002ce0:	f000 f89c 	bl	8002e1c <I2C_MasterRequestWrite>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e08d      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	695b      	ldr	r3, [r3, #20]
 8002cf8:	613b      	str	r3, [r7, #16]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	613b      	str	r3, [r7, #16]
 8002d02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d04:	e066      	b.n	8002dd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	6a39      	ldr	r1, [r7, #32]
 8002d0a:	68f8      	ldr	r0, [r7, #12]
 8002d0c:	f000 fa22 	bl	8003154 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d10:	4603      	mov	r3, r0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00d      	beq.n	8002d32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d107      	bne.n	8002d2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e06b      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	781a      	ldrb	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d4c:	b29b      	uxth	r3, r3
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d11b      	bne.n	8002da8 <HAL_I2C_Master_Transmit+0x188>
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d017      	beq.n	8002da8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d88:	1c5a      	adds	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b29a      	uxth	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da8:	697a      	ldr	r2, [r7, #20]
 8002daa:	6a39      	ldr	r1, [r7, #32]
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fa19 	bl	80031e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00d      	beq.n	8002dd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d107      	bne.n	8002dd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e01a      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d194      	bne.n	8002d06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	e000      	b.n	8002e0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e08:	2302      	movs	r3, #2
  }
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3718      	adds	r7, #24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	00100002 	.word	0x00100002
 8002e18:	ffff0000 	.word	0xffff0000

08002e1c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b088      	sub	sp, #32
 8002e20:	af02      	add	r7, sp, #8
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	607a      	str	r2, [r7, #4]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	460b      	mov	r3, r1
 8002e2a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d006      	beq.n	8002e46 <I2C_MasterRequestWrite+0x2a>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d003      	beq.n	8002e46 <I2C_MasterRequestWrite+0x2a>
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e44:	d108      	bne.n	8002e58 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e54:	601a      	str	r2, [r3, #0]
 8002e56:	e00b      	b.n	8002e70 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	2b12      	cmp	r3, #18
 8002e5e:	d107      	bne.n	8002e70 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e6e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f84f 	bl	8002f20 <I2C_WaitOnFlagUntilTimeout>
 8002e82:	4603      	mov	r3, r0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d00d      	beq.n	8002ea4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e96:	d103      	bne.n	8002ea0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e9e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e035      	b.n	8002f10 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eac:	d108      	bne.n	8002ec0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002eae:	897b      	ldrh	r3, [r7, #10]
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ebc:	611a      	str	r2, [r3, #16]
 8002ebe:	e01b      	b.n	8002ef8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ec0:	897b      	ldrh	r3, [r7, #10]
 8002ec2:	11db      	asrs	r3, r3, #7
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f003 0306 	and.w	r3, r3, #6
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f063 030f 	orn	r3, r3, #15
 8002ed0:	b2da      	uxtb	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	490e      	ldr	r1, [pc, #56]	@ (8002f18 <I2C_MasterRequestWrite+0xfc>)
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 f898 	bl	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e010      	b.n	8002f10 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eee:	897b      	ldrh	r3, [r7, #10]
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	4907      	ldr	r1, [pc, #28]	@ (8002f1c <I2C_MasterRequestWrite+0x100>)
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f888 	bl	8003014 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	00010008 	.word	0x00010008
 8002f1c:	00010002 	.word	0x00010002

08002f20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f30:	e048      	b.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f38:	d044      	beq.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f3a:	f7fe fe3f 	bl	8001bbc <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d302      	bcc.n	8002f50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d139      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	0c1b      	lsrs	r3, r3, #16
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10d      	bne.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	461a      	mov	r2, r3
 8002f74:	e00c      	b.n	8002f90 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	43da      	mvns	r2, r3
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	4013      	ands	r3, r2
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d116      	bne.n	8002fc4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb0:	f043 0220 	orr.w	r2, r3, #32
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e023      	b.n	800300c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d10d      	bne.n	8002fea <I2C_WaitOnFlagUntilTimeout+0xca>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	e00c      	b.n	8003004 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	43da      	mvns	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bf0c      	ite	eq
 8002ffc:	2301      	moveq	r3, #1
 8002ffe:	2300      	movne	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	461a      	mov	r2, r3
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	429a      	cmp	r2, r3
 8003008:	d093      	beq.n	8002f32 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003022:	e071      	b.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003032:	d123      	bne.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003042:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800304c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2220      	movs	r2, #32
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e067      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d041      	beq.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003084:	f7fe fd9a 	bl	8001bbc <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	429a      	cmp	r2, r3
 8003092:	d302      	bcc.n	800309a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d136      	bne.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10c      	bne.n	80030be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4013      	ands	r3, r2
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf14      	ite	ne
 80030b6:	2301      	movne	r3, #1
 80030b8:	2300      	moveq	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	e00b      	b.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	43da      	mvns	r2, r3
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	4013      	ands	r3, r2
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	bf14      	ite	ne
 80030d0:	2301      	movne	r3, #1
 80030d2:	2300      	moveq	r3, #0
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d016      	beq.n	8003108 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e021      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	0c1b      	lsrs	r3, r3, #16
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10c      	bne.n	800312c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf14      	ite	ne
 8003124:	2301      	movne	r3, #1
 8003126:	2300      	moveq	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	e00b      	b.n	8003144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b00      	cmp	r3, #0
 8003146:	f47f af6d 	bne.w	8003024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800314a:	2300      	movs	r3, #0
}
 800314c:	4618      	mov	r0, r3
 800314e:	3710      	adds	r7, #16
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003160:	e034      	b.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f000 f886 	bl	8003274 <I2C_IsAcknowledgeFailed>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e034      	b.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003178:	d028      	beq.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800317a:	f7fe fd1f 	bl	8001bbc <HAL_GetTick>
 800317e:	4602      	mov	r2, r0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	429a      	cmp	r2, r3
 8003188:	d302      	bcc.n	8003190 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d11d      	bne.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800319a:	2b80      	cmp	r3, #128	@ 0x80
 800319c:	d016      	beq.n	80031cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2220      	movs	r2, #32
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	f043 0220 	orr.w	r2, r3, #32
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e007      	b.n	80031dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d6:	2b80      	cmp	r3, #128	@ 0x80
 80031d8:	d1c3      	bne.n	8003162 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3710      	adds	r7, #16
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f0:	e034      	b.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 f83e 	bl	8003274 <I2C_IsAcknowledgeFailed>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e034      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003208:	d028      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320a:	f7fe fcd7 	bl	8001bbc <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d11d      	bne.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b04      	cmp	r3, #4
 800322c:	d016      	beq.n	800325c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003248:	f043 0220 	orr.w	r2, r3, #32
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e007      	b.n	800326c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	2b04      	cmp	r3, #4
 8003268:	d1c3      	bne.n	80031f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003286:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800328a:	d11b      	bne.n	80032c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003294:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b0:	f043 0204 	orr.w	r2, r3, #4
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bc80      	pop	{r7}
 80032ce:	4770      	bx	lr

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e272      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8087 	beq.w	80033fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f0:	4b92      	ldr	r3, [pc, #584]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d00c      	beq.n	8003316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032fc:	4b8f      	ldr	r3, [pc, #572]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d112      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
 8003308:	4b8c      	ldr	r3, [pc, #560]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003314:	d10b      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003316:	4b89      	ldr	r3, [pc, #548]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06c      	beq.n	80033fc <HAL_RCC_OscConfig+0x12c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d168      	bne.n	80033fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e24c      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x76>
 8003338:	4b80      	ldr	r3, [pc, #512]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7f      	ldr	r2, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e02e      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7a      	ldr	r2, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b78      	ldr	r3, [pc, #480]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a77      	ldr	r2, [pc, #476]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0xbc>
 8003372:	4b72      	ldr	r3, [pc, #456]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a71      	ldr	r2, [pc, #452]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 800338c:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6a      	ldr	r2, [pc, #424]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b68      	ldr	r3, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a67      	ldr	r2, [pc, #412]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7fe fc06 	bl	8001bbc <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7fe fc02 	bl	8001bbc <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e200      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b5d      	ldr	r3, [pc, #372]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xe4>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7fe fbf2 	bl	8001bbc <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7fe fbee 	bl	8001bbc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1ec      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x10c>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d063      	beq.n	80034d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340a:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003416:	4b49      	ldr	r3, [pc, #292]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
 8003422:	4b46      	ldr	r3, [pc, #280]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c0      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4939      	ldr	r1, [pc, #228]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7fe fba7 	bl	8001bbc <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe fba3 	bl	8001bbc <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1a1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4927      	ldr	r1, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fb86 	bl	8001bbc <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7fe fb82 	bl	8001bbc <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e180      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03a      	beq.n	8003554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7fe fb66 	bl	8001bbc <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7fe fb62 	bl	8001bbc <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e160      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003512:	2001      	movs	r0, #1
 8003514:	f000 face 	bl	8003ab4 <RCC_Delay>
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7fe fb4c 	bl	8001bbc <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003526:	e00f      	b.n	8003548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003528:	f7fe fb48 	bl	8001bbc <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d908      	bls.n	8003548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e146      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	42420000 	.word	0x42420000
 8003544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b92      	ldr	r3, [pc, #584]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e9      	bne.n	8003528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a6 	beq.w	80036ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b8b      	ldr	r3, [pc, #556]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a87      	ldr	r2, [pc, #540]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b85      	ldr	r3, [pc, #532]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b82      	ldr	r3, [pc, #520]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7e      	ldr	r2, [pc, #504]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7fe fb09 	bl	8001bbc <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7fe fb05 	bl	8001bbc <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	@ 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e103      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b75      	ldr	r3, [pc, #468]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x312>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e02d      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x334>
 80035ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a69      	ldr	r2, [pc, #420]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	4b67      	ldr	r3, [pc, #412]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x356>
 800360c:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a60      	ldr	r2, [pc, #384]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	4b5e      	ldr	r3, [pc, #376]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a5d      	ldr	r2, [pc, #372]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003626:	4b5b      	ldr	r3, [pc, #364]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a5a      	ldr	r2, [pc, #360]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7fe fab9 	bl	8001bbc <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fab5 	bl	8001bbc <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0b1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x37e>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe faa3 	bl	8001bbc <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe fa9f 	bl	8001bbc <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e09b      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8087 	beq.w	80037c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d061      	beq.n	8003788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d146      	bne.n	800375a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b33      	ldr	r3, [pc, #204]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe fa73 	bl	8001bbc <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe fa6f 	bl	8001bbc <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e06d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d108      	bne.n	8003714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003702:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4921      	ldr	r1, [pc, #132]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a19      	ldr	r1, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	430b      	orrs	r3, r1
 8003726:	491b      	ldr	r1, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7fe fa43 	bl	8001bbc <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7fe fa3f 	bl	8001bbc <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x46a>
 8003758:	e035      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7fe fa2c 	bl	8001bbc <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7fe fa28 	bl	8001bbc <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e026      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x498>
 8003786:	e01e      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e019      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x500>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d0      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d910      	bls.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b67      	ldr	r3, [pc, #412]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4965      	ldr	r1, [pc, #404]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a58      	ldr	r2, [pc, #352]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800383a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b50      	ldr	r3, [pc, #320]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494d      	ldr	r1, [pc, #308]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d040      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d115      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e073      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4936      	ldr	r1, [pc, #216]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7fe f97a 	bl	8001bbc <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7fe f976 	bl	8001bbc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e053      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d210      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b24      	ldr	r3, [pc, #144]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4922      	ldr	r1, [pc, #136]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4916      	ldr	r1, [pc, #88]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394e:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490e      	ldr	r1, [pc, #56]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490a      	ldr	r1, [pc, #40]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1cc>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe f8d8 	bl	8001b38 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	08007390 	.word	0x08007390
 80039a0:	20000004 	.word	0x20000004
 80039a4:	20000008 	.word	0x20000008

080039a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x30>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x36>
 80039d6:	e027      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80039da:	613b      	str	r3, [r7, #16]
      break;
 80039dc:	e027      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f6:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0c5b      	lsrs	r3, r3, #17
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0a:	fb03 f202 	mul.w	r2, r3, r2
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e004      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	613b      	str	r3, [r7, #16]
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2a:	613b      	str	r3, [r7, #16]
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	693b      	ldr	r3, [r7, #16]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	080073a8 	.word	0x080073a8
 8003a48:	080073b8 	.word	0x080073b8
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a54:	4b02      	ldr	r3, [pc, #8]	@ (8003a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a56:	681b      	ldr	r3, [r3, #0]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr
 8003a60:	20000004 	.word	0x20000004

08003a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a68:	f7ff fff2 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	4b05      	ldr	r3, [pc, #20]	@ (8003a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	0a1b      	lsrs	r3, r3, #8
 8003a74:	f003 0307 	and.w	r3, r3, #7
 8003a78:	4903      	ldr	r1, [pc, #12]	@ (8003a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a7a:	5ccb      	ldrb	r3, [r1, r3]
 8003a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	080073a0 	.word	0x080073a0

08003a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a90:	f7ff ffde 	bl	8003a50 <HAL_RCC_GetHCLKFreq>
 8003a94:	4602      	mov	r2, r0
 8003a96:	4b05      	ldr	r3, [pc, #20]	@ (8003aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	0adb      	lsrs	r3, r3, #11
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	4903      	ldr	r1, [pc, #12]	@ (8003ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aa2:	5ccb      	ldrb	r3, [r1, r3]
 8003aa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	080073a0 	.word	0x080073a0

08003ab4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <RCC_Delay+0x34>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0a      	ldr	r2, [pc, #40]	@ (8003aec <RCC_Delay+0x38>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0a5b      	lsrs	r3, r3, #9
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	fb02 f303 	mul.w	r3, r2, r3
 8003ace:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ad0:	bf00      	nop
  }
  while (Delay --);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1e5a      	subs	r2, r3, #1
 8003ad6:	60fa      	str	r2, [r7, #12]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1f9      	bne.n	8003ad0 <RCC_Delay+0x1c>
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	20000004 	.word	0x20000004
 8003aec:	10624dd3 	.word	0x10624dd3

08003af0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b086      	sub	sp, #24
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	613b      	str	r3, [r7, #16]
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0301 	and.w	r3, r3, #1
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d07d      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b10:	4b4f      	ldr	r3, [pc, #316]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b12:	69db      	ldr	r3, [r3, #28]
 8003b14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10d      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b1c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	4a4b      	ldr	r2, [pc, #300]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b26:	61d3      	str	r3, [r2, #28]
 8003b28:	4b49      	ldr	r3, [pc, #292]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b2a:	69db      	ldr	r3, [r3, #28]
 8003b2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b30:	60bb      	str	r3, [r7, #8]
 8003b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b34:	2301      	movs	r3, #1
 8003b36:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b38:	4b46      	ldr	r3, [pc, #280]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d118      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b44:	4b43      	ldr	r3, [pc, #268]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a42      	ldr	r2, [pc, #264]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b50:	f7fe f834 	bl	8001bbc <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b56:	e008      	b.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b58:	f7fe f830 	bl	8001bbc <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e06d      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b6a:	4b3a      	ldr	r3, [pc, #232]	@ (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b76:	4b36      	ldr	r3, [pc, #216]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b7e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d02e      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d027      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b94:	4b2e      	ldr	r3, [pc, #184]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b9c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ba4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003baa:	4a29      	ldr	r2, [pc, #164]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d014      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bba:	f7fd ffff 	bl	8001bbc <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bc0:	e00a      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bc2:	f7fd fffb 	bl	8001bbc <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e036      	b.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0ee      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	6a1b      	ldr	r3, [r3, #32]
 8003be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4917      	ldr	r1, [pc, #92]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d105      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bfc:	4b14      	ldr	r3, [pc, #80]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4a13      	ldr	r2, [pc, #76]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c06:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c14:	4b0e      	ldr	r3, [pc, #56]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	490b      	ldr	r1, [pc, #44]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d008      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c32:	4b07      	ldr	r3, [pc, #28]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	4904      	ldr	r1, [pc, #16]	@ (8003c50 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40021000 	.word	0x40021000
 8003c54:	40007000 	.word	0x40007000
 8003c58:	42420440 	.word	0x42420440

08003c5c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b088      	sub	sp, #32
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	2300      	movs	r3, #0
 8003c6a:	61fb      	str	r3, [r7, #28]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b10      	cmp	r3, #16
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b10      	cmp	r3, #16
 8003c82:	f200 808a 	bhi.w	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d045      	beq.n	8003d18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d075      	beq.n	8003d7e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003c92:	e082      	b.n	8003d9a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003c94:	4b46      	ldr	r3, [pc, #280]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003c9a:	4b45      	ldr	r3, [pc, #276]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d07b      	beq.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	0c9b      	lsrs	r3, r3, #18
 8003caa:	f003 030f 	and.w	r3, r3, #15
 8003cae:	4a41      	ldr	r2, [pc, #260]	@ (8003db4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003cb0:	5cd3      	ldrb	r3, [r2, r3]
 8003cb2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d015      	beq.n	8003cea <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003cbe:	4b3c      	ldr	r3, [pc, #240]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	0c5b      	lsrs	r3, r3, #17
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	4a3b      	ldr	r2, [pc, #236]	@ (8003db8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003cca:	5cd3      	ldrb	r3, [r2, r3]
 8003ccc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003cd8:	4a38      	ldr	r2, [pc, #224]	@ (8003dbc <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	fb02 f303 	mul.w	r3, r2, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e004      	b.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	4a34      	ldr	r2, [pc, #208]	@ (8003dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003cee:	fb02 f303 	mul.w	r3, r2, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003cf4:	4b2e      	ldr	r3, [pc, #184]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d00:	d102      	bne.n	8003d08 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	61bb      	str	r3, [r7, #24]
      break;
 8003d06:	e04a      	b.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	@ (8003dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	61bb      	str	r3, [r7, #24]
      break;
 8003d16:	e042      	b.n	8003d9e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003d18:	4b25      	ldr	r3, [pc, #148]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d28:	d108      	bne.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003d34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	e01f      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d46:	d109      	bne.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003d48:	4b19      	ldr	r3, [pc, #100]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d003      	beq.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003d54:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003d58:	61bb      	str	r3, [r7, #24]
 8003d5a:	e00f      	b.n	8003d7c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d66:	d11c      	bne.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d68:	4b11      	ldr	r3, [pc, #68]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d016      	beq.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003d74:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003d78:	61bb      	str	r3, [r7, #24]
      break;
 8003d7a:	e012      	b.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003d7c:	e011      	b.n	8003da2 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003d7e:	f7ff fe85 	bl	8003a8c <HAL_RCC_GetPCLK2Freq>
 8003d82:	4602      	mov	r2, r0
 8003d84:	4b0a      	ldr	r3, [pc, #40]	@ (8003db0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	0b9b      	lsrs	r3, r3, #14
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	3301      	adds	r3, #1
 8003d90:	005b      	lsls	r3, r3, #1
 8003d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d96:	61bb      	str	r3, [r7, #24]
      break;
 8003d98:	e004      	b.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003da2:	bf00      	nop
    }
  }
  return (frequency);
 8003da4:	69bb      	ldr	r3, [r7, #24]
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3720      	adds	r7, #32
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40021000 	.word	0x40021000
 8003db4:	080073bc 	.word	0x080073bc
 8003db8:	080073cc 	.word	0x080073cc
 8003dbc:	007a1200 	.word	0x007a1200
 8003dc0:	003d0900 	.word	0x003d0900
 8003dc4:	aaaaaaab 	.word	0xaaaaaaab

08003dc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e041      	b.n	8003e5e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d106      	bne.n	8003df4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7fd fd26 	bl	8001840 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3304      	adds	r3, #4
 8003e04:	4619      	mov	r1, r3
 8003e06:	4610      	mov	r0, r2
 8003e08:	f000 f992 	bl	8004130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_TIM_PWM_Start+0x24>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	bf14      	ite	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	2300      	moveq	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	e022      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x6a>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d109      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0x3e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	bf14      	ite	ne
 8003e9e:	2301      	movne	r3, #1
 8003ea0:	2300      	moveq	r3, #0
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	e015      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x6a>
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	d109      	bne.n	8003ec0 <HAL_TIM_PWM_Start+0x58>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	e008      	b.n	8003ed2 <HAL_TIM_PWM_Start+0x6a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d001      	beq.n	8003eda <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e05e      	b.n	8003f98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d104      	bne.n	8003eea <HAL_TIM_PWM_Start+0x82>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ee8:	e013      	b.n	8003f12 <HAL_TIM_PWM_Start+0xaa>
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d104      	bne.n	8003efa <HAL_TIM_PWM_Start+0x92>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2202      	movs	r2, #2
 8003ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef8:	e00b      	b.n	8003f12 <HAL_TIM_PWM_Start+0xaa>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d104      	bne.n	8003f0a <HAL_TIM_PWM_Start+0xa2>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2202      	movs	r2, #2
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f08:	e003      	b.n	8003f12 <HAL_TIM_PWM_Start+0xaa>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2201      	movs	r2, #1
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fafe 	bl	800451c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1e      	ldr	r2, [pc, #120]	@ (8003fa0 <HAL_TIM_PWM_Start+0x138>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d107      	bne.n	8003f3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a18      	ldr	r2, [pc, #96]	@ (8003fa0 <HAL_TIM_PWM_Start+0x138>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d00e      	beq.n	8003f62 <HAL_TIM_PWM_Start+0xfa>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4c:	d009      	beq.n	8003f62 <HAL_TIM_PWM_Start+0xfa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a14      	ldr	r2, [pc, #80]	@ (8003fa4 <HAL_TIM_PWM_Start+0x13c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIM_PWM_Start+0xfa>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <HAL_TIM_PWM_Start+0x140>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d111      	bne.n	8003f86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f003 0307 	and.w	r3, r3, #7
 8003f6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2b06      	cmp	r3, #6
 8003f72:	d010      	beq.n	8003f96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0201 	orr.w	r2, r2, #1
 8003f82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	e007      	b.n	8003f96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0201 	orr.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40012c00 	.word	0x40012c00
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800

08003fac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d101      	bne.n	8003fca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	e0ae      	b.n	8004128 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2b0c      	cmp	r3, #12
 8003fd6:	f200 809f 	bhi.w	8004118 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003fda:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	08004015 	.word	0x08004015
 8003fe4:	08004119 	.word	0x08004119
 8003fe8:	08004119 	.word	0x08004119
 8003fec:	08004119 	.word	0x08004119
 8003ff0:	08004055 	.word	0x08004055
 8003ff4:	08004119 	.word	0x08004119
 8003ff8:	08004119 	.word	0x08004119
 8003ffc:	08004119 	.word	0x08004119
 8004000:	08004097 	.word	0x08004097
 8004004:	08004119 	.word	0x08004119
 8004008:	08004119 	.word	0x08004119
 800400c:	08004119 	.word	0x08004119
 8004010:	080040d7 	.word	0x080040d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	68b9      	ldr	r1, [r7, #8]
 800401a:	4618      	mov	r0, r3
 800401c:	f000 f8f6 	bl	800420c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	699a      	ldr	r2, [r3, #24]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f042 0208 	orr.w	r2, r2, #8
 800402e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699a      	ldr	r2, [r3, #24]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 0204 	bic.w	r2, r2, #4
 800403e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	6999      	ldr	r1, [r3, #24]
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	691a      	ldr	r2, [r3, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	619a      	str	r2, [r3, #24]
      break;
 8004052:	e064      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68b9      	ldr	r1, [r7, #8]
 800405a:	4618      	mov	r0, r3
 800405c:	f000 f93c 	bl	80042d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699a      	ldr	r2, [r3, #24]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6999      	ldr	r1, [r3, #24]
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	021a      	lsls	r2, r3, #8
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	619a      	str	r2, [r3, #24]
      break;
 8004094:	e043      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68b9      	ldr	r1, [r7, #8]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 f985 	bl	80043ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	69da      	ldr	r2, [r3, #28]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0208 	orr.w	r2, r2, #8
 80040b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	69da      	ldr	r2, [r3, #28]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0204 	bic.w	r2, r2, #4
 80040c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69d9      	ldr	r1, [r3, #28]
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	691a      	ldr	r2, [r3, #16]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	61da      	str	r2, [r3, #28]
      break;
 80040d4:	e023      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68b9      	ldr	r1, [r7, #8]
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f9cf 	bl	8004480 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	69da      	ldr	r2, [r3, #28]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80040f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004100:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69d9      	ldr	r1, [r3, #28]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	021a      	lsls	r2, r3, #8
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	61da      	str	r2, [r3, #28]
      break;
 8004116:	e002      	b.n	800411e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	75fb      	strb	r3, [r7, #23]
      break;
 800411c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004126:	7dfb      	ldrb	r3, [r7, #23]
}
 8004128:	4618      	mov	r0, r3
 800412a:	3718      	adds	r7, #24
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
 8004138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a2f      	ldr	r2, [pc, #188]	@ (8004200 <TIM_Base_SetConfig+0xd0>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00b      	beq.n	8004160 <TIM_Base_SetConfig+0x30>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800414e:	d007      	beq.n	8004160 <TIM_Base_SetConfig+0x30>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4a2c      	ldr	r2, [pc, #176]	@ (8004204 <TIM_Base_SetConfig+0xd4>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d003      	beq.n	8004160 <TIM_Base_SetConfig+0x30>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a2b      	ldr	r2, [pc, #172]	@ (8004208 <TIM_Base_SetConfig+0xd8>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d108      	bne.n	8004172 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a22      	ldr	r2, [pc, #136]	@ (8004200 <TIM_Base_SetConfig+0xd0>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d00b      	beq.n	8004192 <TIM_Base_SetConfig+0x62>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004180:	d007      	beq.n	8004192 <TIM_Base_SetConfig+0x62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a1f      	ldr	r2, [pc, #124]	@ (8004204 <TIM_Base_SetConfig+0xd4>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d003      	beq.n	8004192 <TIM_Base_SetConfig+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1e      	ldr	r2, [pc, #120]	@ (8004208 <TIM_Base_SetConfig+0xd8>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d108      	bne.n	80041a4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004198:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	689a      	ldr	r2, [r3, #8]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a0d      	ldr	r2, [pc, #52]	@ (8004200 <TIM_Base_SetConfig+0xd0>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d103      	bne.n	80041d8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	f003 0301 	and.w	r3, r3, #1
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	611a      	str	r2, [r3, #16]
  }
}
 80041f6:	bf00      	nop
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bc80      	pop	{r7}
 80041fe:	4770      	bx	lr
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800

0800420c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a1b      	ldr	r3, [r3, #32]
 8004220:	f023 0201 	bic.w	r2, r3, #1
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800423a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 0303 	bic.w	r3, r3, #3
 8004242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f023 0302 	bic.w	r3, r3, #2
 8004254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	697a      	ldr	r2, [r7, #20]
 800425c:	4313      	orrs	r3, r2
 800425e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a1c      	ldr	r2, [pc, #112]	@ (80042d4 <TIM_OC1_SetConfig+0xc8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d10c      	bne.n	8004282 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f023 0308 	bic.w	r3, r3, #8
 800426e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68db      	ldr	r3, [r3, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	f023 0304 	bic.w	r3, r3, #4
 8004280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a13      	ldr	r2, [pc, #76]	@ (80042d4 <TIM_OC1_SetConfig+0xc8>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d111      	bne.n	80042ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	4313      	orrs	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68fa      	ldr	r2, [r7, #12]
 80042b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	621a      	str	r2, [r3, #32]
}
 80042c8:	bf00      	nop
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40012c00 	.word	0x40012c00

080042d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a1b      	ldr	r3, [r3, #32]
 80042ec:	f023 0210 	bic.w	r2, r3, #16
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	021b      	lsls	r3, r3, #8
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	f023 0320 	bic.w	r3, r3, #32
 8004322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1d      	ldr	r2, [pc, #116]	@ (80043a8 <TIM_OC2_SetConfig+0xd0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d10d      	bne.n	8004354 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800433e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004352:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a14      	ldr	r2, [pc, #80]	@ (80043a8 <TIM_OC2_SetConfig+0xd0>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d113      	bne.n	8004384 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004362:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800436a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	621a      	str	r2, [r3, #32]
}
 800439e:	bf00      	nop
 80043a0:	371c      	adds	r7, #28
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bc80      	pop	{r7}
 80043a6:	4770      	bx	lr
 80043a8:	40012c00 	.word	0x40012c00

080043ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	69db      	ldr	r3, [r3, #28]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	4313      	orrs	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a1d      	ldr	r2, [pc, #116]	@ (800447c <TIM_OC3_SetConfig+0xd0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d10d      	bne.n	8004426 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004410:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4313      	orrs	r3, r2
 800441c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a14      	ldr	r2, [pc, #80]	@ (800447c <TIM_OC3_SetConfig+0xd0>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d113      	bne.n	8004456 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800443c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	693a      	ldr	r2, [r7, #16]
 8004446:	4313      	orrs	r3, r2
 8004448:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	697a      	ldr	r2, [r7, #20]
 800446e:	621a      	str	r2, [r3, #32]
}
 8004470:	bf00      	nop
 8004472:	371c      	adds	r7, #28
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00

08004480 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a1b      	ldr	r3, [r3, #32]
 8004494:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	021b      	lsls	r3, r3, #8
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	031b      	lsls	r3, r3, #12
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a0f      	ldr	r2, [pc, #60]	@ (8004518 <TIM_OC4_SetConfig+0x98>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d109      	bne.n	80044f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	697a      	ldr	r2, [r7, #20]
 80044f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	693a      	ldr	r2, [r7, #16]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr
 8004518:	40012c00 	.word	0x40012c00

0800451c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2201      	movs	r2, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	43db      	mvns	r3, r3
 800453e:	401a      	ands	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1a      	ldr	r2, [r3, #32]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	431a      	orrs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004578:	2302      	movs	r3, #2
 800457a:	e046      	b.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a16      	ldr	r2, [pc, #88]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c8:	d009      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a12      	ldr	r2, [pc, #72]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a10      	ldr	r2, [pc, #64]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10c      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800

08004620 <__cvt>:
 8004620:	2b00      	cmp	r3, #0
 8004622:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004626:	461d      	mov	r5, r3
 8004628:	bfbb      	ittet	lt
 800462a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800462e:	461d      	movlt	r5, r3
 8004630:	2300      	movge	r3, #0
 8004632:	232d      	movlt	r3, #45	@ 0x2d
 8004634:	b088      	sub	sp, #32
 8004636:	4614      	mov	r4, r2
 8004638:	bfb8      	it	lt
 800463a:	4614      	movlt	r4, r2
 800463c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800463e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8004640:	7013      	strb	r3, [r2, #0]
 8004642:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004644:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8004648:	f023 0820 	bic.w	r8, r3, #32
 800464c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004650:	d005      	beq.n	800465e <__cvt+0x3e>
 8004652:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004656:	d100      	bne.n	800465a <__cvt+0x3a>
 8004658:	3601      	adds	r6, #1
 800465a:	2302      	movs	r3, #2
 800465c:	e000      	b.n	8004660 <__cvt+0x40>
 800465e:	2303      	movs	r3, #3
 8004660:	aa07      	add	r2, sp, #28
 8004662:	9204      	str	r2, [sp, #16]
 8004664:	aa06      	add	r2, sp, #24
 8004666:	e9cd a202 	strd	sl, r2, [sp, #8]
 800466a:	e9cd 3600 	strd	r3, r6, [sp]
 800466e:	4622      	mov	r2, r4
 8004670:	462b      	mov	r3, r5
 8004672:	f000 fe81 	bl	8005378 <_dtoa_r>
 8004676:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800467a:	4607      	mov	r7, r0
 800467c:	d119      	bne.n	80046b2 <__cvt+0x92>
 800467e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004680:	07db      	lsls	r3, r3, #31
 8004682:	d50e      	bpl.n	80046a2 <__cvt+0x82>
 8004684:	eb00 0906 	add.w	r9, r0, r6
 8004688:	2200      	movs	r2, #0
 800468a:	2300      	movs	r3, #0
 800468c:	4620      	mov	r0, r4
 800468e:	4629      	mov	r1, r5
 8004690:	f7fc f98a 	bl	80009a8 <__aeabi_dcmpeq>
 8004694:	b108      	cbz	r0, 800469a <__cvt+0x7a>
 8004696:	f8cd 901c 	str.w	r9, [sp, #28]
 800469a:	2230      	movs	r2, #48	@ 0x30
 800469c:	9b07      	ldr	r3, [sp, #28]
 800469e:	454b      	cmp	r3, r9
 80046a0:	d31e      	bcc.n	80046e0 <__cvt+0xc0>
 80046a2:	4638      	mov	r0, r7
 80046a4:	9b07      	ldr	r3, [sp, #28]
 80046a6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80046a8:	1bdb      	subs	r3, r3, r7
 80046aa:	6013      	str	r3, [r2, #0]
 80046ac:	b008      	add	sp, #32
 80046ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80046b6:	eb00 0906 	add.w	r9, r0, r6
 80046ba:	d1e5      	bne.n	8004688 <__cvt+0x68>
 80046bc:	7803      	ldrb	r3, [r0, #0]
 80046be:	2b30      	cmp	r3, #48	@ 0x30
 80046c0:	d10a      	bne.n	80046d8 <__cvt+0xb8>
 80046c2:	2200      	movs	r2, #0
 80046c4:	2300      	movs	r3, #0
 80046c6:	4620      	mov	r0, r4
 80046c8:	4629      	mov	r1, r5
 80046ca:	f7fc f96d 	bl	80009a8 <__aeabi_dcmpeq>
 80046ce:	b918      	cbnz	r0, 80046d8 <__cvt+0xb8>
 80046d0:	f1c6 0601 	rsb	r6, r6, #1
 80046d4:	f8ca 6000 	str.w	r6, [sl]
 80046d8:	f8da 3000 	ldr.w	r3, [sl]
 80046dc:	4499      	add	r9, r3
 80046de:	e7d3      	b.n	8004688 <__cvt+0x68>
 80046e0:	1c59      	adds	r1, r3, #1
 80046e2:	9107      	str	r1, [sp, #28]
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e7d9      	b.n	800469c <__cvt+0x7c>

080046e8 <__exponent>:
 80046e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046ea:	2900      	cmp	r1, #0
 80046ec:	bfb6      	itet	lt
 80046ee:	232d      	movlt	r3, #45	@ 0x2d
 80046f0:	232b      	movge	r3, #43	@ 0x2b
 80046f2:	4249      	neglt	r1, r1
 80046f4:	2909      	cmp	r1, #9
 80046f6:	7002      	strb	r2, [r0, #0]
 80046f8:	7043      	strb	r3, [r0, #1]
 80046fa:	dd29      	ble.n	8004750 <__exponent+0x68>
 80046fc:	f10d 0307 	add.w	r3, sp, #7
 8004700:	461d      	mov	r5, r3
 8004702:	270a      	movs	r7, #10
 8004704:	fbb1 f6f7 	udiv	r6, r1, r7
 8004708:	461a      	mov	r2, r3
 800470a:	fb07 1416 	mls	r4, r7, r6, r1
 800470e:	3430      	adds	r4, #48	@ 0x30
 8004710:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004714:	460c      	mov	r4, r1
 8004716:	2c63      	cmp	r4, #99	@ 0x63
 8004718:	4631      	mov	r1, r6
 800471a:	f103 33ff 	add.w	r3, r3, #4294967295
 800471e:	dcf1      	bgt.n	8004704 <__exponent+0x1c>
 8004720:	3130      	adds	r1, #48	@ 0x30
 8004722:	1e94      	subs	r4, r2, #2
 8004724:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004728:	4623      	mov	r3, r4
 800472a:	1c41      	adds	r1, r0, #1
 800472c:	42ab      	cmp	r3, r5
 800472e:	d30a      	bcc.n	8004746 <__exponent+0x5e>
 8004730:	f10d 0309 	add.w	r3, sp, #9
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	42ac      	cmp	r4, r5
 8004738:	bf88      	it	hi
 800473a:	2300      	movhi	r3, #0
 800473c:	3302      	adds	r3, #2
 800473e:	4403      	add	r3, r0
 8004740:	1a18      	subs	r0, r3, r0
 8004742:	b003      	add	sp, #12
 8004744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004746:	f813 6b01 	ldrb.w	r6, [r3], #1
 800474a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800474e:	e7ed      	b.n	800472c <__exponent+0x44>
 8004750:	2330      	movs	r3, #48	@ 0x30
 8004752:	3130      	adds	r1, #48	@ 0x30
 8004754:	7083      	strb	r3, [r0, #2]
 8004756:	70c1      	strb	r1, [r0, #3]
 8004758:	1d03      	adds	r3, r0, #4
 800475a:	e7f1      	b.n	8004740 <__exponent+0x58>

0800475c <_printf_float>:
 800475c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004760:	b091      	sub	sp, #68	@ 0x44
 8004762:	460c      	mov	r4, r1
 8004764:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004768:	4616      	mov	r6, r2
 800476a:	461f      	mov	r7, r3
 800476c:	4605      	mov	r5, r0
 800476e:	f000 fcf5 	bl	800515c <_localeconv_r>
 8004772:	6803      	ldr	r3, [r0, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	9308      	str	r3, [sp, #32]
 8004778:	f7fb fcea 	bl	8000150 <strlen>
 800477c:	2300      	movs	r3, #0
 800477e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004780:	f8d8 3000 	ldr.w	r3, [r8]
 8004784:	9009      	str	r0, [sp, #36]	@ 0x24
 8004786:	3307      	adds	r3, #7
 8004788:	f023 0307 	bic.w	r3, r3, #7
 800478c:	f103 0208 	add.w	r2, r3, #8
 8004790:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004794:	f8d4 b000 	ldr.w	fp, [r4]
 8004798:	f8c8 2000 	str.w	r2, [r8]
 800479c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80047a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80047a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80047a6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80047aa:	f04f 32ff 	mov.w	r2, #4294967295
 80047ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80047b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80047b6:	4b9c      	ldr	r3, [pc, #624]	@ (8004a28 <_printf_float+0x2cc>)
 80047b8:	f7fc f928 	bl	8000a0c <__aeabi_dcmpun>
 80047bc:	bb70      	cbnz	r0, 800481c <_printf_float+0xc0>
 80047be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80047c2:	f04f 32ff 	mov.w	r2, #4294967295
 80047c6:	4b98      	ldr	r3, [pc, #608]	@ (8004a28 <_printf_float+0x2cc>)
 80047c8:	f7fc f902 	bl	80009d0 <__aeabi_dcmple>
 80047cc:	bb30      	cbnz	r0, 800481c <_printf_float+0xc0>
 80047ce:	2200      	movs	r2, #0
 80047d0:	2300      	movs	r3, #0
 80047d2:	4640      	mov	r0, r8
 80047d4:	4649      	mov	r1, r9
 80047d6:	f7fc f8f1 	bl	80009bc <__aeabi_dcmplt>
 80047da:	b110      	cbz	r0, 80047e2 <_printf_float+0x86>
 80047dc:	232d      	movs	r3, #45	@ 0x2d
 80047de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80047e2:	4a92      	ldr	r2, [pc, #584]	@ (8004a2c <_printf_float+0x2d0>)
 80047e4:	4b92      	ldr	r3, [pc, #584]	@ (8004a30 <_printf_float+0x2d4>)
 80047e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80047ea:	bf8c      	ite	hi
 80047ec:	4690      	movhi	r8, r2
 80047ee:	4698      	movls	r8, r3
 80047f0:	2303      	movs	r3, #3
 80047f2:	f04f 0900 	mov.w	r9, #0
 80047f6:	6123      	str	r3, [r4, #16]
 80047f8:	f02b 0304 	bic.w	r3, fp, #4
 80047fc:	6023      	str	r3, [r4, #0]
 80047fe:	4633      	mov	r3, r6
 8004800:	4621      	mov	r1, r4
 8004802:	4628      	mov	r0, r5
 8004804:	9700      	str	r7, [sp, #0]
 8004806:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004808:	f000 f9d4 	bl	8004bb4 <_printf_common>
 800480c:	3001      	adds	r0, #1
 800480e:	f040 8090 	bne.w	8004932 <_printf_float+0x1d6>
 8004812:	f04f 30ff 	mov.w	r0, #4294967295
 8004816:	b011      	add	sp, #68	@ 0x44
 8004818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481c:	4642      	mov	r2, r8
 800481e:	464b      	mov	r3, r9
 8004820:	4640      	mov	r0, r8
 8004822:	4649      	mov	r1, r9
 8004824:	f7fc f8f2 	bl	8000a0c <__aeabi_dcmpun>
 8004828:	b148      	cbz	r0, 800483e <_printf_float+0xe2>
 800482a:	464b      	mov	r3, r9
 800482c:	2b00      	cmp	r3, #0
 800482e:	bfb8      	it	lt
 8004830:	232d      	movlt	r3, #45	@ 0x2d
 8004832:	4a80      	ldr	r2, [pc, #512]	@ (8004a34 <_printf_float+0x2d8>)
 8004834:	bfb8      	it	lt
 8004836:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800483a:	4b7f      	ldr	r3, [pc, #508]	@ (8004a38 <_printf_float+0x2dc>)
 800483c:	e7d3      	b.n	80047e6 <_printf_float+0x8a>
 800483e:	6863      	ldr	r3, [r4, #4]
 8004840:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	d13f      	bne.n	80048c8 <_printf_float+0x16c>
 8004848:	2306      	movs	r3, #6
 800484a:	6063      	str	r3, [r4, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	9206      	str	r2, [sp, #24]
 8004856:	aa0e      	add	r2, sp, #56	@ 0x38
 8004858:	e9cd a204 	strd	sl, r2, [sp, #16]
 800485c:	aa0d      	add	r2, sp, #52	@ 0x34
 800485e:	9203      	str	r2, [sp, #12]
 8004860:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004864:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004868:	6863      	ldr	r3, [r4, #4]
 800486a:	4642      	mov	r2, r8
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	4628      	mov	r0, r5
 8004870:	464b      	mov	r3, r9
 8004872:	910a      	str	r1, [sp, #40]	@ 0x28
 8004874:	f7ff fed4 	bl	8004620 <__cvt>
 8004878:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800487a:	4680      	mov	r8, r0
 800487c:	2947      	cmp	r1, #71	@ 0x47
 800487e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004880:	d128      	bne.n	80048d4 <_printf_float+0x178>
 8004882:	1cc8      	adds	r0, r1, #3
 8004884:	db02      	blt.n	800488c <_printf_float+0x130>
 8004886:	6863      	ldr	r3, [r4, #4]
 8004888:	4299      	cmp	r1, r3
 800488a:	dd40      	ble.n	800490e <_printf_float+0x1b2>
 800488c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004890:	fa5f fa8a 	uxtb.w	sl, sl
 8004894:	4652      	mov	r2, sl
 8004896:	3901      	subs	r1, #1
 8004898:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800489c:	910d      	str	r1, [sp, #52]	@ 0x34
 800489e:	f7ff ff23 	bl	80046e8 <__exponent>
 80048a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048a4:	4681      	mov	r9, r0
 80048a6:	1813      	adds	r3, r2, r0
 80048a8:	2a01      	cmp	r2, #1
 80048aa:	6123      	str	r3, [r4, #16]
 80048ac:	dc02      	bgt.n	80048b4 <_printf_float+0x158>
 80048ae:	6822      	ldr	r2, [r4, #0]
 80048b0:	07d2      	lsls	r2, r2, #31
 80048b2:	d501      	bpl.n	80048b8 <_printf_float+0x15c>
 80048b4:	3301      	adds	r3, #1
 80048b6:	6123      	str	r3, [r4, #16]
 80048b8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d09e      	beq.n	80047fe <_printf_float+0xa2>
 80048c0:	232d      	movs	r3, #45	@ 0x2d
 80048c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80048c6:	e79a      	b.n	80047fe <_printf_float+0xa2>
 80048c8:	2947      	cmp	r1, #71	@ 0x47
 80048ca:	d1bf      	bne.n	800484c <_printf_float+0xf0>
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1bd      	bne.n	800484c <_printf_float+0xf0>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e7ba      	b.n	800484a <_printf_float+0xee>
 80048d4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80048d8:	d9dc      	bls.n	8004894 <_printf_float+0x138>
 80048da:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80048de:	d118      	bne.n	8004912 <_printf_float+0x1b6>
 80048e0:	2900      	cmp	r1, #0
 80048e2:	6863      	ldr	r3, [r4, #4]
 80048e4:	dd0b      	ble.n	80048fe <_printf_float+0x1a2>
 80048e6:	6121      	str	r1, [r4, #16]
 80048e8:	b913      	cbnz	r3, 80048f0 <_printf_float+0x194>
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	07d0      	lsls	r0, r2, #31
 80048ee:	d502      	bpl.n	80048f6 <_printf_float+0x19a>
 80048f0:	3301      	adds	r3, #1
 80048f2:	440b      	add	r3, r1
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	f04f 0900 	mov.w	r9, #0
 80048fa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80048fc:	e7dc      	b.n	80048b8 <_printf_float+0x15c>
 80048fe:	b913      	cbnz	r3, 8004906 <_printf_float+0x1aa>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	07d2      	lsls	r2, r2, #31
 8004904:	d501      	bpl.n	800490a <_printf_float+0x1ae>
 8004906:	3302      	adds	r3, #2
 8004908:	e7f4      	b.n	80048f4 <_printf_float+0x198>
 800490a:	2301      	movs	r3, #1
 800490c:	e7f2      	b.n	80048f4 <_printf_float+0x198>
 800490e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004914:	4299      	cmp	r1, r3
 8004916:	db05      	blt.n	8004924 <_printf_float+0x1c8>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	6121      	str	r1, [r4, #16]
 800491c:	07d8      	lsls	r0, r3, #31
 800491e:	d5ea      	bpl.n	80048f6 <_printf_float+0x19a>
 8004920:	1c4b      	adds	r3, r1, #1
 8004922:	e7e7      	b.n	80048f4 <_printf_float+0x198>
 8004924:	2900      	cmp	r1, #0
 8004926:	bfcc      	ite	gt
 8004928:	2201      	movgt	r2, #1
 800492a:	f1c1 0202 	rsble	r2, r1, #2
 800492e:	4413      	add	r3, r2
 8004930:	e7e0      	b.n	80048f4 <_printf_float+0x198>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	055a      	lsls	r2, r3, #21
 8004936:	d407      	bmi.n	8004948 <_printf_float+0x1ec>
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	4642      	mov	r2, r8
 800493c:	4631      	mov	r1, r6
 800493e:	4628      	mov	r0, r5
 8004940:	47b8      	blx	r7
 8004942:	3001      	adds	r0, #1
 8004944:	d12b      	bne.n	800499e <_printf_float+0x242>
 8004946:	e764      	b.n	8004812 <_printf_float+0xb6>
 8004948:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800494c:	f240 80dc 	bls.w	8004b08 <_printf_float+0x3ac>
 8004950:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004954:	2200      	movs	r2, #0
 8004956:	2300      	movs	r3, #0
 8004958:	f7fc f826 	bl	80009a8 <__aeabi_dcmpeq>
 800495c:	2800      	cmp	r0, #0
 800495e:	d033      	beq.n	80049c8 <_printf_float+0x26c>
 8004960:	2301      	movs	r3, #1
 8004962:	4631      	mov	r1, r6
 8004964:	4628      	mov	r0, r5
 8004966:	4a35      	ldr	r2, [pc, #212]	@ (8004a3c <_printf_float+0x2e0>)
 8004968:	47b8      	blx	r7
 800496a:	3001      	adds	r0, #1
 800496c:	f43f af51 	beq.w	8004812 <_printf_float+0xb6>
 8004970:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004974:	4543      	cmp	r3, r8
 8004976:	db02      	blt.n	800497e <_printf_float+0x222>
 8004978:	6823      	ldr	r3, [r4, #0]
 800497a:	07d8      	lsls	r0, r3, #31
 800497c:	d50f      	bpl.n	800499e <_printf_float+0x242>
 800497e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004982:	4631      	mov	r1, r6
 8004984:	4628      	mov	r0, r5
 8004986:	47b8      	blx	r7
 8004988:	3001      	adds	r0, #1
 800498a:	f43f af42 	beq.w	8004812 <_printf_float+0xb6>
 800498e:	f04f 0900 	mov.w	r9, #0
 8004992:	f108 38ff 	add.w	r8, r8, #4294967295
 8004996:	f104 0a1a 	add.w	sl, r4, #26
 800499a:	45c8      	cmp	r8, r9
 800499c:	dc09      	bgt.n	80049b2 <_printf_float+0x256>
 800499e:	6823      	ldr	r3, [r4, #0]
 80049a0:	079b      	lsls	r3, r3, #30
 80049a2:	f100 8102 	bmi.w	8004baa <_printf_float+0x44e>
 80049a6:	68e0      	ldr	r0, [r4, #12]
 80049a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80049aa:	4298      	cmp	r0, r3
 80049ac:	bfb8      	it	lt
 80049ae:	4618      	movlt	r0, r3
 80049b0:	e731      	b.n	8004816 <_printf_float+0xba>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4652      	mov	r2, sl
 80049b6:	4631      	mov	r1, r6
 80049b8:	4628      	mov	r0, r5
 80049ba:	47b8      	blx	r7
 80049bc:	3001      	adds	r0, #1
 80049be:	f43f af28 	beq.w	8004812 <_printf_float+0xb6>
 80049c2:	f109 0901 	add.w	r9, r9, #1
 80049c6:	e7e8      	b.n	800499a <_printf_float+0x23e>
 80049c8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	dc38      	bgt.n	8004a40 <_printf_float+0x2e4>
 80049ce:	2301      	movs	r3, #1
 80049d0:	4631      	mov	r1, r6
 80049d2:	4628      	mov	r0, r5
 80049d4:	4a19      	ldr	r2, [pc, #100]	@ (8004a3c <_printf_float+0x2e0>)
 80049d6:	47b8      	blx	r7
 80049d8:	3001      	adds	r0, #1
 80049da:	f43f af1a 	beq.w	8004812 <_printf_float+0xb6>
 80049de:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80049e2:	ea59 0303 	orrs.w	r3, r9, r3
 80049e6:	d102      	bne.n	80049ee <_printf_float+0x292>
 80049e8:	6823      	ldr	r3, [r4, #0]
 80049ea:	07d9      	lsls	r1, r3, #31
 80049ec:	d5d7      	bpl.n	800499e <_printf_float+0x242>
 80049ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049f2:	4631      	mov	r1, r6
 80049f4:	4628      	mov	r0, r5
 80049f6:	47b8      	blx	r7
 80049f8:	3001      	adds	r0, #1
 80049fa:	f43f af0a 	beq.w	8004812 <_printf_float+0xb6>
 80049fe:	f04f 0a00 	mov.w	sl, #0
 8004a02:	f104 0b1a 	add.w	fp, r4, #26
 8004a06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a08:	425b      	negs	r3, r3
 8004a0a:	4553      	cmp	r3, sl
 8004a0c:	dc01      	bgt.n	8004a12 <_printf_float+0x2b6>
 8004a0e:	464b      	mov	r3, r9
 8004a10:	e793      	b.n	800493a <_printf_float+0x1de>
 8004a12:	2301      	movs	r3, #1
 8004a14:	465a      	mov	r2, fp
 8004a16:	4631      	mov	r1, r6
 8004a18:	4628      	mov	r0, r5
 8004a1a:	47b8      	blx	r7
 8004a1c:	3001      	adds	r0, #1
 8004a1e:	f43f aef8 	beq.w	8004812 <_printf_float+0xb6>
 8004a22:	f10a 0a01 	add.w	sl, sl, #1
 8004a26:	e7ee      	b.n	8004a06 <_printf_float+0x2aa>
 8004a28:	7fefffff 	.word	0x7fefffff
 8004a2c:	080073d2 	.word	0x080073d2
 8004a30:	080073ce 	.word	0x080073ce
 8004a34:	080073da 	.word	0x080073da
 8004a38:	080073d6 	.word	0x080073d6
 8004a3c:	080073de 	.word	0x080073de
 8004a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a42:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004a46:	4553      	cmp	r3, sl
 8004a48:	bfa8      	it	ge
 8004a4a:	4653      	movge	r3, sl
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	4699      	mov	r9, r3
 8004a50:	dc36      	bgt.n	8004ac0 <_printf_float+0x364>
 8004a52:	f04f 0b00 	mov.w	fp, #0
 8004a56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a5a:	f104 021a 	add.w	r2, r4, #26
 8004a5e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004a60:	930a      	str	r3, [sp, #40]	@ 0x28
 8004a62:	eba3 0309 	sub.w	r3, r3, r9
 8004a66:	455b      	cmp	r3, fp
 8004a68:	dc31      	bgt.n	8004ace <_printf_float+0x372>
 8004a6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a6c:	459a      	cmp	sl, r3
 8004a6e:	dc3a      	bgt.n	8004ae6 <_printf_float+0x38a>
 8004a70:	6823      	ldr	r3, [r4, #0]
 8004a72:	07da      	lsls	r2, r3, #31
 8004a74:	d437      	bmi.n	8004ae6 <_printf_float+0x38a>
 8004a76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a78:	ebaa 0903 	sub.w	r9, sl, r3
 8004a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a7e:	ebaa 0303 	sub.w	r3, sl, r3
 8004a82:	4599      	cmp	r9, r3
 8004a84:	bfa8      	it	ge
 8004a86:	4699      	movge	r9, r3
 8004a88:	f1b9 0f00 	cmp.w	r9, #0
 8004a8c:	dc33      	bgt.n	8004af6 <_printf_float+0x39a>
 8004a8e:	f04f 0800 	mov.w	r8, #0
 8004a92:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a96:	f104 0b1a 	add.w	fp, r4, #26
 8004a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a9c:	ebaa 0303 	sub.w	r3, sl, r3
 8004aa0:	eba3 0309 	sub.w	r3, r3, r9
 8004aa4:	4543      	cmp	r3, r8
 8004aa6:	f77f af7a 	ble.w	800499e <_printf_float+0x242>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	465a      	mov	r2, fp
 8004aae:	4631      	mov	r1, r6
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b8      	blx	r7
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	f43f aeac 	beq.w	8004812 <_printf_float+0xb6>
 8004aba:	f108 0801 	add.w	r8, r8, #1
 8004abe:	e7ec      	b.n	8004a9a <_printf_float+0x33e>
 8004ac0:	4642      	mov	r2, r8
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	47b8      	blx	r7
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d1c2      	bne.n	8004a52 <_printf_float+0x2f6>
 8004acc:	e6a1      	b.n	8004812 <_printf_float+0xb6>
 8004ace:	2301      	movs	r3, #1
 8004ad0:	4631      	mov	r1, r6
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	920a      	str	r2, [sp, #40]	@ 0x28
 8004ad6:	47b8      	blx	r7
 8004ad8:	3001      	adds	r0, #1
 8004ada:	f43f ae9a 	beq.w	8004812 <_printf_float+0xb6>
 8004ade:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ae0:	f10b 0b01 	add.w	fp, fp, #1
 8004ae4:	e7bb      	b.n	8004a5e <_printf_float+0x302>
 8004ae6:	4631      	mov	r1, r6
 8004ae8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004aec:	4628      	mov	r0, r5
 8004aee:	47b8      	blx	r7
 8004af0:	3001      	adds	r0, #1
 8004af2:	d1c0      	bne.n	8004a76 <_printf_float+0x31a>
 8004af4:	e68d      	b.n	8004812 <_printf_float+0xb6>
 8004af6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004af8:	464b      	mov	r3, r9
 8004afa:	4631      	mov	r1, r6
 8004afc:	4628      	mov	r0, r5
 8004afe:	4442      	add	r2, r8
 8004b00:	47b8      	blx	r7
 8004b02:	3001      	adds	r0, #1
 8004b04:	d1c3      	bne.n	8004a8e <_printf_float+0x332>
 8004b06:	e684      	b.n	8004812 <_printf_float+0xb6>
 8004b08:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8004b0c:	f1ba 0f01 	cmp.w	sl, #1
 8004b10:	dc01      	bgt.n	8004b16 <_printf_float+0x3ba>
 8004b12:	07db      	lsls	r3, r3, #31
 8004b14:	d536      	bpl.n	8004b84 <_printf_float+0x428>
 8004b16:	2301      	movs	r3, #1
 8004b18:	4642      	mov	r2, r8
 8004b1a:	4631      	mov	r1, r6
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	47b8      	blx	r7
 8004b20:	3001      	adds	r0, #1
 8004b22:	f43f ae76 	beq.w	8004812 <_printf_float+0xb6>
 8004b26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b2a:	4631      	mov	r1, r6
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	47b8      	blx	r7
 8004b30:	3001      	adds	r0, #1
 8004b32:	f43f ae6e 	beq.w	8004812 <_printf_float+0xb6>
 8004b36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004b42:	f7fb ff31 	bl	80009a8 <__aeabi_dcmpeq>
 8004b46:	b9c0      	cbnz	r0, 8004b7a <_printf_float+0x41e>
 8004b48:	4653      	mov	r3, sl
 8004b4a:	f108 0201 	add.w	r2, r8, #1
 8004b4e:	4631      	mov	r1, r6
 8004b50:	4628      	mov	r0, r5
 8004b52:	47b8      	blx	r7
 8004b54:	3001      	adds	r0, #1
 8004b56:	d10c      	bne.n	8004b72 <_printf_float+0x416>
 8004b58:	e65b      	b.n	8004812 <_printf_float+0xb6>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	465a      	mov	r2, fp
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	f43f ae54 	beq.w	8004812 <_printf_float+0xb6>
 8004b6a:	f108 0801 	add.w	r8, r8, #1
 8004b6e:	45d0      	cmp	r8, sl
 8004b70:	dbf3      	blt.n	8004b5a <_printf_float+0x3fe>
 8004b72:	464b      	mov	r3, r9
 8004b74:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004b78:	e6e0      	b.n	800493c <_printf_float+0x1e0>
 8004b7a:	f04f 0800 	mov.w	r8, #0
 8004b7e:	f104 0b1a 	add.w	fp, r4, #26
 8004b82:	e7f4      	b.n	8004b6e <_printf_float+0x412>
 8004b84:	2301      	movs	r3, #1
 8004b86:	4642      	mov	r2, r8
 8004b88:	e7e1      	b.n	8004b4e <_printf_float+0x3f2>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	464a      	mov	r2, r9
 8004b8e:	4631      	mov	r1, r6
 8004b90:	4628      	mov	r0, r5
 8004b92:	47b8      	blx	r7
 8004b94:	3001      	adds	r0, #1
 8004b96:	f43f ae3c 	beq.w	8004812 <_printf_float+0xb6>
 8004b9a:	f108 0801 	add.w	r8, r8, #1
 8004b9e:	68e3      	ldr	r3, [r4, #12]
 8004ba0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004ba2:	1a5b      	subs	r3, r3, r1
 8004ba4:	4543      	cmp	r3, r8
 8004ba6:	dcf0      	bgt.n	8004b8a <_printf_float+0x42e>
 8004ba8:	e6fd      	b.n	80049a6 <_printf_float+0x24a>
 8004baa:	f04f 0800 	mov.w	r8, #0
 8004bae:	f104 0919 	add.w	r9, r4, #25
 8004bb2:	e7f4      	b.n	8004b9e <_printf_float+0x442>

08004bb4 <_printf_common>:
 8004bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb8:	4616      	mov	r6, r2
 8004bba:	4698      	mov	r8, r3
 8004bbc:	688a      	ldr	r2, [r1, #8]
 8004bbe:	690b      	ldr	r3, [r1, #16]
 8004bc0:	4607      	mov	r7, r0
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	bfb8      	it	lt
 8004bc6:	4613      	movlt	r3, r2
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004bce:	460c      	mov	r4, r1
 8004bd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bd4:	b10a      	cbz	r2, 8004bda <_printf_common+0x26>
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	6033      	str	r3, [r6, #0]
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	0699      	lsls	r1, r3, #26
 8004bde:	bf42      	ittt	mi
 8004be0:	6833      	ldrmi	r3, [r6, #0]
 8004be2:	3302      	addmi	r3, #2
 8004be4:	6033      	strmi	r3, [r6, #0]
 8004be6:	6825      	ldr	r5, [r4, #0]
 8004be8:	f015 0506 	ands.w	r5, r5, #6
 8004bec:	d106      	bne.n	8004bfc <_printf_common+0x48>
 8004bee:	f104 0a19 	add.w	sl, r4, #25
 8004bf2:	68e3      	ldr	r3, [r4, #12]
 8004bf4:	6832      	ldr	r2, [r6, #0]
 8004bf6:	1a9b      	subs	r3, r3, r2
 8004bf8:	42ab      	cmp	r3, r5
 8004bfa:	dc2b      	bgt.n	8004c54 <_printf_common+0xa0>
 8004bfc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004c00:	6822      	ldr	r2, [r4, #0]
 8004c02:	3b00      	subs	r3, #0
 8004c04:	bf18      	it	ne
 8004c06:	2301      	movne	r3, #1
 8004c08:	0692      	lsls	r2, r2, #26
 8004c0a:	d430      	bmi.n	8004c6e <_printf_common+0xba>
 8004c0c:	4641      	mov	r1, r8
 8004c0e:	4638      	mov	r0, r7
 8004c10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004c14:	47c8      	blx	r9
 8004c16:	3001      	adds	r0, #1
 8004c18:	d023      	beq.n	8004c62 <_printf_common+0xae>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	6922      	ldr	r2, [r4, #16]
 8004c1e:	f003 0306 	and.w	r3, r3, #6
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	bf14      	ite	ne
 8004c26:	2500      	movne	r5, #0
 8004c28:	6833      	ldreq	r3, [r6, #0]
 8004c2a:	f04f 0600 	mov.w	r6, #0
 8004c2e:	bf08      	it	eq
 8004c30:	68e5      	ldreq	r5, [r4, #12]
 8004c32:	f104 041a 	add.w	r4, r4, #26
 8004c36:	bf08      	it	eq
 8004c38:	1aed      	subeq	r5, r5, r3
 8004c3a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c3e:	bf08      	it	eq
 8004c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c44:	4293      	cmp	r3, r2
 8004c46:	bfc4      	itt	gt
 8004c48:	1a9b      	subgt	r3, r3, r2
 8004c4a:	18ed      	addgt	r5, r5, r3
 8004c4c:	42b5      	cmp	r5, r6
 8004c4e:	d11a      	bne.n	8004c86 <_printf_common+0xd2>
 8004c50:	2000      	movs	r0, #0
 8004c52:	e008      	b.n	8004c66 <_printf_common+0xb2>
 8004c54:	2301      	movs	r3, #1
 8004c56:	4652      	mov	r2, sl
 8004c58:	4641      	mov	r1, r8
 8004c5a:	4638      	mov	r0, r7
 8004c5c:	47c8      	blx	r9
 8004c5e:	3001      	adds	r0, #1
 8004c60:	d103      	bne.n	8004c6a <_printf_common+0xb6>
 8004c62:	f04f 30ff 	mov.w	r0, #4294967295
 8004c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c6a:	3501      	adds	r5, #1
 8004c6c:	e7c1      	b.n	8004bf2 <_printf_common+0x3e>
 8004c6e:	2030      	movs	r0, #48	@ 0x30
 8004c70:	18e1      	adds	r1, r4, r3
 8004c72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c7c:	4422      	add	r2, r4
 8004c7e:	3302      	adds	r3, #2
 8004c80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c84:	e7c2      	b.n	8004c0c <_printf_common+0x58>
 8004c86:	2301      	movs	r3, #1
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	47c8      	blx	r9
 8004c90:	3001      	adds	r0, #1
 8004c92:	d0e6      	beq.n	8004c62 <_printf_common+0xae>
 8004c94:	3601      	adds	r6, #1
 8004c96:	e7d9      	b.n	8004c4c <_printf_common+0x98>

08004c98 <_printf_i>:
 8004c98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c9c:	7e0f      	ldrb	r7, [r1, #24]
 8004c9e:	4691      	mov	r9, r2
 8004ca0:	2f78      	cmp	r7, #120	@ 0x78
 8004ca2:	4680      	mov	r8, r0
 8004ca4:	460c      	mov	r4, r1
 8004ca6:	469a      	mov	sl, r3
 8004ca8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004caa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004cae:	d807      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cb0:	2f62      	cmp	r7, #98	@ 0x62
 8004cb2:	d80a      	bhi.n	8004cca <_printf_i+0x32>
 8004cb4:	2f00      	cmp	r7, #0
 8004cb6:	f000 80d1 	beq.w	8004e5c <_printf_i+0x1c4>
 8004cba:	2f58      	cmp	r7, #88	@ 0x58
 8004cbc:	f000 80b8 	beq.w	8004e30 <_printf_i+0x198>
 8004cc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004cc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004cc8:	e03a      	b.n	8004d40 <_printf_i+0xa8>
 8004cca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004cce:	2b15      	cmp	r3, #21
 8004cd0:	d8f6      	bhi.n	8004cc0 <_printf_i+0x28>
 8004cd2:	a101      	add	r1, pc, #4	@ (adr r1, 8004cd8 <_printf_i+0x40>)
 8004cd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cd8:	08004d31 	.word	0x08004d31
 8004cdc:	08004d45 	.word	0x08004d45
 8004ce0:	08004cc1 	.word	0x08004cc1
 8004ce4:	08004cc1 	.word	0x08004cc1
 8004ce8:	08004cc1 	.word	0x08004cc1
 8004cec:	08004cc1 	.word	0x08004cc1
 8004cf0:	08004d45 	.word	0x08004d45
 8004cf4:	08004cc1 	.word	0x08004cc1
 8004cf8:	08004cc1 	.word	0x08004cc1
 8004cfc:	08004cc1 	.word	0x08004cc1
 8004d00:	08004cc1 	.word	0x08004cc1
 8004d04:	08004e43 	.word	0x08004e43
 8004d08:	08004d6f 	.word	0x08004d6f
 8004d0c:	08004dfd 	.word	0x08004dfd
 8004d10:	08004cc1 	.word	0x08004cc1
 8004d14:	08004cc1 	.word	0x08004cc1
 8004d18:	08004e65 	.word	0x08004e65
 8004d1c:	08004cc1 	.word	0x08004cc1
 8004d20:	08004d6f 	.word	0x08004d6f
 8004d24:	08004cc1 	.word	0x08004cc1
 8004d28:	08004cc1 	.word	0x08004cc1
 8004d2c:	08004e05 	.word	0x08004e05
 8004d30:	6833      	ldr	r3, [r6, #0]
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	6032      	str	r2, [r6, #0]
 8004d38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d40:	2301      	movs	r3, #1
 8004d42:	e09c      	b.n	8004e7e <_printf_i+0x1e6>
 8004d44:	6833      	ldr	r3, [r6, #0]
 8004d46:	6820      	ldr	r0, [r4, #0]
 8004d48:	1d19      	adds	r1, r3, #4
 8004d4a:	6031      	str	r1, [r6, #0]
 8004d4c:	0606      	lsls	r6, r0, #24
 8004d4e:	d501      	bpl.n	8004d54 <_printf_i+0xbc>
 8004d50:	681d      	ldr	r5, [r3, #0]
 8004d52:	e003      	b.n	8004d5c <_printf_i+0xc4>
 8004d54:	0645      	lsls	r5, r0, #25
 8004d56:	d5fb      	bpl.n	8004d50 <_printf_i+0xb8>
 8004d58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d5c:	2d00      	cmp	r5, #0
 8004d5e:	da03      	bge.n	8004d68 <_printf_i+0xd0>
 8004d60:	232d      	movs	r3, #45	@ 0x2d
 8004d62:	426d      	negs	r5, r5
 8004d64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d68:	230a      	movs	r3, #10
 8004d6a:	4858      	ldr	r0, [pc, #352]	@ (8004ecc <_printf_i+0x234>)
 8004d6c:	e011      	b.n	8004d92 <_printf_i+0xfa>
 8004d6e:	6821      	ldr	r1, [r4, #0]
 8004d70:	6833      	ldr	r3, [r6, #0]
 8004d72:	0608      	lsls	r0, r1, #24
 8004d74:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d78:	d402      	bmi.n	8004d80 <_printf_i+0xe8>
 8004d7a:	0649      	lsls	r1, r1, #25
 8004d7c:	bf48      	it	mi
 8004d7e:	b2ad      	uxthmi	r5, r5
 8004d80:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d82:	6033      	str	r3, [r6, #0]
 8004d84:	bf14      	ite	ne
 8004d86:	230a      	movne	r3, #10
 8004d88:	2308      	moveq	r3, #8
 8004d8a:	4850      	ldr	r0, [pc, #320]	@ (8004ecc <_printf_i+0x234>)
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d92:	6866      	ldr	r6, [r4, #4]
 8004d94:	2e00      	cmp	r6, #0
 8004d96:	60a6      	str	r6, [r4, #8]
 8004d98:	db05      	blt.n	8004da6 <_printf_i+0x10e>
 8004d9a:	6821      	ldr	r1, [r4, #0]
 8004d9c:	432e      	orrs	r6, r5
 8004d9e:	f021 0104 	bic.w	r1, r1, #4
 8004da2:	6021      	str	r1, [r4, #0]
 8004da4:	d04b      	beq.n	8004e3e <_printf_i+0x1a6>
 8004da6:	4616      	mov	r6, r2
 8004da8:	fbb5 f1f3 	udiv	r1, r5, r3
 8004dac:	fb03 5711 	mls	r7, r3, r1, r5
 8004db0:	5dc7      	ldrb	r7, [r0, r7]
 8004db2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004db6:	462f      	mov	r7, r5
 8004db8:	42bb      	cmp	r3, r7
 8004dba:	460d      	mov	r5, r1
 8004dbc:	d9f4      	bls.n	8004da8 <_printf_i+0x110>
 8004dbe:	2b08      	cmp	r3, #8
 8004dc0:	d10b      	bne.n	8004dda <_printf_i+0x142>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	07df      	lsls	r7, r3, #31
 8004dc6:	d508      	bpl.n	8004dda <_printf_i+0x142>
 8004dc8:	6923      	ldr	r3, [r4, #16]
 8004dca:	6861      	ldr	r1, [r4, #4]
 8004dcc:	4299      	cmp	r1, r3
 8004dce:	bfde      	ittt	le
 8004dd0:	2330      	movle	r3, #48	@ 0x30
 8004dd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dd6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dda:	1b92      	subs	r2, r2, r6
 8004ddc:	6122      	str	r2, [r4, #16]
 8004dde:	464b      	mov	r3, r9
 8004de0:	4621      	mov	r1, r4
 8004de2:	4640      	mov	r0, r8
 8004de4:	f8cd a000 	str.w	sl, [sp]
 8004de8:	aa03      	add	r2, sp, #12
 8004dea:	f7ff fee3 	bl	8004bb4 <_printf_common>
 8004dee:	3001      	adds	r0, #1
 8004df0:	d14a      	bne.n	8004e88 <_printf_i+0x1f0>
 8004df2:	f04f 30ff 	mov.w	r0, #4294967295
 8004df6:	b004      	add	sp, #16
 8004df8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f043 0320 	orr.w	r3, r3, #32
 8004e02:	6023      	str	r3, [r4, #0]
 8004e04:	2778      	movs	r7, #120	@ 0x78
 8004e06:	4832      	ldr	r0, [pc, #200]	@ (8004ed0 <_printf_i+0x238>)
 8004e08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	6831      	ldr	r1, [r6, #0]
 8004e10:	061f      	lsls	r7, r3, #24
 8004e12:	f851 5b04 	ldr.w	r5, [r1], #4
 8004e16:	d402      	bmi.n	8004e1e <_printf_i+0x186>
 8004e18:	065f      	lsls	r7, r3, #25
 8004e1a:	bf48      	it	mi
 8004e1c:	b2ad      	uxthmi	r5, r5
 8004e1e:	6031      	str	r1, [r6, #0]
 8004e20:	07d9      	lsls	r1, r3, #31
 8004e22:	bf44      	itt	mi
 8004e24:	f043 0320 	orrmi.w	r3, r3, #32
 8004e28:	6023      	strmi	r3, [r4, #0]
 8004e2a:	b11d      	cbz	r5, 8004e34 <_printf_i+0x19c>
 8004e2c:	2310      	movs	r3, #16
 8004e2e:	e7ad      	b.n	8004d8c <_printf_i+0xf4>
 8004e30:	4826      	ldr	r0, [pc, #152]	@ (8004ecc <_printf_i+0x234>)
 8004e32:	e7e9      	b.n	8004e08 <_printf_i+0x170>
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	f023 0320 	bic.w	r3, r3, #32
 8004e3a:	6023      	str	r3, [r4, #0]
 8004e3c:	e7f6      	b.n	8004e2c <_printf_i+0x194>
 8004e3e:	4616      	mov	r6, r2
 8004e40:	e7bd      	b.n	8004dbe <_printf_i+0x126>
 8004e42:	6833      	ldr	r3, [r6, #0]
 8004e44:	6825      	ldr	r5, [r4, #0]
 8004e46:	1d18      	adds	r0, r3, #4
 8004e48:	6961      	ldr	r1, [r4, #20]
 8004e4a:	6030      	str	r0, [r6, #0]
 8004e4c:	062e      	lsls	r6, r5, #24
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	d501      	bpl.n	8004e56 <_printf_i+0x1be>
 8004e52:	6019      	str	r1, [r3, #0]
 8004e54:	e002      	b.n	8004e5c <_printf_i+0x1c4>
 8004e56:	0668      	lsls	r0, r5, #25
 8004e58:	d5fb      	bpl.n	8004e52 <_printf_i+0x1ba>
 8004e5a:	8019      	strh	r1, [r3, #0]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	4616      	mov	r6, r2
 8004e60:	6123      	str	r3, [r4, #16]
 8004e62:	e7bc      	b.n	8004dde <_printf_i+0x146>
 8004e64:	6833      	ldr	r3, [r6, #0]
 8004e66:	2100      	movs	r1, #0
 8004e68:	1d1a      	adds	r2, r3, #4
 8004e6a:	6032      	str	r2, [r6, #0]
 8004e6c:	681e      	ldr	r6, [r3, #0]
 8004e6e:	6862      	ldr	r2, [r4, #4]
 8004e70:	4630      	mov	r0, r6
 8004e72:	f000 f9ea 	bl	800524a <memchr>
 8004e76:	b108      	cbz	r0, 8004e7c <_printf_i+0x1e4>
 8004e78:	1b80      	subs	r0, r0, r6
 8004e7a:	6060      	str	r0, [r4, #4]
 8004e7c:	6863      	ldr	r3, [r4, #4]
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	2300      	movs	r3, #0
 8004e82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e86:	e7aa      	b.n	8004dde <_printf_i+0x146>
 8004e88:	4632      	mov	r2, r6
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	4640      	mov	r0, r8
 8004e8e:	6923      	ldr	r3, [r4, #16]
 8004e90:	47d0      	blx	sl
 8004e92:	3001      	adds	r0, #1
 8004e94:	d0ad      	beq.n	8004df2 <_printf_i+0x15a>
 8004e96:	6823      	ldr	r3, [r4, #0]
 8004e98:	079b      	lsls	r3, r3, #30
 8004e9a:	d413      	bmi.n	8004ec4 <_printf_i+0x22c>
 8004e9c:	68e0      	ldr	r0, [r4, #12]
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	4298      	cmp	r0, r3
 8004ea2:	bfb8      	it	lt
 8004ea4:	4618      	movlt	r0, r3
 8004ea6:	e7a6      	b.n	8004df6 <_printf_i+0x15e>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4632      	mov	r2, r6
 8004eac:	4649      	mov	r1, r9
 8004eae:	4640      	mov	r0, r8
 8004eb0:	47d0      	blx	sl
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d09d      	beq.n	8004df2 <_printf_i+0x15a>
 8004eb6:	3501      	adds	r5, #1
 8004eb8:	68e3      	ldr	r3, [r4, #12]
 8004eba:	9903      	ldr	r1, [sp, #12]
 8004ebc:	1a5b      	subs	r3, r3, r1
 8004ebe:	42ab      	cmp	r3, r5
 8004ec0:	dcf2      	bgt.n	8004ea8 <_printf_i+0x210>
 8004ec2:	e7eb      	b.n	8004e9c <_printf_i+0x204>
 8004ec4:	2500      	movs	r5, #0
 8004ec6:	f104 0619 	add.w	r6, r4, #25
 8004eca:	e7f5      	b.n	8004eb8 <_printf_i+0x220>
 8004ecc:	080073e0 	.word	0x080073e0
 8004ed0:	080073f1 	.word	0x080073f1

08004ed4 <std>:
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	b510      	push	{r4, lr}
 8004ed8:	4604      	mov	r4, r0
 8004eda:	e9c0 3300 	strd	r3, r3, [r0]
 8004ede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ee2:	6083      	str	r3, [r0, #8]
 8004ee4:	8181      	strh	r1, [r0, #12]
 8004ee6:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ee8:	81c2      	strh	r2, [r0, #14]
 8004eea:	6183      	str	r3, [r0, #24]
 8004eec:	4619      	mov	r1, r3
 8004eee:	2208      	movs	r2, #8
 8004ef0:	305c      	adds	r0, #92	@ 0x5c
 8004ef2:	f000 f92a 	bl	800514a <memset>
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f2c <std+0x58>)
 8004ef8:	6224      	str	r4, [r4, #32]
 8004efa:	6263      	str	r3, [r4, #36]	@ 0x24
 8004efc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f30 <std+0x5c>)
 8004efe:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f00:	4b0c      	ldr	r3, [pc, #48]	@ (8004f34 <std+0x60>)
 8004f02:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f04:	4b0c      	ldr	r3, [pc, #48]	@ (8004f38 <std+0x64>)
 8004f06:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f08:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <std+0x68>)
 8004f0a:	429c      	cmp	r4, r3
 8004f0c:	d006      	beq.n	8004f1c <std+0x48>
 8004f0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f12:	4294      	cmp	r4, r2
 8004f14:	d002      	beq.n	8004f1c <std+0x48>
 8004f16:	33d0      	adds	r3, #208	@ 0xd0
 8004f18:	429c      	cmp	r4, r3
 8004f1a:	d105      	bne.n	8004f28 <std+0x54>
 8004f1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f24:	f000 b98e 	b.w	8005244 <__retarget_lock_init_recursive>
 8004f28:	bd10      	pop	{r4, pc}
 8004f2a:	bf00      	nop
 8004f2c:	080050c5 	.word	0x080050c5
 8004f30:	080050e7 	.word	0x080050e7
 8004f34:	0800511f 	.word	0x0800511f
 8004f38:	08005143 	.word	0x08005143
 8004f3c:	200002c8 	.word	0x200002c8

08004f40 <stdio_exit_handler>:
 8004f40:	4a02      	ldr	r2, [pc, #8]	@ (8004f4c <stdio_exit_handler+0xc>)
 8004f42:	4903      	ldr	r1, [pc, #12]	@ (8004f50 <stdio_exit_handler+0x10>)
 8004f44:	4803      	ldr	r0, [pc, #12]	@ (8004f54 <stdio_exit_handler+0x14>)
 8004f46:	f000 b869 	b.w	800501c <_fwalk_sglue>
 8004f4a:	bf00      	nop
 8004f4c:	20000010 	.word	0x20000010
 8004f50:	08006bc1 	.word	0x08006bc1
 8004f54:	20000020 	.word	0x20000020

08004f58 <cleanup_stdio>:
 8004f58:	6841      	ldr	r1, [r0, #4]
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <cleanup_stdio+0x34>)
 8004f5c:	b510      	push	{r4, lr}
 8004f5e:	4299      	cmp	r1, r3
 8004f60:	4604      	mov	r4, r0
 8004f62:	d001      	beq.n	8004f68 <cleanup_stdio+0x10>
 8004f64:	f001 fe2c 	bl	8006bc0 <_fflush_r>
 8004f68:	68a1      	ldr	r1, [r4, #8]
 8004f6a:	4b09      	ldr	r3, [pc, #36]	@ (8004f90 <cleanup_stdio+0x38>)
 8004f6c:	4299      	cmp	r1, r3
 8004f6e:	d002      	beq.n	8004f76 <cleanup_stdio+0x1e>
 8004f70:	4620      	mov	r0, r4
 8004f72:	f001 fe25 	bl	8006bc0 <_fflush_r>
 8004f76:	68e1      	ldr	r1, [r4, #12]
 8004f78:	4b06      	ldr	r3, [pc, #24]	@ (8004f94 <cleanup_stdio+0x3c>)
 8004f7a:	4299      	cmp	r1, r3
 8004f7c:	d004      	beq.n	8004f88 <cleanup_stdio+0x30>
 8004f7e:	4620      	mov	r0, r4
 8004f80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f84:	f001 be1c 	b.w	8006bc0 <_fflush_r>
 8004f88:	bd10      	pop	{r4, pc}
 8004f8a:	bf00      	nop
 8004f8c:	200002c8 	.word	0x200002c8
 8004f90:	20000330 	.word	0x20000330
 8004f94:	20000398 	.word	0x20000398

08004f98 <global_stdio_init.part.0>:
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc8 <global_stdio_init.part.0+0x30>)
 8004f9c:	4c0b      	ldr	r4, [pc, #44]	@ (8004fcc <global_stdio_init.part.0+0x34>)
 8004f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8004fd0 <global_stdio_init.part.0+0x38>)
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f7ff ff94 	bl	8004ed4 <std>
 8004fac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	2109      	movs	r1, #9
 8004fb4:	f7ff ff8e 	bl	8004ed4 <std>
 8004fb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc2:	2112      	movs	r1, #18
 8004fc4:	f7ff bf86 	b.w	8004ed4 <std>
 8004fc8:	20000400 	.word	0x20000400
 8004fcc:	200002c8 	.word	0x200002c8
 8004fd0:	08004f41 	.word	0x08004f41

08004fd4 <__sfp_lock_acquire>:
 8004fd4:	4801      	ldr	r0, [pc, #4]	@ (8004fdc <__sfp_lock_acquire+0x8>)
 8004fd6:	f000 b936 	b.w	8005246 <__retarget_lock_acquire_recursive>
 8004fda:	bf00      	nop
 8004fdc:	20000409 	.word	0x20000409

08004fe0 <__sfp_lock_release>:
 8004fe0:	4801      	ldr	r0, [pc, #4]	@ (8004fe8 <__sfp_lock_release+0x8>)
 8004fe2:	f000 b931 	b.w	8005248 <__retarget_lock_release_recursive>
 8004fe6:	bf00      	nop
 8004fe8:	20000409 	.word	0x20000409

08004fec <__sinit>:
 8004fec:	b510      	push	{r4, lr}
 8004fee:	4604      	mov	r4, r0
 8004ff0:	f7ff fff0 	bl	8004fd4 <__sfp_lock_acquire>
 8004ff4:	6a23      	ldr	r3, [r4, #32]
 8004ff6:	b11b      	cbz	r3, 8005000 <__sinit+0x14>
 8004ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ffc:	f7ff bff0 	b.w	8004fe0 <__sfp_lock_release>
 8005000:	4b04      	ldr	r3, [pc, #16]	@ (8005014 <__sinit+0x28>)
 8005002:	6223      	str	r3, [r4, #32]
 8005004:	4b04      	ldr	r3, [pc, #16]	@ (8005018 <__sinit+0x2c>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f5      	bne.n	8004ff8 <__sinit+0xc>
 800500c:	f7ff ffc4 	bl	8004f98 <global_stdio_init.part.0>
 8005010:	e7f2      	b.n	8004ff8 <__sinit+0xc>
 8005012:	bf00      	nop
 8005014:	08004f59 	.word	0x08004f59
 8005018:	20000400 	.word	0x20000400

0800501c <_fwalk_sglue>:
 800501c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005020:	4607      	mov	r7, r0
 8005022:	4688      	mov	r8, r1
 8005024:	4614      	mov	r4, r2
 8005026:	2600      	movs	r6, #0
 8005028:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800502c:	f1b9 0901 	subs.w	r9, r9, #1
 8005030:	d505      	bpl.n	800503e <_fwalk_sglue+0x22>
 8005032:	6824      	ldr	r4, [r4, #0]
 8005034:	2c00      	cmp	r4, #0
 8005036:	d1f7      	bne.n	8005028 <_fwalk_sglue+0xc>
 8005038:	4630      	mov	r0, r6
 800503a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800503e:	89ab      	ldrh	r3, [r5, #12]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d907      	bls.n	8005054 <_fwalk_sglue+0x38>
 8005044:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005048:	3301      	adds	r3, #1
 800504a:	d003      	beq.n	8005054 <_fwalk_sglue+0x38>
 800504c:	4629      	mov	r1, r5
 800504e:	4638      	mov	r0, r7
 8005050:	47c0      	blx	r8
 8005052:	4306      	orrs	r6, r0
 8005054:	3568      	adds	r5, #104	@ 0x68
 8005056:	e7e9      	b.n	800502c <_fwalk_sglue+0x10>

08005058 <sniprintf>:
 8005058:	b40c      	push	{r2, r3}
 800505a:	b530      	push	{r4, r5, lr}
 800505c:	4b18      	ldr	r3, [pc, #96]	@ (80050c0 <sniprintf+0x68>)
 800505e:	1e0c      	subs	r4, r1, #0
 8005060:	681d      	ldr	r5, [r3, #0]
 8005062:	b09d      	sub	sp, #116	@ 0x74
 8005064:	da08      	bge.n	8005078 <sniprintf+0x20>
 8005066:	238b      	movs	r3, #139	@ 0x8b
 8005068:	f04f 30ff 	mov.w	r0, #4294967295
 800506c:	602b      	str	r3, [r5, #0]
 800506e:	b01d      	add	sp, #116	@ 0x74
 8005070:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005074:	b002      	add	sp, #8
 8005076:	4770      	bx	lr
 8005078:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800507c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	931b      	str	r3, [sp, #108]	@ 0x6c
 8005086:	bf0c      	ite	eq
 8005088:	4623      	moveq	r3, r4
 800508a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800508e:	9304      	str	r3, [sp, #16]
 8005090:	9307      	str	r3, [sp, #28]
 8005092:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005096:	9002      	str	r0, [sp, #8]
 8005098:	9006      	str	r0, [sp, #24]
 800509a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800509e:	4628      	mov	r0, r5
 80050a0:	ab21      	add	r3, sp, #132	@ 0x84
 80050a2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80050a4:	a902      	add	r1, sp, #8
 80050a6:	9301      	str	r3, [sp, #4]
 80050a8:	f001 fc0e 	bl	80068c8 <_svfiprintf_r>
 80050ac:	1c43      	adds	r3, r0, #1
 80050ae:	bfbc      	itt	lt
 80050b0:	238b      	movlt	r3, #139	@ 0x8b
 80050b2:	602b      	strlt	r3, [r5, #0]
 80050b4:	2c00      	cmp	r4, #0
 80050b6:	d0da      	beq.n	800506e <sniprintf+0x16>
 80050b8:	2200      	movs	r2, #0
 80050ba:	9b02      	ldr	r3, [sp, #8]
 80050bc:	701a      	strb	r2, [r3, #0]
 80050be:	e7d6      	b.n	800506e <sniprintf+0x16>
 80050c0:	2000001c 	.word	0x2000001c

080050c4 <__sread>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	460c      	mov	r4, r1
 80050c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050cc:	f000 f86c 	bl	80051a8 <_read_r>
 80050d0:	2800      	cmp	r0, #0
 80050d2:	bfab      	itete	ge
 80050d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80050d6:	89a3      	ldrhlt	r3, [r4, #12]
 80050d8:	181b      	addge	r3, r3, r0
 80050da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80050de:	bfac      	ite	ge
 80050e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80050e2:	81a3      	strhlt	r3, [r4, #12]
 80050e4:	bd10      	pop	{r4, pc}

080050e6 <__swrite>:
 80050e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050ea:	461f      	mov	r7, r3
 80050ec:	898b      	ldrh	r3, [r1, #12]
 80050ee:	4605      	mov	r5, r0
 80050f0:	05db      	lsls	r3, r3, #23
 80050f2:	460c      	mov	r4, r1
 80050f4:	4616      	mov	r6, r2
 80050f6:	d505      	bpl.n	8005104 <__swrite+0x1e>
 80050f8:	2302      	movs	r3, #2
 80050fa:	2200      	movs	r2, #0
 80050fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005100:	f000 f840 	bl	8005184 <_lseek_r>
 8005104:	89a3      	ldrh	r3, [r4, #12]
 8005106:	4632      	mov	r2, r6
 8005108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800510c:	81a3      	strh	r3, [r4, #12]
 800510e:	4628      	mov	r0, r5
 8005110:	463b      	mov	r3, r7
 8005112:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800511a:	f000 b857 	b.w	80051cc <_write_r>

0800511e <__sseek>:
 800511e:	b510      	push	{r4, lr}
 8005120:	460c      	mov	r4, r1
 8005122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005126:	f000 f82d 	bl	8005184 <_lseek_r>
 800512a:	1c43      	adds	r3, r0, #1
 800512c:	89a3      	ldrh	r3, [r4, #12]
 800512e:	bf15      	itete	ne
 8005130:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005132:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005136:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800513a:	81a3      	strheq	r3, [r4, #12]
 800513c:	bf18      	it	ne
 800513e:	81a3      	strhne	r3, [r4, #12]
 8005140:	bd10      	pop	{r4, pc}

08005142 <__sclose>:
 8005142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005146:	f000 b80d 	b.w	8005164 <_close_r>

0800514a <memset>:
 800514a:	4603      	mov	r3, r0
 800514c:	4402      	add	r2, r0
 800514e:	4293      	cmp	r3, r2
 8005150:	d100      	bne.n	8005154 <memset+0xa>
 8005152:	4770      	bx	lr
 8005154:	f803 1b01 	strb.w	r1, [r3], #1
 8005158:	e7f9      	b.n	800514e <memset+0x4>
	...

0800515c <_localeconv_r>:
 800515c:	4800      	ldr	r0, [pc, #0]	@ (8005160 <_localeconv_r+0x4>)
 800515e:	4770      	bx	lr
 8005160:	2000015c 	.word	0x2000015c

08005164 <_close_r>:
 8005164:	b538      	push	{r3, r4, r5, lr}
 8005166:	2300      	movs	r3, #0
 8005168:	4d05      	ldr	r5, [pc, #20]	@ (8005180 <_close_r+0x1c>)
 800516a:	4604      	mov	r4, r0
 800516c:	4608      	mov	r0, r1
 800516e:	602b      	str	r3, [r5, #0]
 8005170:	f7fc fc39 	bl	80019e6 <_close>
 8005174:	1c43      	adds	r3, r0, #1
 8005176:	d102      	bne.n	800517e <_close_r+0x1a>
 8005178:	682b      	ldr	r3, [r5, #0]
 800517a:	b103      	cbz	r3, 800517e <_close_r+0x1a>
 800517c:	6023      	str	r3, [r4, #0]
 800517e:	bd38      	pop	{r3, r4, r5, pc}
 8005180:	20000404 	.word	0x20000404

08005184 <_lseek_r>:
 8005184:	b538      	push	{r3, r4, r5, lr}
 8005186:	4604      	mov	r4, r0
 8005188:	4608      	mov	r0, r1
 800518a:	4611      	mov	r1, r2
 800518c:	2200      	movs	r2, #0
 800518e:	4d05      	ldr	r5, [pc, #20]	@ (80051a4 <_lseek_r+0x20>)
 8005190:	602a      	str	r2, [r5, #0]
 8005192:	461a      	mov	r2, r3
 8005194:	f7fc fc4b 	bl	8001a2e <_lseek>
 8005198:	1c43      	adds	r3, r0, #1
 800519a:	d102      	bne.n	80051a2 <_lseek_r+0x1e>
 800519c:	682b      	ldr	r3, [r5, #0]
 800519e:	b103      	cbz	r3, 80051a2 <_lseek_r+0x1e>
 80051a0:	6023      	str	r3, [r4, #0]
 80051a2:	bd38      	pop	{r3, r4, r5, pc}
 80051a4:	20000404 	.word	0x20000404

080051a8 <_read_r>:
 80051a8:	b538      	push	{r3, r4, r5, lr}
 80051aa:	4604      	mov	r4, r0
 80051ac:	4608      	mov	r0, r1
 80051ae:	4611      	mov	r1, r2
 80051b0:	2200      	movs	r2, #0
 80051b2:	4d05      	ldr	r5, [pc, #20]	@ (80051c8 <_read_r+0x20>)
 80051b4:	602a      	str	r2, [r5, #0]
 80051b6:	461a      	mov	r2, r3
 80051b8:	f7fc fbdc 	bl	8001974 <_read>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d102      	bne.n	80051c6 <_read_r+0x1e>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	b103      	cbz	r3, 80051c6 <_read_r+0x1e>
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	bd38      	pop	{r3, r4, r5, pc}
 80051c8:	20000404 	.word	0x20000404

080051cc <_write_r>:
 80051cc:	b538      	push	{r3, r4, r5, lr}
 80051ce:	4604      	mov	r4, r0
 80051d0:	4608      	mov	r0, r1
 80051d2:	4611      	mov	r1, r2
 80051d4:	2200      	movs	r2, #0
 80051d6:	4d05      	ldr	r5, [pc, #20]	@ (80051ec <_write_r+0x20>)
 80051d8:	602a      	str	r2, [r5, #0]
 80051da:	461a      	mov	r2, r3
 80051dc:	f7fc fbe7 	bl	80019ae <_write>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_write_r+0x1e>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_write_r+0x1e>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	20000404 	.word	0x20000404

080051f0 <__errno>:
 80051f0:	4b01      	ldr	r3, [pc, #4]	@ (80051f8 <__errno+0x8>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	2000001c 	.word	0x2000001c

080051fc <__libc_init_array>:
 80051fc:	b570      	push	{r4, r5, r6, lr}
 80051fe:	2600      	movs	r6, #0
 8005200:	4d0c      	ldr	r5, [pc, #48]	@ (8005234 <__libc_init_array+0x38>)
 8005202:	4c0d      	ldr	r4, [pc, #52]	@ (8005238 <__libc_init_array+0x3c>)
 8005204:	1b64      	subs	r4, r4, r5
 8005206:	10a4      	asrs	r4, r4, #2
 8005208:	42a6      	cmp	r6, r4
 800520a:	d109      	bne.n	8005220 <__libc_init_array+0x24>
 800520c:	f002 f874 	bl	80072f8 <_init>
 8005210:	2600      	movs	r6, #0
 8005212:	4d0a      	ldr	r5, [pc, #40]	@ (800523c <__libc_init_array+0x40>)
 8005214:	4c0a      	ldr	r4, [pc, #40]	@ (8005240 <__libc_init_array+0x44>)
 8005216:	1b64      	subs	r4, r4, r5
 8005218:	10a4      	asrs	r4, r4, #2
 800521a:	42a6      	cmp	r6, r4
 800521c:	d105      	bne.n	800522a <__libc_init_array+0x2e>
 800521e:	bd70      	pop	{r4, r5, r6, pc}
 8005220:	f855 3b04 	ldr.w	r3, [r5], #4
 8005224:	4798      	blx	r3
 8005226:	3601      	adds	r6, #1
 8005228:	e7ee      	b.n	8005208 <__libc_init_array+0xc>
 800522a:	f855 3b04 	ldr.w	r3, [r5], #4
 800522e:	4798      	blx	r3
 8005230:	3601      	adds	r6, #1
 8005232:	e7f2      	b.n	800521a <__libc_init_array+0x1e>
 8005234:	0800774c 	.word	0x0800774c
 8005238:	0800774c 	.word	0x0800774c
 800523c:	0800774c 	.word	0x0800774c
 8005240:	08007750 	.word	0x08007750

08005244 <__retarget_lock_init_recursive>:
 8005244:	4770      	bx	lr

08005246 <__retarget_lock_acquire_recursive>:
 8005246:	4770      	bx	lr

08005248 <__retarget_lock_release_recursive>:
 8005248:	4770      	bx	lr

0800524a <memchr>:
 800524a:	4603      	mov	r3, r0
 800524c:	b510      	push	{r4, lr}
 800524e:	b2c9      	uxtb	r1, r1
 8005250:	4402      	add	r2, r0
 8005252:	4293      	cmp	r3, r2
 8005254:	4618      	mov	r0, r3
 8005256:	d101      	bne.n	800525c <memchr+0x12>
 8005258:	2000      	movs	r0, #0
 800525a:	e003      	b.n	8005264 <memchr+0x1a>
 800525c:	7804      	ldrb	r4, [r0, #0]
 800525e:	3301      	adds	r3, #1
 8005260:	428c      	cmp	r4, r1
 8005262:	d1f6      	bne.n	8005252 <memchr+0x8>
 8005264:	bd10      	pop	{r4, pc}

08005266 <quorem>:
 8005266:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526a:	6903      	ldr	r3, [r0, #16]
 800526c:	690c      	ldr	r4, [r1, #16]
 800526e:	4607      	mov	r7, r0
 8005270:	42a3      	cmp	r3, r4
 8005272:	db7e      	blt.n	8005372 <quorem+0x10c>
 8005274:	3c01      	subs	r4, #1
 8005276:	00a3      	lsls	r3, r4, #2
 8005278:	f100 0514 	add.w	r5, r0, #20
 800527c:	f101 0814 	add.w	r8, r1, #20
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005286:	9301      	str	r3, [sp, #4]
 8005288:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800528c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005290:	3301      	adds	r3, #1
 8005292:	429a      	cmp	r2, r3
 8005294:	fbb2 f6f3 	udiv	r6, r2, r3
 8005298:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800529c:	d32e      	bcc.n	80052fc <quorem+0x96>
 800529e:	f04f 0a00 	mov.w	sl, #0
 80052a2:	46c4      	mov	ip, r8
 80052a4:	46ae      	mov	lr, r5
 80052a6:	46d3      	mov	fp, sl
 80052a8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80052ac:	b298      	uxth	r0, r3
 80052ae:	fb06 a000 	mla	r0, r6, r0, sl
 80052b2:	0c1b      	lsrs	r3, r3, #16
 80052b4:	0c02      	lsrs	r2, r0, #16
 80052b6:	fb06 2303 	mla	r3, r6, r3, r2
 80052ba:	f8de 2000 	ldr.w	r2, [lr]
 80052be:	b280      	uxth	r0, r0
 80052c0:	b292      	uxth	r2, r2
 80052c2:	1a12      	subs	r2, r2, r0
 80052c4:	445a      	add	r2, fp
 80052c6:	f8de 0000 	ldr.w	r0, [lr]
 80052ca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80052d4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80052d8:	b292      	uxth	r2, r2
 80052da:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80052de:	45e1      	cmp	r9, ip
 80052e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80052e4:	f84e 2b04 	str.w	r2, [lr], #4
 80052e8:	d2de      	bcs.n	80052a8 <quorem+0x42>
 80052ea:	9b00      	ldr	r3, [sp, #0]
 80052ec:	58eb      	ldr	r3, [r5, r3]
 80052ee:	b92b      	cbnz	r3, 80052fc <quorem+0x96>
 80052f0:	9b01      	ldr	r3, [sp, #4]
 80052f2:	3b04      	subs	r3, #4
 80052f4:	429d      	cmp	r5, r3
 80052f6:	461a      	mov	r2, r3
 80052f8:	d32f      	bcc.n	800535a <quorem+0xf4>
 80052fa:	613c      	str	r4, [r7, #16]
 80052fc:	4638      	mov	r0, r7
 80052fe:	f001 f97f 	bl	8006600 <__mcmp>
 8005302:	2800      	cmp	r0, #0
 8005304:	db25      	blt.n	8005352 <quorem+0xec>
 8005306:	4629      	mov	r1, r5
 8005308:	2000      	movs	r0, #0
 800530a:	f858 2b04 	ldr.w	r2, [r8], #4
 800530e:	f8d1 c000 	ldr.w	ip, [r1]
 8005312:	fa1f fe82 	uxth.w	lr, r2
 8005316:	fa1f f38c 	uxth.w	r3, ip
 800531a:	eba3 030e 	sub.w	r3, r3, lr
 800531e:	4403      	add	r3, r0
 8005320:	0c12      	lsrs	r2, r2, #16
 8005322:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005326:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005330:	45c1      	cmp	r9, r8
 8005332:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005336:	f841 3b04 	str.w	r3, [r1], #4
 800533a:	d2e6      	bcs.n	800530a <quorem+0xa4>
 800533c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005340:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005344:	b922      	cbnz	r2, 8005350 <quorem+0xea>
 8005346:	3b04      	subs	r3, #4
 8005348:	429d      	cmp	r5, r3
 800534a:	461a      	mov	r2, r3
 800534c:	d30b      	bcc.n	8005366 <quorem+0x100>
 800534e:	613c      	str	r4, [r7, #16]
 8005350:	3601      	adds	r6, #1
 8005352:	4630      	mov	r0, r6
 8005354:	b003      	add	sp, #12
 8005356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535a:	6812      	ldr	r2, [r2, #0]
 800535c:	3b04      	subs	r3, #4
 800535e:	2a00      	cmp	r2, #0
 8005360:	d1cb      	bne.n	80052fa <quorem+0x94>
 8005362:	3c01      	subs	r4, #1
 8005364:	e7c6      	b.n	80052f4 <quorem+0x8e>
 8005366:	6812      	ldr	r2, [r2, #0]
 8005368:	3b04      	subs	r3, #4
 800536a:	2a00      	cmp	r2, #0
 800536c:	d1ef      	bne.n	800534e <quorem+0xe8>
 800536e:	3c01      	subs	r4, #1
 8005370:	e7ea      	b.n	8005348 <quorem+0xe2>
 8005372:	2000      	movs	r0, #0
 8005374:	e7ee      	b.n	8005354 <quorem+0xee>
	...

08005378 <_dtoa_r>:
 8005378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800537c:	4614      	mov	r4, r2
 800537e:	461d      	mov	r5, r3
 8005380:	69c7      	ldr	r7, [r0, #28]
 8005382:	b097      	sub	sp, #92	@ 0x5c
 8005384:	4681      	mov	r9, r0
 8005386:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800538a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800538c:	b97f      	cbnz	r7, 80053ae <_dtoa_r+0x36>
 800538e:	2010      	movs	r0, #16
 8005390:	f000 fe0e 	bl	8005fb0 <malloc>
 8005394:	4602      	mov	r2, r0
 8005396:	f8c9 001c 	str.w	r0, [r9, #28]
 800539a:	b920      	cbnz	r0, 80053a6 <_dtoa_r+0x2e>
 800539c:	21ef      	movs	r1, #239	@ 0xef
 800539e:	4bac      	ldr	r3, [pc, #688]	@ (8005650 <_dtoa_r+0x2d8>)
 80053a0:	48ac      	ldr	r0, [pc, #688]	@ (8005654 <_dtoa_r+0x2dc>)
 80053a2:	f001 fc6d 	bl	8006c80 <__assert_func>
 80053a6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80053aa:	6007      	str	r7, [r0, #0]
 80053ac:	60c7      	str	r7, [r0, #12]
 80053ae:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053b2:	6819      	ldr	r1, [r3, #0]
 80053b4:	b159      	cbz	r1, 80053ce <_dtoa_r+0x56>
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	2301      	movs	r3, #1
 80053ba:	4093      	lsls	r3, r2
 80053bc:	604a      	str	r2, [r1, #4]
 80053be:	608b      	str	r3, [r1, #8]
 80053c0:	4648      	mov	r0, r9
 80053c2:	f000 feeb 	bl	800619c <_Bfree>
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	1e2b      	subs	r3, r5, #0
 80053d0:	bfaf      	iteee	ge
 80053d2:	2300      	movge	r3, #0
 80053d4:	2201      	movlt	r2, #1
 80053d6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80053da:	9307      	strlt	r3, [sp, #28]
 80053dc:	bfa8      	it	ge
 80053de:	6033      	strge	r3, [r6, #0]
 80053e0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80053e4:	4b9c      	ldr	r3, [pc, #624]	@ (8005658 <_dtoa_r+0x2e0>)
 80053e6:	bfb8      	it	lt
 80053e8:	6032      	strlt	r2, [r6, #0]
 80053ea:	ea33 0308 	bics.w	r3, r3, r8
 80053ee:	d112      	bne.n	8005416 <_dtoa_r+0x9e>
 80053f0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80053f4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80053f6:	6013      	str	r3, [r2, #0]
 80053f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80053fc:	4323      	orrs	r3, r4
 80053fe:	f000 855e 	beq.w	8005ebe <_dtoa_r+0xb46>
 8005402:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005404:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800565c <_dtoa_r+0x2e4>
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8560 	beq.w	8005ece <_dtoa_r+0xb56>
 800540e:	f10a 0303 	add.w	r3, sl, #3
 8005412:	f000 bd5a 	b.w	8005eca <_dtoa_r+0xb52>
 8005416:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800541a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800541e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005422:	2200      	movs	r2, #0
 8005424:	2300      	movs	r3, #0
 8005426:	f7fb fabf 	bl	80009a8 <__aeabi_dcmpeq>
 800542a:	4607      	mov	r7, r0
 800542c:	b158      	cbz	r0, 8005446 <_dtoa_r+0xce>
 800542e:	2301      	movs	r3, #1
 8005430:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005436:	b113      	cbz	r3, 800543e <_dtoa_r+0xc6>
 8005438:	4b89      	ldr	r3, [pc, #548]	@ (8005660 <_dtoa_r+0x2e8>)
 800543a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005664 <_dtoa_r+0x2ec>
 8005442:	f000 bd44 	b.w	8005ece <_dtoa_r+0xb56>
 8005446:	ab14      	add	r3, sp, #80	@ 0x50
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	ab15      	add	r3, sp, #84	@ 0x54
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	4648      	mov	r0, r9
 8005450:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005454:	f001 f984 	bl	8006760 <__d2b>
 8005458:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800545c:	9003      	str	r0, [sp, #12]
 800545e:	2e00      	cmp	r6, #0
 8005460:	d078      	beq.n	8005554 <_dtoa_r+0x1dc>
 8005462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005466:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005468:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800546c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005470:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005474:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005478:	9712      	str	r7, [sp, #72]	@ 0x48
 800547a:	4619      	mov	r1, r3
 800547c:	2200      	movs	r2, #0
 800547e:	4b7a      	ldr	r3, [pc, #488]	@ (8005668 <_dtoa_r+0x2f0>)
 8005480:	f7fa fe72 	bl	8000168 <__aeabi_dsub>
 8005484:	a36c      	add	r3, pc, #432	@ (adr r3, 8005638 <_dtoa_r+0x2c0>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	f7fb f825 	bl	80004d8 <__aeabi_dmul>
 800548e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005640 <_dtoa_r+0x2c8>)
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	f7fa fe6a 	bl	800016c <__adddf3>
 8005498:	4604      	mov	r4, r0
 800549a:	4630      	mov	r0, r6
 800549c:	460d      	mov	r5, r1
 800549e:	f7fa ffb1 	bl	8000404 <__aeabi_i2d>
 80054a2:	a369      	add	r3, pc, #420	@ (adr r3, 8005648 <_dtoa_r+0x2d0>)
 80054a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a8:	f7fb f816 	bl	80004d8 <__aeabi_dmul>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4620      	mov	r0, r4
 80054b2:	4629      	mov	r1, r5
 80054b4:	f7fa fe5a 	bl	800016c <__adddf3>
 80054b8:	4604      	mov	r4, r0
 80054ba:	460d      	mov	r5, r1
 80054bc:	f7fb fabc 	bl	8000a38 <__aeabi_d2iz>
 80054c0:	2200      	movs	r2, #0
 80054c2:	4607      	mov	r7, r0
 80054c4:	2300      	movs	r3, #0
 80054c6:	4620      	mov	r0, r4
 80054c8:	4629      	mov	r1, r5
 80054ca:	f7fb fa77 	bl	80009bc <__aeabi_dcmplt>
 80054ce:	b140      	cbz	r0, 80054e2 <_dtoa_r+0x16a>
 80054d0:	4638      	mov	r0, r7
 80054d2:	f7fa ff97 	bl	8000404 <__aeabi_i2d>
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	f7fb fa65 	bl	80009a8 <__aeabi_dcmpeq>
 80054de:	b900      	cbnz	r0, 80054e2 <_dtoa_r+0x16a>
 80054e0:	3f01      	subs	r7, #1
 80054e2:	2f16      	cmp	r7, #22
 80054e4:	d854      	bhi.n	8005590 <_dtoa_r+0x218>
 80054e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80054ea:	4b60      	ldr	r3, [pc, #384]	@ (800566c <_dtoa_r+0x2f4>)
 80054ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	f7fb fa62 	bl	80009bc <__aeabi_dcmplt>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d04b      	beq.n	8005594 <_dtoa_r+0x21c>
 80054fc:	2300      	movs	r3, #0
 80054fe:	3f01      	subs	r7, #1
 8005500:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005502:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005504:	1b9b      	subs	r3, r3, r6
 8005506:	1e5a      	subs	r2, r3, #1
 8005508:	bf49      	itett	mi
 800550a:	f1c3 0301 	rsbmi	r3, r3, #1
 800550e:	2300      	movpl	r3, #0
 8005510:	9304      	strmi	r3, [sp, #16]
 8005512:	2300      	movmi	r3, #0
 8005514:	9209      	str	r2, [sp, #36]	@ 0x24
 8005516:	bf54      	ite	pl
 8005518:	9304      	strpl	r3, [sp, #16]
 800551a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800551c:	2f00      	cmp	r7, #0
 800551e:	db3b      	blt.n	8005598 <_dtoa_r+0x220>
 8005520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005522:	970e      	str	r7, [sp, #56]	@ 0x38
 8005524:	443b      	add	r3, r7
 8005526:	9309      	str	r3, [sp, #36]	@ 0x24
 8005528:	2300      	movs	r3, #0
 800552a:	930a      	str	r3, [sp, #40]	@ 0x28
 800552c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800552e:	2b09      	cmp	r3, #9
 8005530:	d865      	bhi.n	80055fe <_dtoa_r+0x286>
 8005532:	2b05      	cmp	r3, #5
 8005534:	bfc4      	itt	gt
 8005536:	3b04      	subgt	r3, #4
 8005538:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800553a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800553c:	bfc8      	it	gt
 800553e:	2400      	movgt	r4, #0
 8005540:	f1a3 0302 	sub.w	r3, r3, #2
 8005544:	bfd8      	it	le
 8005546:	2401      	movle	r4, #1
 8005548:	2b03      	cmp	r3, #3
 800554a:	d864      	bhi.n	8005616 <_dtoa_r+0x29e>
 800554c:	e8df f003 	tbb	[pc, r3]
 8005550:	2c385553 	.word	0x2c385553
 8005554:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005558:	441e      	add	r6, r3
 800555a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800555e:	2b20      	cmp	r3, #32
 8005560:	bfc1      	itttt	gt
 8005562:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005566:	fa08 f803 	lslgt.w	r8, r8, r3
 800556a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800556e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005572:	bfd6      	itet	le
 8005574:	f1c3 0320 	rsble	r3, r3, #32
 8005578:	ea48 0003 	orrgt.w	r0, r8, r3
 800557c:	fa04 f003 	lslle.w	r0, r4, r3
 8005580:	f7fa ff30 	bl	80003e4 <__aeabi_ui2d>
 8005584:	2201      	movs	r2, #1
 8005586:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800558a:	3e01      	subs	r6, #1
 800558c:	9212      	str	r2, [sp, #72]	@ 0x48
 800558e:	e774      	b.n	800547a <_dtoa_r+0x102>
 8005590:	2301      	movs	r3, #1
 8005592:	e7b5      	b.n	8005500 <_dtoa_r+0x188>
 8005594:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005596:	e7b4      	b.n	8005502 <_dtoa_r+0x18a>
 8005598:	9b04      	ldr	r3, [sp, #16]
 800559a:	1bdb      	subs	r3, r3, r7
 800559c:	9304      	str	r3, [sp, #16]
 800559e:	427b      	negs	r3, r7
 80055a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80055a2:	2300      	movs	r3, #0
 80055a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80055a6:	e7c1      	b.n	800552c <_dtoa_r+0x1b4>
 80055a8:	2301      	movs	r3, #1
 80055aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055ae:	eb07 0b03 	add.w	fp, r7, r3
 80055b2:	f10b 0301 	add.w	r3, fp, #1
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	9308      	str	r3, [sp, #32]
 80055ba:	bfb8      	it	lt
 80055bc:	2301      	movlt	r3, #1
 80055be:	e006      	b.n	80055ce <_dtoa_r+0x256>
 80055c0:	2301      	movs	r3, #1
 80055c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055c4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	dd28      	ble.n	800561c <_dtoa_r+0x2a4>
 80055ca:	469b      	mov	fp, r3
 80055cc:	9308      	str	r3, [sp, #32]
 80055ce:	2100      	movs	r1, #0
 80055d0:	2204      	movs	r2, #4
 80055d2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80055d6:	f102 0514 	add.w	r5, r2, #20
 80055da:	429d      	cmp	r5, r3
 80055dc:	d926      	bls.n	800562c <_dtoa_r+0x2b4>
 80055de:	6041      	str	r1, [r0, #4]
 80055e0:	4648      	mov	r0, r9
 80055e2:	f000 fd9b 	bl	800611c <_Balloc>
 80055e6:	4682      	mov	sl, r0
 80055e8:	2800      	cmp	r0, #0
 80055ea:	d143      	bne.n	8005674 <_dtoa_r+0x2fc>
 80055ec:	4602      	mov	r2, r0
 80055ee:	f240 11af 	movw	r1, #431	@ 0x1af
 80055f2:	4b1f      	ldr	r3, [pc, #124]	@ (8005670 <_dtoa_r+0x2f8>)
 80055f4:	e6d4      	b.n	80053a0 <_dtoa_r+0x28>
 80055f6:	2300      	movs	r3, #0
 80055f8:	e7e3      	b.n	80055c2 <_dtoa_r+0x24a>
 80055fa:	2300      	movs	r3, #0
 80055fc:	e7d5      	b.n	80055aa <_dtoa_r+0x232>
 80055fe:	2401      	movs	r4, #1
 8005600:	2300      	movs	r3, #0
 8005602:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005604:	9320      	str	r3, [sp, #128]	@ 0x80
 8005606:	f04f 3bff 	mov.w	fp, #4294967295
 800560a:	2200      	movs	r2, #0
 800560c:	2312      	movs	r3, #18
 800560e:	f8cd b020 	str.w	fp, [sp, #32]
 8005612:	9221      	str	r2, [sp, #132]	@ 0x84
 8005614:	e7db      	b.n	80055ce <_dtoa_r+0x256>
 8005616:	2301      	movs	r3, #1
 8005618:	930b      	str	r3, [sp, #44]	@ 0x2c
 800561a:	e7f4      	b.n	8005606 <_dtoa_r+0x28e>
 800561c:	f04f 0b01 	mov.w	fp, #1
 8005620:	465b      	mov	r3, fp
 8005622:	f8cd b020 	str.w	fp, [sp, #32]
 8005626:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800562a:	e7d0      	b.n	80055ce <_dtoa_r+0x256>
 800562c:	3101      	adds	r1, #1
 800562e:	0052      	lsls	r2, r2, #1
 8005630:	e7d1      	b.n	80055d6 <_dtoa_r+0x25e>
 8005632:	bf00      	nop
 8005634:	f3af 8000 	nop.w
 8005638:	636f4361 	.word	0x636f4361
 800563c:	3fd287a7 	.word	0x3fd287a7
 8005640:	8b60c8b3 	.word	0x8b60c8b3
 8005644:	3fc68a28 	.word	0x3fc68a28
 8005648:	509f79fb 	.word	0x509f79fb
 800564c:	3fd34413 	.word	0x3fd34413
 8005650:	0800740f 	.word	0x0800740f
 8005654:	08007426 	.word	0x08007426
 8005658:	7ff00000 	.word	0x7ff00000
 800565c:	0800740b 	.word	0x0800740b
 8005660:	080073df 	.word	0x080073df
 8005664:	080073de 	.word	0x080073de
 8005668:	3ff80000 	.word	0x3ff80000
 800566c:	08007578 	.word	0x08007578
 8005670:	0800747e 	.word	0x0800747e
 8005674:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005678:	6018      	str	r0, [r3, #0]
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	2b0e      	cmp	r3, #14
 800567e:	f200 80a1 	bhi.w	80057c4 <_dtoa_r+0x44c>
 8005682:	2c00      	cmp	r4, #0
 8005684:	f000 809e 	beq.w	80057c4 <_dtoa_r+0x44c>
 8005688:	2f00      	cmp	r7, #0
 800568a:	dd33      	ble.n	80056f4 <_dtoa_r+0x37c>
 800568c:	4b9c      	ldr	r3, [pc, #624]	@ (8005900 <_dtoa_r+0x588>)
 800568e:	f007 020f 	and.w	r2, r7, #15
 8005692:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005696:	05f8      	lsls	r0, r7, #23
 8005698:	e9d3 3400 	ldrd	r3, r4, [r3]
 800569c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 80056a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80056a4:	d516      	bpl.n	80056d4 <_dtoa_r+0x35c>
 80056a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056aa:	4b96      	ldr	r3, [pc, #600]	@ (8005904 <_dtoa_r+0x58c>)
 80056ac:	2603      	movs	r6, #3
 80056ae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80056b2:	f7fb f83b 	bl	800072c <__aeabi_ddiv>
 80056b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056ba:	f004 040f 	and.w	r4, r4, #15
 80056be:	4d91      	ldr	r5, [pc, #580]	@ (8005904 <_dtoa_r+0x58c>)
 80056c0:	b954      	cbnz	r4, 80056d8 <_dtoa_r+0x360>
 80056c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80056c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056ca:	f7fb f82f 	bl	800072c <__aeabi_ddiv>
 80056ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80056d2:	e028      	b.n	8005726 <_dtoa_r+0x3ae>
 80056d4:	2602      	movs	r6, #2
 80056d6:	e7f2      	b.n	80056be <_dtoa_r+0x346>
 80056d8:	07e1      	lsls	r1, r4, #31
 80056da:	d508      	bpl.n	80056ee <_dtoa_r+0x376>
 80056dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80056e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80056e4:	f7fa fef8 	bl	80004d8 <__aeabi_dmul>
 80056e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80056ec:	3601      	adds	r6, #1
 80056ee:	1064      	asrs	r4, r4, #1
 80056f0:	3508      	adds	r5, #8
 80056f2:	e7e5      	b.n	80056c0 <_dtoa_r+0x348>
 80056f4:	f000 80af 	beq.w	8005856 <_dtoa_r+0x4de>
 80056f8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80056fc:	427c      	negs	r4, r7
 80056fe:	4b80      	ldr	r3, [pc, #512]	@ (8005900 <_dtoa_r+0x588>)
 8005700:	f004 020f 	and.w	r2, r4, #15
 8005704:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570c:	f7fa fee4 	bl	80004d8 <__aeabi_dmul>
 8005710:	2602      	movs	r6, #2
 8005712:	2300      	movs	r3, #0
 8005714:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005718:	4d7a      	ldr	r5, [pc, #488]	@ (8005904 <_dtoa_r+0x58c>)
 800571a:	1124      	asrs	r4, r4, #4
 800571c:	2c00      	cmp	r4, #0
 800571e:	f040 808f 	bne.w	8005840 <_dtoa_r+0x4c8>
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1d3      	bne.n	80056ce <_dtoa_r+0x356>
 8005726:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800572a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8094 	beq.w	800585a <_dtoa_r+0x4e2>
 8005732:	2200      	movs	r2, #0
 8005734:	4620      	mov	r0, r4
 8005736:	4629      	mov	r1, r5
 8005738:	4b73      	ldr	r3, [pc, #460]	@ (8005908 <_dtoa_r+0x590>)
 800573a:	f7fb f93f 	bl	80009bc <__aeabi_dcmplt>
 800573e:	2800      	cmp	r0, #0
 8005740:	f000 808b 	beq.w	800585a <_dtoa_r+0x4e2>
 8005744:	9b08      	ldr	r3, [sp, #32]
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 8087 	beq.w	800585a <_dtoa_r+0x4e2>
 800574c:	f1bb 0f00 	cmp.w	fp, #0
 8005750:	dd34      	ble.n	80057bc <_dtoa_r+0x444>
 8005752:	4620      	mov	r0, r4
 8005754:	2200      	movs	r2, #0
 8005756:	4629      	mov	r1, r5
 8005758:	4b6c      	ldr	r3, [pc, #432]	@ (800590c <_dtoa_r+0x594>)
 800575a:	f7fa febd 	bl	80004d8 <__aeabi_dmul>
 800575e:	465c      	mov	r4, fp
 8005760:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005764:	f107 38ff 	add.w	r8, r7, #4294967295
 8005768:	3601      	adds	r6, #1
 800576a:	4630      	mov	r0, r6
 800576c:	f7fa fe4a 	bl	8000404 <__aeabi_i2d>
 8005770:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005774:	f7fa feb0 	bl	80004d8 <__aeabi_dmul>
 8005778:	2200      	movs	r2, #0
 800577a:	4b65      	ldr	r3, [pc, #404]	@ (8005910 <_dtoa_r+0x598>)
 800577c:	f7fa fcf6 	bl	800016c <__adddf3>
 8005780:	4605      	mov	r5, r0
 8005782:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005786:	2c00      	cmp	r4, #0
 8005788:	d16a      	bne.n	8005860 <_dtoa_r+0x4e8>
 800578a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800578e:	2200      	movs	r2, #0
 8005790:	4b60      	ldr	r3, [pc, #384]	@ (8005914 <_dtoa_r+0x59c>)
 8005792:	f7fa fce9 	bl	8000168 <__aeabi_dsub>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800579e:	462a      	mov	r2, r5
 80057a0:	4633      	mov	r3, r6
 80057a2:	f7fb f929 	bl	80009f8 <__aeabi_dcmpgt>
 80057a6:	2800      	cmp	r0, #0
 80057a8:	f040 8298 	bne.w	8005cdc <_dtoa_r+0x964>
 80057ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057b0:	462a      	mov	r2, r5
 80057b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80057b6:	f7fb f901 	bl	80009bc <__aeabi_dcmplt>
 80057ba:	bb38      	cbnz	r0, 800580c <_dtoa_r+0x494>
 80057bc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80057c0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80057c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f2c0 8157 	blt.w	8005a7a <_dtoa_r+0x702>
 80057cc:	2f0e      	cmp	r7, #14
 80057ce:	f300 8154 	bgt.w	8005a7a <_dtoa_r+0x702>
 80057d2:	4b4b      	ldr	r3, [pc, #300]	@ (8005900 <_dtoa_r+0x588>)
 80057d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80057e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f280 80e5 	bge.w	80059b2 <_dtoa_r+0x63a>
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f300 80e1 	bgt.w	80059b2 <_dtoa_r+0x63a>
 80057f0:	d10c      	bne.n	800580c <_dtoa_r+0x494>
 80057f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057f6:	2200      	movs	r2, #0
 80057f8:	4b46      	ldr	r3, [pc, #280]	@ (8005914 <_dtoa_r+0x59c>)
 80057fa:	f7fa fe6d 	bl	80004d8 <__aeabi_dmul>
 80057fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005802:	f7fb f8ef 	bl	80009e4 <__aeabi_dcmpge>
 8005806:	2800      	cmp	r0, #0
 8005808:	f000 8266 	beq.w	8005cd8 <_dtoa_r+0x960>
 800580c:	2400      	movs	r4, #0
 800580e:	4625      	mov	r5, r4
 8005810:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005812:	4656      	mov	r6, sl
 8005814:	ea6f 0803 	mvn.w	r8, r3
 8005818:	2700      	movs	r7, #0
 800581a:	4621      	mov	r1, r4
 800581c:	4648      	mov	r0, r9
 800581e:	f000 fcbd 	bl	800619c <_Bfree>
 8005822:	2d00      	cmp	r5, #0
 8005824:	f000 80bd 	beq.w	80059a2 <_dtoa_r+0x62a>
 8005828:	b12f      	cbz	r7, 8005836 <_dtoa_r+0x4be>
 800582a:	42af      	cmp	r7, r5
 800582c:	d003      	beq.n	8005836 <_dtoa_r+0x4be>
 800582e:	4639      	mov	r1, r7
 8005830:	4648      	mov	r0, r9
 8005832:	f000 fcb3 	bl	800619c <_Bfree>
 8005836:	4629      	mov	r1, r5
 8005838:	4648      	mov	r0, r9
 800583a:	f000 fcaf 	bl	800619c <_Bfree>
 800583e:	e0b0      	b.n	80059a2 <_dtoa_r+0x62a>
 8005840:	07e2      	lsls	r2, r4, #31
 8005842:	d505      	bpl.n	8005850 <_dtoa_r+0x4d8>
 8005844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005848:	f7fa fe46 	bl	80004d8 <__aeabi_dmul>
 800584c:	2301      	movs	r3, #1
 800584e:	3601      	adds	r6, #1
 8005850:	1064      	asrs	r4, r4, #1
 8005852:	3508      	adds	r5, #8
 8005854:	e762      	b.n	800571c <_dtoa_r+0x3a4>
 8005856:	2602      	movs	r6, #2
 8005858:	e765      	b.n	8005726 <_dtoa_r+0x3ae>
 800585a:	46b8      	mov	r8, r7
 800585c:	9c08      	ldr	r4, [sp, #32]
 800585e:	e784      	b.n	800576a <_dtoa_r+0x3f2>
 8005860:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <_dtoa_r+0x588>)
 8005862:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005864:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005868:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800586c:	4454      	add	r4, sl
 800586e:	2900      	cmp	r1, #0
 8005870:	d054      	beq.n	800591c <_dtoa_r+0x5a4>
 8005872:	2000      	movs	r0, #0
 8005874:	4928      	ldr	r1, [pc, #160]	@ (8005918 <_dtoa_r+0x5a0>)
 8005876:	f7fa ff59 	bl	800072c <__aeabi_ddiv>
 800587a:	4633      	mov	r3, r6
 800587c:	462a      	mov	r2, r5
 800587e:	f7fa fc73 	bl	8000168 <__aeabi_dsub>
 8005882:	4656      	mov	r6, sl
 8005884:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005888:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800588c:	f7fb f8d4 	bl	8000a38 <__aeabi_d2iz>
 8005890:	4605      	mov	r5, r0
 8005892:	f7fa fdb7 	bl	8000404 <__aeabi_i2d>
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800589e:	f7fa fc63 	bl	8000168 <__aeabi_dsub>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	3530      	adds	r5, #48	@ 0x30
 80058a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80058ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058b0:	f806 5b01 	strb.w	r5, [r6], #1
 80058b4:	f7fb f882 	bl	80009bc <__aeabi_dcmplt>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d172      	bne.n	80059a2 <_dtoa_r+0x62a>
 80058bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058c0:	2000      	movs	r0, #0
 80058c2:	4911      	ldr	r1, [pc, #68]	@ (8005908 <_dtoa_r+0x590>)
 80058c4:	f7fa fc50 	bl	8000168 <__aeabi_dsub>
 80058c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80058cc:	f7fb f876 	bl	80009bc <__aeabi_dcmplt>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	f040 80b4 	bne.w	8005a3e <_dtoa_r+0x6c6>
 80058d6:	42a6      	cmp	r6, r4
 80058d8:	f43f af70 	beq.w	80057bc <_dtoa_r+0x444>
 80058dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80058e0:	2200      	movs	r2, #0
 80058e2:	4b0a      	ldr	r3, [pc, #40]	@ (800590c <_dtoa_r+0x594>)
 80058e4:	f7fa fdf8 	bl	80004d8 <__aeabi_dmul>
 80058e8:	2200      	movs	r2, #0
 80058ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80058ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80058f2:	4b06      	ldr	r3, [pc, #24]	@ (800590c <_dtoa_r+0x594>)
 80058f4:	f7fa fdf0 	bl	80004d8 <__aeabi_dmul>
 80058f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80058fc:	e7c4      	b.n	8005888 <_dtoa_r+0x510>
 80058fe:	bf00      	nop
 8005900:	08007578 	.word	0x08007578
 8005904:	08007550 	.word	0x08007550
 8005908:	3ff00000 	.word	0x3ff00000
 800590c:	40240000 	.word	0x40240000
 8005910:	401c0000 	.word	0x401c0000
 8005914:	40140000 	.word	0x40140000
 8005918:	3fe00000 	.word	0x3fe00000
 800591c:	4631      	mov	r1, r6
 800591e:	4628      	mov	r0, r5
 8005920:	f7fa fdda 	bl	80004d8 <__aeabi_dmul>
 8005924:	4656      	mov	r6, sl
 8005926:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800592a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800592c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005930:	f7fb f882 	bl	8000a38 <__aeabi_d2iz>
 8005934:	4605      	mov	r5, r0
 8005936:	f7fa fd65 	bl	8000404 <__aeabi_i2d>
 800593a:	4602      	mov	r2, r0
 800593c:	460b      	mov	r3, r1
 800593e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005942:	f7fa fc11 	bl	8000168 <__aeabi_dsub>
 8005946:	4602      	mov	r2, r0
 8005948:	460b      	mov	r3, r1
 800594a:	3530      	adds	r5, #48	@ 0x30
 800594c:	f806 5b01 	strb.w	r5, [r6], #1
 8005950:	42a6      	cmp	r6, r4
 8005952:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005956:	f04f 0200 	mov.w	r2, #0
 800595a:	d124      	bne.n	80059a6 <_dtoa_r+0x62e>
 800595c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005960:	4bae      	ldr	r3, [pc, #696]	@ (8005c1c <_dtoa_r+0x8a4>)
 8005962:	f7fa fc03 	bl	800016c <__adddf3>
 8005966:	4602      	mov	r2, r0
 8005968:	460b      	mov	r3, r1
 800596a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800596e:	f7fb f843 	bl	80009f8 <__aeabi_dcmpgt>
 8005972:	2800      	cmp	r0, #0
 8005974:	d163      	bne.n	8005a3e <_dtoa_r+0x6c6>
 8005976:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800597a:	2000      	movs	r0, #0
 800597c:	49a7      	ldr	r1, [pc, #668]	@ (8005c1c <_dtoa_r+0x8a4>)
 800597e:	f7fa fbf3 	bl	8000168 <__aeabi_dsub>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800598a:	f7fb f817 	bl	80009bc <__aeabi_dcmplt>
 800598e:	2800      	cmp	r0, #0
 8005990:	f43f af14 	beq.w	80057bc <_dtoa_r+0x444>
 8005994:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005996:	1e73      	subs	r3, r6, #1
 8005998:	9313      	str	r3, [sp, #76]	@ 0x4c
 800599a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800599e:	2b30      	cmp	r3, #48	@ 0x30
 80059a0:	d0f8      	beq.n	8005994 <_dtoa_r+0x61c>
 80059a2:	4647      	mov	r7, r8
 80059a4:	e03b      	b.n	8005a1e <_dtoa_r+0x6a6>
 80059a6:	4b9e      	ldr	r3, [pc, #632]	@ (8005c20 <_dtoa_r+0x8a8>)
 80059a8:	f7fa fd96 	bl	80004d8 <__aeabi_dmul>
 80059ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80059b0:	e7bc      	b.n	800592c <_dtoa_r+0x5b4>
 80059b2:	4656      	mov	r6, sl
 80059b4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80059b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059bc:	4620      	mov	r0, r4
 80059be:	4629      	mov	r1, r5
 80059c0:	f7fa feb4 	bl	800072c <__aeabi_ddiv>
 80059c4:	f7fb f838 	bl	8000a38 <__aeabi_d2iz>
 80059c8:	4680      	mov	r8, r0
 80059ca:	f7fa fd1b 	bl	8000404 <__aeabi_i2d>
 80059ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059d2:	f7fa fd81 	bl	80004d8 <__aeabi_dmul>
 80059d6:	4602      	mov	r2, r0
 80059d8:	460b      	mov	r3, r1
 80059da:	4620      	mov	r0, r4
 80059dc:	4629      	mov	r1, r5
 80059de:	f7fa fbc3 	bl	8000168 <__aeabi_dsub>
 80059e2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80059e6:	9d08      	ldr	r5, [sp, #32]
 80059e8:	f806 4b01 	strb.w	r4, [r6], #1
 80059ec:	eba6 040a 	sub.w	r4, r6, sl
 80059f0:	42a5      	cmp	r5, r4
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	d133      	bne.n	8005a60 <_dtoa_r+0x6e8>
 80059f8:	f7fa fbb8 	bl	800016c <__adddf3>
 80059fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a00:	4604      	mov	r4, r0
 8005a02:	460d      	mov	r5, r1
 8005a04:	f7fa fff8 	bl	80009f8 <__aeabi_dcmpgt>
 8005a08:	b9c0      	cbnz	r0, 8005a3c <_dtoa_r+0x6c4>
 8005a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a0e:	4620      	mov	r0, r4
 8005a10:	4629      	mov	r1, r5
 8005a12:	f7fa ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8005a16:	b110      	cbz	r0, 8005a1e <_dtoa_r+0x6a6>
 8005a18:	f018 0f01 	tst.w	r8, #1
 8005a1c:	d10e      	bne.n	8005a3c <_dtoa_r+0x6c4>
 8005a1e:	4648      	mov	r0, r9
 8005a20:	9903      	ldr	r1, [sp, #12]
 8005a22:	f000 fbbb 	bl	800619c <_Bfree>
 8005a26:	2300      	movs	r3, #0
 8005a28:	7033      	strb	r3, [r6, #0]
 8005a2a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005a2c:	3701      	adds	r7, #1
 8005a2e:	601f      	str	r7, [r3, #0]
 8005a30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f000 824b 	beq.w	8005ece <_dtoa_r+0xb56>
 8005a38:	601e      	str	r6, [r3, #0]
 8005a3a:	e248      	b.n	8005ece <_dtoa_r+0xb56>
 8005a3c:	46b8      	mov	r8, r7
 8005a3e:	4633      	mov	r3, r6
 8005a40:	461e      	mov	r6, r3
 8005a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a46:	2a39      	cmp	r2, #57	@ 0x39
 8005a48:	d106      	bne.n	8005a58 <_dtoa_r+0x6e0>
 8005a4a:	459a      	cmp	sl, r3
 8005a4c:	d1f8      	bne.n	8005a40 <_dtoa_r+0x6c8>
 8005a4e:	2230      	movs	r2, #48	@ 0x30
 8005a50:	f108 0801 	add.w	r8, r8, #1
 8005a54:	f88a 2000 	strb.w	r2, [sl]
 8005a58:	781a      	ldrb	r2, [r3, #0]
 8005a5a:	3201      	adds	r2, #1
 8005a5c:	701a      	strb	r2, [r3, #0]
 8005a5e:	e7a0      	b.n	80059a2 <_dtoa_r+0x62a>
 8005a60:	2200      	movs	r2, #0
 8005a62:	4b6f      	ldr	r3, [pc, #444]	@ (8005c20 <_dtoa_r+0x8a8>)
 8005a64:	f7fa fd38 	bl	80004d8 <__aeabi_dmul>
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	460d      	mov	r5, r1
 8005a70:	f7fa ff9a 	bl	80009a8 <__aeabi_dcmpeq>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d09f      	beq.n	80059b8 <_dtoa_r+0x640>
 8005a78:	e7d1      	b.n	8005a1e <_dtoa_r+0x6a6>
 8005a7a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005a7c:	2a00      	cmp	r2, #0
 8005a7e:	f000 80ea 	beq.w	8005c56 <_dtoa_r+0x8de>
 8005a82:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005a84:	2a01      	cmp	r2, #1
 8005a86:	f300 80cd 	bgt.w	8005c24 <_dtoa_r+0x8ac>
 8005a8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005a8c:	2a00      	cmp	r2, #0
 8005a8e:	f000 80c1 	beq.w	8005c14 <_dtoa_r+0x89c>
 8005a92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005a96:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005a98:	9e04      	ldr	r6, [sp, #16]
 8005a9a:	9a04      	ldr	r2, [sp, #16]
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	441a      	add	r2, r3
 8005aa0:	9204      	str	r2, [sp, #16]
 8005aa2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005aa4:	4648      	mov	r0, r9
 8005aa6:	441a      	add	r2, r3
 8005aa8:	9209      	str	r2, [sp, #36]	@ 0x24
 8005aaa:	f000 fc2b 	bl	8006304 <__i2b>
 8005aae:	4605      	mov	r5, r0
 8005ab0:	b166      	cbz	r6, 8005acc <_dtoa_r+0x754>
 8005ab2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dd09      	ble.n	8005acc <_dtoa_r+0x754>
 8005ab8:	42b3      	cmp	r3, r6
 8005aba:	bfa8      	it	ge
 8005abc:	4633      	movge	r3, r6
 8005abe:	9a04      	ldr	r2, [sp, #16]
 8005ac0:	1af6      	subs	r6, r6, r3
 8005ac2:	1ad2      	subs	r2, r2, r3
 8005ac4:	9204      	str	r2, [sp, #16]
 8005ac6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8005acc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ace:	b30b      	cbz	r3, 8005b14 <_dtoa_r+0x79c>
 8005ad0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80c6 	beq.w	8005c64 <_dtoa_r+0x8ec>
 8005ad8:	2c00      	cmp	r4, #0
 8005ada:	f000 80c0 	beq.w	8005c5e <_dtoa_r+0x8e6>
 8005ade:	4629      	mov	r1, r5
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	4648      	mov	r0, r9
 8005ae4:	f000 fcc6 	bl	8006474 <__pow5mult>
 8005ae8:	9a03      	ldr	r2, [sp, #12]
 8005aea:	4601      	mov	r1, r0
 8005aec:	4605      	mov	r5, r0
 8005aee:	4648      	mov	r0, r9
 8005af0:	f000 fc1e 	bl	8006330 <__multiply>
 8005af4:	9903      	ldr	r1, [sp, #12]
 8005af6:	4680      	mov	r8, r0
 8005af8:	4648      	mov	r0, r9
 8005afa:	f000 fb4f 	bl	800619c <_Bfree>
 8005afe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b00:	1b1b      	subs	r3, r3, r4
 8005b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b04:	f000 80b1 	beq.w	8005c6a <_dtoa_r+0x8f2>
 8005b08:	4641      	mov	r1, r8
 8005b0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b0c:	4648      	mov	r0, r9
 8005b0e:	f000 fcb1 	bl	8006474 <__pow5mult>
 8005b12:	9003      	str	r0, [sp, #12]
 8005b14:	2101      	movs	r1, #1
 8005b16:	4648      	mov	r0, r9
 8005b18:	f000 fbf4 	bl	8006304 <__i2b>
 8005b1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b1e:	4604      	mov	r4, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 81d8 	beq.w	8005ed6 <_dtoa_r+0xb5e>
 8005b26:	461a      	mov	r2, r3
 8005b28:	4601      	mov	r1, r0
 8005b2a:	4648      	mov	r0, r9
 8005b2c:	f000 fca2 	bl	8006474 <__pow5mult>
 8005b30:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005b32:	4604      	mov	r4, r0
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	f300 809f 	bgt.w	8005c78 <_dtoa_r+0x900>
 8005b3a:	9b06      	ldr	r3, [sp, #24]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f040 8097 	bne.w	8005c70 <_dtoa_r+0x8f8>
 8005b42:	9b07      	ldr	r3, [sp, #28]
 8005b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f040 8093 	bne.w	8005c74 <_dtoa_r+0x8fc>
 8005b4e:	9b07      	ldr	r3, [sp, #28]
 8005b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005b54:	0d1b      	lsrs	r3, r3, #20
 8005b56:	051b      	lsls	r3, r3, #20
 8005b58:	b133      	cbz	r3, 8005b68 <_dtoa_r+0x7f0>
 8005b5a:	9b04      	ldr	r3, [sp, #16]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	9304      	str	r3, [sp, #16]
 8005b60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b62:	3301      	adds	r3, #1
 8005b64:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b66:	2301      	movs	r3, #1
 8005b68:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 81b8 	beq.w	8005ee2 <_dtoa_r+0xb6a>
 8005b72:	6923      	ldr	r3, [r4, #16]
 8005b74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005b78:	6918      	ldr	r0, [r3, #16]
 8005b7a:	f000 fb77 	bl	800626c <__hi0bits>
 8005b7e:	f1c0 0020 	rsb	r0, r0, #32
 8005b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b84:	4418      	add	r0, r3
 8005b86:	f010 001f 	ands.w	r0, r0, #31
 8005b8a:	f000 8082 	beq.w	8005c92 <_dtoa_r+0x91a>
 8005b8e:	f1c0 0320 	rsb	r3, r0, #32
 8005b92:	2b04      	cmp	r3, #4
 8005b94:	dd73      	ble.n	8005c7e <_dtoa_r+0x906>
 8005b96:	9b04      	ldr	r3, [sp, #16]
 8005b98:	f1c0 001c 	rsb	r0, r0, #28
 8005b9c:	4403      	add	r3, r0
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba2:	4406      	add	r6, r0
 8005ba4:	4403      	add	r3, r0
 8005ba6:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ba8:	9b04      	ldr	r3, [sp, #16]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	dd05      	ble.n	8005bba <_dtoa_r+0x842>
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4648      	mov	r0, r9
 8005bb2:	9903      	ldr	r1, [sp, #12]
 8005bb4:	f000 fcb8 	bl	8006528 <__lshift>
 8005bb8:	9003      	str	r0, [sp, #12]
 8005bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dd05      	ble.n	8005bcc <_dtoa_r+0x854>
 8005bc0:	4621      	mov	r1, r4
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	4648      	mov	r0, r9
 8005bc6:	f000 fcaf 	bl	8006528 <__lshift>
 8005bca:	4604      	mov	r4, r0
 8005bcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d061      	beq.n	8005c96 <_dtoa_r+0x91e>
 8005bd2:	4621      	mov	r1, r4
 8005bd4:	9803      	ldr	r0, [sp, #12]
 8005bd6:	f000 fd13 	bl	8006600 <__mcmp>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	da5b      	bge.n	8005c96 <_dtoa_r+0x91e>
 8005bde:	2300      	movs	r3, #0
 8005be0:	220a      	movs	r2, #10
 8005be2:	4648      	mov	r0, r9
 8005be4:	9903      	ldr	r1, [sp, #12]
 8005be6:	f000 fafb 	bl	80061e0 <__multadd>
 8005bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005bec:	f107 38ff 	add.w	r8, r7, #4294967295
 8005bf0:	9003      	str	r0, [sp, #12]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f000 8177 	beq.w	8005ee6 <_dtoa_r+0xb6e>
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	220a      	movs	r2, #10
 8005bfe:	4648      	mov	r0, r9
 8005c00:	f000 faee 	bl	80061e0 <__multadd>
 8005c04:	f1bb 0f00 	cmp.w	fp, #0
 8005c08:	4605      	mov	r5, r0
 8005c0a:	dc6f      	bgt.n	8005cec <_dtoa_r+0x974>
 8005c0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	dc49      	bgt.n	8005ca6 <_dtoa_r+0x92e>
 8005c12:	e06b      	b.n	8005cec <_dtoa_r+0x974>
 8005c14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005c16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005c1a:	e73c      	b.n	8005a96 <_dtoa_r+0x71e>
 8005c1c:	3fe00000 	.word	0x3fe00000
 8005c20:	40240000 	.word	0x40240000
 8005c24:	9b08      	ldr	r3, [sp, #32]
 8005c26:	1e5c      	subs	r4, r3, #1
 8005c28:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c2a:	42a3      	cmp	r3, r4
 8005c2c:	db09      	blt.n	8005c42 <_dtoa_r+0x8ca>
 8005c2e:	1b1c      	subs	r4, r3, r4
 8005c30:	9b08      	ldr	r3, [sp, #32]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f6bf af30 	bge.w	8005a98 <_dtoa_r+0x720>
 8005c38:	9b04      	ldr	r3, [sp, #16]
 8005c3a:	9a08      	ldr	r2, [sp, #32]
 8005c3c:	1a9e      	subs	r6, r3, r2
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e72b      	b.n	8005a9a <_dtoa_r+0x722>
 8005c42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005c46:	1ae3      	subs	r3, r4, r3
 8005c48:	441a      	add	r2, r3
 8005c4a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005c4c:	9e04      	ldr	r6, [sp, #16]
 8005c4e:	2400      	movs	r4, #0
 8005c50:	9b08      	ldr	r3, [sp, #32]
 8005c52:	920e      	str	r2, [sp, #56]	@ 0x38
 8005c54:	e721      	b.n	8005a9a <_dtoa_r+0x722>
 8005c56:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005c58:	9e04      	ldr	r6, [sp, #16]
 8005c5a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005c5c:	e728      	b.n	8005ab0 <_dtoa_r+0x738>
 8005c5e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c62:	e751      	b.n	8005b08 <_dtoa_r+0x790>
 8005c64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c66:	9903      	ldr	r1, [sp, #12]
 8005c68:	e750      	b.n	8005b0c <_dtoa_r+0x794>
 8005c6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c6e:	e751      	b.n	8005b14 <_dtoa_r+0x79c>
 8005c70:	2300      	movs	r3, #0
 8005c72:	e779      	b.n	8005b68 <_dtoa_r+0x7f0>
 8005c74:	9b06      	ldr	r3, [sp, #24]
 8005c76:	e777      	b.n	8005b68 <_dtoa_r+0x7f0>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c7c:	e779      	b.n	8005b72 <_dtoa_r+0x7fa>
 8005c7e:	d093      	beq.n	8005ba8 <_dtoa_r+0x830>
 8005c80:	9a04      	ldr	r2, [sp, #16]
 8005c82:	331c      	adds	r3, #28
 8005c84:	441a      	add	r2, r3
 8005c86:	9204      	str	r2, [sp, #16]
 8005c88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c8a:	441e      	add	r6, r3
 8005c8c:	441a      	add	r2, r3
 8005c8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c90:	e78a      	b.n	8005ba8 <_dtoa_r+0x830>
 8005c92:	4603      	mov	r3, r0
 8005c94:	e7f4      	b.n	8005c80 <_dtoa_r+0x908>
 8005c96:	9b08      	ldr	r3, [sp, #32]
 8005c98:	46b8      	mov	r8, r7
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dc20      	bgt.n	8005ce0 <_dtoa_r+0x968>
 8005c9e:	469b      	mov	fp, r3
 8005ca0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ca2:	2b02      	cmp	r3, #2
 8005ca4:	dd1e      	ble.n	8005ce4 <_dtoa_r+0x96c>
 8005ca6:	f1bb 0f00 	cmp.w	fp, #0
 8005caa:	f47f adb1 	bne.w	8005810 <_dtoa_r+0x498>
 8005cae:	4621      	mov	r1, r4
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	2205      	movs	r2, #5
 8005cb4:	4648      	mov	r0, r9
 8005cb6:	f000 fa93 	bl	80061e0 <__multadd>
 8005cba:	4601      	mov	r1, r0
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	9803      	ldr	r0, [sp, #12]
 8005cc0:	f000 fc9e 	bl	8006600 <__mcmp>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	f77f ada3 	ble.w	8005810 <_dtoa_r+0x498>
 8005cca:	4656      	mov	r6, sl
 8005ccc:	2331      	movs	r3, #49	@ 0x31
 8005cce:	f108 0801 	add.w	r8, r8, #1
 8005cd2:	f806 3b01 	strb.w	r3, [r6], #1
 8005cd6:	e59f      	b.n	8005818 <_dtoa_r+0x4a0>
 8005cd8:	46b8      	mov	r8, r7
 8005cda:	9c08      	ldr	r4, [sp, #32]
 8005cdc:	4625      	mov	r5, r4
 8005cde:	e7f4      	b.n	8005cca <_dtoa_r+0x952>
 8005ce0:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005ce4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8101 	beq.w	8005eee <_dtoa_r+0xb76>
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	dd05      	ble.n	8005cfc <_dtoa_r+0x984>
 8005cf0:	4629      	mov	r1, r5
 8005cf2:	4632      	mov	r2, r6
 8005cf4:	4648      	mov	r0, r9
 8005cf6:	f000 fc17 	bl	8006528 <__lshift>
 8005cfa:	4605      	mov	r5, r0
 8005cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05c      	beq.n	8005dbc <_dtoa_r+0xa44>
 8005d02:	4648      	mov	r0, r9
 8005d04:	6869      	ldr	r1, [r5, #4]
 8005d06:	f000 fa09 	bl	800611c <_Balloc>
 8005d0a:	4606      	mov	r6, r0
 8005d0c:	b928      	cbnz	r0, 8005d1a <_dtoa_r+0x9a2>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005d14:	4b80      	ldr	r3, [pc, #512]	@ (8005f18 <_dtoa_r+0xba0>)
 8005d16:	f7ff bb43 	b.w	80053a0 <_dtoa_r+0x28>
 8005d1a:	692a      	ldr	r2, [r5, #16]
 8005d1c:	f105 010c 	add.w	r1, r5, #12
 8005d20:	3202      	adds	r2, #2
 8005d22:	0092      	lsls	r2, r2, #2
 8005d24:	300c      	adds	r0, #12
 8005d26:	f000 ff9d 	bl	8006c64 <memcpy>
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	4631      	mov	r1, r6
 8005d2e:	4648      	mov	r0, r9
 8005d30:	f000 fbfa 	bl	8006528 <__lshift>
 8005d34:	462f      	mov	r7, r5
 8005d36:	4605      	mov	r5, r0
 8005d38:	f10a 0301 	add.w	r3, sl, #1
 8005d3c:	9304      	str	r3, [sp, #16]
 8005d3e:	eb0a 030b 	add.w	r3, sl, fp
 8005d42:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d44:	9b06      	ldr	r3, [sp, #24]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d4c:	9b04      	ldr	r3, [sp, #16]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	9803      	ldr	r0, [sp, #12]
 8005d52:	f103 3bff 	add.w	fp, r3, #4294967295
 8005d56:	f7ff fa86 	bl	8005266 <quorem>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	4639      	mov	r1, r7
 8005d5e:	3330      	adds	r3, #48	@ 0x30
 8005d60:	9006      	str	r0, [sp, #24]
 8005d62:	9803      	ldr	r0, [sp, #12]
 8005d64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005d66:	f000 fc4b 	bl	8006600 <__mcmp>
 8005d6a:	462a      	mov	r2, r5
 8005d6c:	9008      	str	r0, [sp, #32]
 8005d6e:	4621      	mov	r1, r4
 8005d70:	4648      	mov	r0, r9
 8005d72:	f000 fc61 	bl	8006638 <__mdiff>
 8005d76:	68c2      	ldr	r2, [r0, #12]
 8005d78:	4606      	mov	r6, r0
 8005d7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d7c:	bb02      	cbnz	r2, 8005dc0 <_dtoa_r+0xa48>
 8005d7e:	4601      	mov	r1, r0
 8005d80:	9803      	ldr	r0, [sp, #12]
 8005d82:	f000 fc3d 	bl	8006600 <__mcmp>
 8005d86:	4602      	mov	r2, r0
 8005d88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4648      	mov	r0, r9
 8005d8e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8005d92:	f000 fa03 	bl	800619c <_Bfree>
 8005d96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005d98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005d9a:	9e04      	ldr	r6, [sp, #16]
 8005d9c:	ea42 0103 	orr.w	r1, r2, r3
 8005da0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005da2:	4319      	orrs	r1, r3
 8005da4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005da6:	d10d      	bne.n	8005dc4 <_dtoa_r+0xa4c>
 8005da8:	2b39      	cmp	r3, #57	@ 0x39
 8005daa:	d027      	beq.n	8005dfc <_dtoa_r+0xa84>
 8005dac:	9a08      	ldr	r2, [sp, #32]
 8005dae:	2a00      	cmp	r2, #0
 8005db0:	dd01      	ble.n	8005db6 <_dtoa_r+0xa3e>
 8005db2:	9b06      	ldr	r3, [sp, #24]
 8005db4:	3331      	adds	r3, #49	@ 0x31
 8005db6:	f88b 3000 	strb.w	r3, [fp]
 8005dba:	e52e      	b.n	800581a <_dtoa_r+0x4a2>
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	e7b9      	b.n	8005d34 <_dtoa_r+0x9bc>
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	e7e2      	b.n	8005d8a <_dtoa_r+0xa12>
 8005dc4:	9908      	ldr	r1, [sp, #32]
 8005dc6:	2900      	cmp	r1, #0
 8005dc8:	db04      	blt.n	8005dd4 <_dtoa_r+0xa5c>
 8005dca:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8005dcc:	4301      	orrs	r1, r0
 8005dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005dd0:	4301      	orrs	r1, r0
 8005dd2:	d120      	bne.n	8005e16 <_dtoa_r+0xa9e>
 8005dd4:	2a00      	cmp	r2, #0
 8005dd6:	ddee      	ble.n	8005db6 <_dtoa_r+0xa3e>
 8005dd8:	2201      	movs	r2, #1
 8005dda:	9903      	ldr	r1, [sp, #12]
 8005ddc:	4648      	mov	r0, r9
 8005dde:	9304      	str	r3, [sp, #16]
 8005de0:	f000 fba2 	bl	8006528 <__lshift>
 8005de4:	4621      	mov	r1, r4
 8005de6:	9003      	str	r0, [sp, #12]
 8005de8:	f000 fc0a 	bl	8006600 <__mcmp>
 8005dec:	2800      	cmp	r0, #0
 8005dee:	9b04      	ldr	r3, [sp, #16]
 8005df0:	dc02      	bgt.n	8005df8 <_dtoa_r+0xa80>
 8005df2:	d1e0      	bne.n	8005db6 <_dtoa_r+0xa3e>
 8005df4:	07da      	lsls	r2, r3, #31
 8005df6:	d5de      	bpl.n	8005db6 <_dtoa_r+0xa3e>
 8005df8:	2b39      	cmp	r3, #57	@ 0x39
 8005dfa:	d1da      	bne.n	8005db2 <_dtoa_r+0xa3a>
 8005dfc:	2339      	movs	r3, #57	@ 0x39
 8005dfe:	f88b 3000 	strb.w	r3, [fp]
 8005e02:	4633      	mov	r3, r6
 8005e04:	461e      	mov	r6, r3
 8005e06:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	2a39      	cmp	r2, #57	@ 0x39
 8005e0e:	d04e      	beq.n	8005eae <_dtoa_r+0xb36>
 8005e10:	3201      	adds	r2, #1
 8005e12:	701a      	strb	r2, [r3, #0]
 8005e14:	e501      	b.n	800581a <_dtoa_r+0x4a2>
 8005e16:	2a00      	cmp	r2, #0
 8005e18:	dd03      	ble.n	8005e22 <_dtoa_r+0xaaa>
 8005e1a:	2b39      	cmp	r3, #57	@ 0x39
 8005e1c:	d0ee      	beq.n	8005dfc <_dtoa_r+0xa84>
 8005e1e:	3301      	adds	r3, #1
 8005e20:	e7c9      	b.n	8005db6 <_dtoa_r+0xa3e>
 8005e22:	9a04      	ldr	r2, [sp, #16]
 8005e24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005e2a:	428a      	cmp	r2, r1
 8005e2c:	d028      	beq.n	8005e80 <_dtoa_r+0xb08>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	220a      	movs	r2, #10
 8005e32:	9903      	ldr	r1, [sp, #12]
 8005e34:	4648      	mov	r0, r9
 8005e36:	f000 f9d3 	bl	80061e0 <__multadd>
 8005e3a:	42af      	cmp	r7, r5
 8005e3c:	9003      	str	r0, [sp, #12]
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	f04f 020a 	mov.w	r2, #10
 8005e46:	4639      	mov	r1, r7
 8005e48:	4648      	mov	r0, r9
 8005e4a:	d107      	bne.n	8005e5c <_dtoa_r+0xae4>
 8005e4c:	f000 f9c8 	bl	80061e0 <__multadd>
 8005e50:	4607      	mov	r7, r0
 8005e52:	4605      	mov	r5, r0
 8005e54:	9b04      	ldr	r3, [sp, #16]
 8005e56:	3301      	adds	r3, #1
 8005e58:	9304      	str	r3, [sp, #16]
 8005e5a:	e777      	b.n	8005d4c <_dtoa_r+0x9d4>
 8005e5c:	f000 f9c0 	bl	80061e0 <__multadd>
 8005e60:	4629      	mov	r1, r5
 8005e62:	4607      	mov	r7, r0
 8005e64:	2300      	movs	r3, #0
 8005e66:	220a      	movs	r2, #10
 8005e68:	4648      	mov	r0, r9
 8005e6a:	f000 f9b9 	bl	80061e0 <__multadd>
 8005e6e:	4605      	mov	r5, r0
 8005e70:	e7f0      	b.n	8005e54 <_dtoa_r+0xadc>
 8005e72:	f1bb 0f00 	cmp.w	fp, #0
 8005e76:	bfcc      	ite	gt
 8005e78:	465e      	movgt	r6, fp
 8005e7a:	2601      	movle	r6, #1
 8005e7c:	2700      	movs	r7, #0
 8005e7e:	4456      	add	r6, sl
 8005e80:	2201      	movs	r2, #1
 8005e82:	9903      	ldr	r1, [sp, #12]
 8005e84:	4648      	mov	r0, r9
 8005e86:	9304      	str	r3, [sp, #16]
 8005e88:	f000 fb4e 	bl	8006528 <__lshift>
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	9003      	str	r0, [sp, #12]
 8005e90:	f000 fbb6 	bl	8006600 <__mcmp>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	dcb4      	bgt.n	8005e02 <_dtoa_r+0xa8a>
 8005e98:	d102      	bne.n	8005ea0 <_dtoa_r+0xb28>
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	07db      	lsls	r3, r3, #31
 8005e9e:	d4b0      	bmi.n	8005e02 <_dtoa_r+0xa8a>
 8005ea0:	4633      	mov	r3, r6
 8005ea2:	461e      	mov	r6, r3
 8005ea4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005ea8:	2a30      	cmp	r2, #48	@ 0x30
 8005eaa:	d0fa      	beq.n	8005ea2 <_dtoa_r+0xb2a>
 8005eac:	e4b5      	b.n	800581a <_dtoa_r+0x4a2>
 8005eae:	459a      	cmp	sl, r3
 8005eb0:	d1a8      	bne.n	8005e04 <_dtoa_r+0xa8c>
 8005eb2:	2331      	movs	r3, #49	@ 0x31
 8005eb4:	f108 0801 	add.w	r8, r8, #1
 8005eb8:	f88a 3000 	strb.w	r3, [sl]
 8005ebc:	e4ad      	b.n	800581a <_dtoa_r+0x4a2>
 8005ebe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005ec0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005f1c <_dtoa_r+0xba4>
 8005ec4:	b11b      	cbz	r3, 8005ece <_dtoa_r+0xb56>
 8005ec6:	f10a 0308 	add.w	r3, sl, #8
 8005eca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	4650      	mov	r0, sl
 8005ed0:	b017      	add	sp, #92	@ 0x5c
 8005ed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ed6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f77f ae2e 	ble.w	8005b3a <_dtoa_r+0x7c2>
 8005ede:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ee0:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	e64d      	b.n	8005b82 <_dtoa_r+0x80a>
 8005ee6:	f1bb 0f00 	cmp.w	fp, #0
 8005eea:	f77f aed9 	ble.w	8005ca0 <_dtoa_r+0x928>
 8005eee:	4656      	mov	r6, sl
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	9803      	ldr	r0, [sp, #12]
 8005ef4:	f7ff f9b7 	bl	8005266 <quorem>
 8005ef8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005efc:	f806 3b01 	strb.w	r3, [r6], #1
 8005f00:	eba6 020a 	sub.w	r2, r6, sl
 8005f04:	4593      	cmp	fp, r2
 8005f06:	ddb4      	ble.n	8005e72 <_dtoa_r+0xafa>
 8005f08:	2300      	movs	r3, #0
 8005f0a:	220a      	movs	r2, #10
 8005f0c:	4648      	mov	r0, r9
 8005f0e:	9903      	ldr	r1, [sp, #12]
 8005f10:	f000 f966 	bl	80061e0 <__multadd>
 8005f14:	9003      	str	r0, [sp, #12]
 8005f16:	e7eb      	b.n	8005ef0 <_dtoa_r+0xb78>
 8005f18:	0800747e 	.word	0x0800747e
 8005f1c:	08007402 	.word	0x08007402

08005f20 <_free_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4605      	mov	r5, r0
 8005f24:	2900      	cmp	r1, #0
 8005f26:	d040      	beq.n	8005faa <_free_r+0x8a>
 8005f28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f2c:	1f0c      	subs	r4, r1, #4
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	bfb8      	it	lt
 8005f32:	18e4      	addlt	r4, r4, r3
 8005f34:	f000 f8e6 	bl	8006104 <__malloc_lock>
 8005f38:	4a1c      	ldr	r2, [pc, #112]	@ (8005fac <_free_r+0x8c>)
 8005f3a:	6813      	ldr	r3, [r2, #0]
 8005f3c:	b933      	cbnz	r3, 8005f4c <_free_r+0x2c>
 8005f3e:	6063      	str	r3, [r4, #4]
 8005f40:	6014      	str	r4, [r2, #0]
 8005f42:	4628      	mov	r0, r5
 8005f44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f48:	f000 b8e2 	b.w	8006110 <__malloc_unlock>
 8005f4c:	42a3      	cmp	r3, r4
 8005f4e:	d908      	bls.n	8005f62 <_free_r+0x42>
 8005f50:	6820      	ldr	r0, [r4, #0]
 8005f52:	1821      	adds	r1, r4, r0
 8005f54:	428b      	cmp	r3, r1
 8005f56:	bf01      	itttt	eq
 8005f58:	6819      	ldreq	r1, [r3, #0]
 8005f5a:	685b      	ldreq	r3, [r3, #4]
 8005f5c:	1809      	addeq	r1, r1, r0
 8005f5e:	6021      	streq	r1, [r4, #0]
 8005f60:	e7ed      	b.n	8005f3e <_free_r+0x1e>
 8005f62:	461a      	mov	r2, r3
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	b10b      	cbz	r3, 8005f6c <_free_r+0x4c>
 8005f68:	42a3      	cmp	r3, r4
 8005f6a:	d9fa      	bls.n	8005f62 <_free_r+0x42>
 8005f6c:	6811      	ldr	r1, [r2, #0]
 8005f6e:	1850      	adds	r0, r2, r1
 8005f70:	42a0      	cmp	r0, r4
 8005f72:	d10b      	bne.n	8005f8c <_free_r+0x6c>
 8005f74:	6820      	ldr	r0, [r4, #0]
 8005f76:	4401      	add	r1, r0
 8005f78:	1850      	adds	r0, r2, r1
 8005f7a:	4283      	cmp	r3, r0
 8005f7c:	6011      	str	r1, [r2, #0]
 8005f7e:	d1e0      	bne.n	8005f42 <_free_r+0x22>
 8005f80:	6818      	ldr	r0, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4408      	add	r0, r1
 8005f86:	6010      	str	r0, [r2, #0]
 8005f88:	6053      	str	r3, [r2, #4]
 8005f8a:	e7da      	b.n	8005f42 <_free_r+0x22>
 8005f8c:	d902      	bls.n	8005f94 <_free_r+0x74>
 8005f8e:	230c      	movs	r3, #12
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	e7d6      	b.n	8005f42 <_free_r+0x22>
 8005f94:	6820      	ldr	r0, [r4, #0]
 8005f96:	1821      	adds	r1, r4, r0
 8005f98:	428b      	cmp	r3, r1
 8005f9a:	bf01      	itttt	eq
 8005f9c:	6819      	ldreq	r1, [r3, #0]
 8005f9e:	685b      	ldreq	r3, [r3, #4]
 8005fa0:	1809      	addeq	r1, r1, r0
 8005fa2:	6021      	streq	r1, [r4, #0]
 8005fa4:	6063      	str	r3, [r4, #4]
 8005fa6:	6054      	str	r4, [r2, #4]
 8005fa8:	e7cb      	b.n	8005f42 <_free_r+0x22>
 8005faa:	bd38      	pop	{r3, r4, r5, pc}
 8005fac:	20000410 	.word	0x20000410

08005fb0 <malloc>:
 8005fb0:	4b02      	ldr	r3, [pc, #8]	@ (8005fbc <malloc+0xc>)
 8005fb2:	4601      	mov	r1, r0
 8005fb4:	6818      	ldr	r0, [r3, #0]
 8005fb6:	f000 b825 	b.w	8006004 <_malloc_r>
 8005fba:	bf00      	nop
 8005fbc:	2000001c 	.word	0x2000001c

08005fc0 <sbrk_aligned>:
 8005fc0:	b570      	push	{r4, r5, r6, lr}
 8005fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8006000 <sbrk_aligned+0x40>)
 8005fc4:	460c      	mov	r4, r1
 8005fc6:	6831      	ldr	r1, [r6, #0]
 8005fc8:	4605      	mov	r5, r0
 8005fca:	b911      	cbnz	r1, 8005fd2 <sbrk_aligned+0x12>
 8005fcc:	f000 fe3a 	bl	8006c44 <_sbrk_r>
 8005fd0:	6030      	str	r0, [r6, #0]
 8005fd2:	4621      	mov	r1, r4
 8005fd4:	4628      	mov	r0, r5
 8005fd6:	f000 fe35 	bl	8006c44 <_sbrk_r>
 8005fda:	1c43      	adds	r3, r0, #1
 8005fdc:	d103      	bne.n	8005fe6 <sbrk_aligned+0x26>
 8005fde:	f04f 34ff 	mov.w	r4, #4294967295
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	bd70      	pop	{r4, r5, r6, pc}
 8005fe6:	1cc4      	adds	r4, r0, #3
 8005fe8:	f024 0403 	bic.w	r4, r4, #3
 8005fec:	42a0      	cmp	r0, r4
 8005fee:	d0f8      	beq.n	8005fe2 <sbrk_aligned+0x22>
 8005ff0:	1a21      	subs	r1, r4, r0
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 fe26 	bl	8006c44 <_sbrk_r>
 8005ff8:	3001      	adds	r0, #1
 8005ffa:	d1f2      	bne.n	8005fe2 <sbrk_aligned+0x22>
 8005ffc:	e7ef      	b.n	8005fde <sbrk_aligned+0x1e>
 8005ffe:	bf00      	nop
 8006000:	2000040c 	.word	0x2000040c

08006004 <_malloc_r>:
 8006004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006008:	1ccd      	adds	r5, r1, #3
 800600a:	f025 0503 	bic.w	r5, r5, #3
 800600e:	3508      	adds	r5, #8
 8006010:	2d0c      	cmp	r5, #12
 8006012:	bf38      	it	cc
 8006014:	250c      	movcc	r5, #12
 8006016:	2d00      	cmp	r5, #0
 8006018:	4606      	mov	r6, r0
 800601a:	db01      	blt.n	8006020 <_malloc_r+0x1c>
 800601c:	42a9      	cmp	r1, r5
 800601e:	d904      	bls.n	800602a <_malloc_r+0x26>
 8006020:	230c      	movs	r3, #12
 8006022:	6033      	str	r3, [r6, #0]
 8006024:	2000      	movs	r0, #0
 8006026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006100 <_malloc_r+0xfc>
 800602e:	f000 f869 	bl	8006104 <__malloc_lock>
 8006032:	f8d8 3000 	ldr.w	r3, [r8]
 8006036:	461c      	mov	r4, r3
 8006038:	bb44      	cbnz	r4, 800608c <_malloc_r+0x88>
 800603a:	4629      	mov	r1, r5
 800603c:	4630      	mov	r0, r6
 800603e:	f7ff ffbf 	bl	8005fc0 <sbrk_aligned>
 8006042:	1c43      	adds	r3, r0, #1
 8006044:	4604      	mov	r4, r0
 8006046:	d158      	bne.n	80060fa <_malloc_r+0xf6>
 8006048:	f8d8 4000 	ldr.w	r4, [r8]
 800604c:	4627      	mov	r7, r4
 800604e:	2f00      	cmp	r7, #0
 8006050:	d143      	bne.n	80060da <_malloc_r+0xd6>
 8006052:	2c00      	cmp	r4, #0
 8006054:	d04b      	beq.n	80060ee <_malloc_r+0xea>
 8006056:	6823      	ldr	r3, [r4, #0]
 8006058:	4639      	mov	r1, r7
 800605a:	4630      	mov	r0, r6
 800605c:	eb04 0903 	add.w	r9, r4, r3
 8006060:	f000 fdf0 	bl	8006c44 <_sbrk_r>
 8006064:	4581      	cmp	r9, r0
 8006066:	d142      	bne.n	80060ee <_malloc_r+0xea>
 8006068:	6821      	ldr	r1, [r4, #0]
 800606a:	4630      	mov	r0, r6
 800606c:	1a6d      	subs	r5, r5, r1
 800606e:	4629      	mov	r1, r5
 8006070:	f7ff ffa6 	bl	8005fc0 <sbrk_aligned>
 8006074:	3001      	adds	r0, #1
 8006076:	d03a      	beq.n	80060ee <_malloc_r+0xea>
 8006078:	6823      	ldr	r3, [r4, #0]
 800607a:	442b      	add	r3, r5
 800607c:	6023      	str	r3, [r4, #0]
 800607e:	f8d8 3000 	ldr.w	r3, [r8]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	bb62      	cbnz	r2, 80060e0 <_malloc_r+0xdc>
 8006086:	f8c8 7000 	str.w	r7, [r8]
 800608a:	e00f      	b.n	80060ac <_malloc_r+0xa8>
 800608c:	6822      	ldr	r2, [r4, #0]
 800608e:	1b52      	subs	r2, r2, r5
 8006090:	d420      	bmi.n	80060d4 <_malloc_r+0xd0>
 8006092:	2a0b      	cmp	r2, #11
 8006094:	d917      	bls.n	80060c6 <_malloc_r+0xc2>
 8006096:	1961      	adds	r1, r4, r5
 8006098:	42a3      	cmp	r3, r4
 800609a:	6025      	str	r5, [r4, #0]
 800609c:	bf18      	it	ne
 800609e:	6059      	strne	r1, [r3, #4]
 80060a0:	6863      	ldr	r3, [r4, #4]
 80060a2:	bf08      	it	eq
 80060a4:	f8c8 1000 	streq.w	r1, [r8]
 80060a8:	5162      	str	r2, [r4, r5]
 80060aa:	604b      	str	r3, [r1, #4]
 80060ac:	4630      	mov	r0, r6
 80060ae:	f000 f82f 	bl	8006110 <__malloc_unlock>
 80060b2:	f104 000b 	add.w	r0, r4, #11
 80060b6:	1d23      	adds	r3, r4, #4
 80060b8:	f020 0007 	bic.w	r0, r0, #7
 80060bc:	1ac2      	subs	r2, r0, r3
 80060be:	bf1c      	itt	ne
 80060c0:	1a1b      	subne	r3, r3, r0
 80060c2:	50a3      	strne	r3, [r4, r2]
 80060c4:	e7af      	b.n	8006026 <_malloc_r+0x22>
 80060c6:	6862      	ldr	r2, [r4, #4]
 80060c8:	42a3      	cmp	r3, r4
 80060ca:	bf0c      	ite	eq
 80060cc:	f8c8 2000 	streq.w	r2, [r8]
 80060d0:	605a      	strne	r2, [r3, #4]
 80060d2:	e7eb      	b.n	80060ac <_malloc_r+0xa8>
 80060d4:	4623      	mov	r3, r4
 80060d6:	6864      	ldr	r4, [r4, #4]
 80060d8:	e7ae      	b.n	8006038 <_malloc_r+0x34>
 80060da:	463c      	mov	r4, r7
 80060dc:	687f      	ldr	r7, [r7, #4]
 80060de:	e7b6      	b.n	800604e <_malloc_r+0x4a>
 80060e0:	461a      	mov	r2, r3
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	42a3      	cmp	r3, r4
 80060e6:	d1fb      	bne.n	80060e0 <_malloc_r+0xdc>
 80060e8:	2300      	movs	r3, #0
 80060ea:	6053      	str	r3, [r2, #4]
 80060ec:	e7de      	b.n	80060ac <_malloc_r+0xa8>
 80060ee:	230c      	movs	r3, #12
 80060f0:	4630      	mov	r0, r6
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	f000 f80c 	bl	8006110 <__malloc_unlock>
 80060f8:	e794      	b.n	8006024 <_malloc_r+0x20>
 80060fa:	6005      	str	r5, [r0, #0]
 80060fc:	e7d6      	b.n	80060ac <_malloc_r+0xa8>
 80060fe:	bf00      	nop
 8006100:	20000410 	.word	0x20000410

08006104 <__malloc_lock>:
 8006104:	4801      	ldr	r0, [pc, #4]	@ (800610c <__malloc_lock+0x8>)
 8006106:	f7ff b89e 	b.w	8005246 <__retarget_lock_acquire_recursive>
 800610a:	bf00      	nop
 800610c:	20000408 	.word	0x20000408

08006110 <__malloc_unlock>:
 8006110:	4801      	ldr	r0, [pc, #4]	@ (8006118 <__malloc_unlock+0x8>)
 8006112:	f7ff b899 	b.w	8005248 <__retarget_lock_release_recursive>
 8006116:	bf00      	nop
 8006118:	20000408 	.word	0x20000408

0800611c <_Balloc>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	69c6      	ldr	r6, [r0, #28]
 8006120:	4604      	mov	r4, r0
 8006122:	460d      	mov	r5, r1
 8006124:	b976      	cbnz	r6, 8006144 <_Balloc+0x28>
 8006126:	2010      	movs	r0, #16
 8006128:	f7ff ff42 	bl	8005fb0 <malloc>
 800612c:	4602      	mov	r2, r0
 800612e:	61e0      	str	r0, [r4, #28]
 8006130:	b920      	cbnz	r0, 800613c <_Balloc+0x20>
 8006132:	216b      	movs	r1, #107	@ 0x6b
 8006134:	4b17      	ldr	r3, [pc, #92]	@ (8006194 <_Balloc+0x78>)
 8006136:	4818      	ldr	r0, [pc, #96]	@ (8006198 <_Balloc+0x7c>)
 8006138:	f000 fda2 	bl	8006c80 <__assert_func>
 800613c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006140:	6006      	str	r6, [r0, #0]
 8006142:	60c6      	str	r6, [r0, #12]
 8006144:	69e6      	ldr	r6, [r4, #28]
 8006146:	68f3      	ldr	r3, [r6, #12]
 8006148:	b183      	cbz	r3, 800616c <_Balloc+0x50>
 800614a:	69e3      	ldr	r3, [r4, #28]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006152:	b9b8      	cbnz	r0, 8006184 <_Balloc+0x68>
 8006154:	2101      	movs	r1, #1
 8006156:	fa01 f605 	lsl.w	r6, r1, r5
 800615a:	1d72      	adds	r2, r6, #5
 800615c:	4620      	mov	r0, r4
 800615e:	0092      	lsls	r2, r2, #2
 8006160:	f000 fdac 	bl	8006cbc <_calloc_r>
 8006164:	b160      	cbz	r0, 8006180 <_Balloc+0x64>
 8006166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800616a:	e00e      	b.n	800618a <_Balloc+0x6e>
 800616c:	2221      	movs	r2, #33	@ 0x21
 800616e:	2104      	movs	r1, #4
 8006170:	4620      	mov	r0, r4
 8006172:	f000 fda3 	bl	8006cbc <_calloc_r>
 8006176:	69e3      	ldr	r3, [r4, #28]
 8006178:	60f0      	str	r0, [r6, #12]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e4      	bne.n	800614a <_Balloc+0x2e>
 8006180:	2000      	movs	r0, #0
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	6802      	ldr	r2, [r0, #0]
 8006186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800618a:	2300      	movs	r3, #0
 800618c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006190:	e7f7      	b.n	8006182 <_Balloc+0x66>
 8006192:	bf00      	nop
 8006194:	0800740f 	.word	0x0800740f
 8006198:	0800748f 	.word	0x0800748f

0800619c <_Bfree>:
 800619c:	b570      	push	{r4, r5, r6, lr}
 800619e:	69c6      	ldr	r6, [r0, #28]
 80061a0:	4605      	mov	r5, r0
 80061a2:	460c      	mov	r4, r1
 80061a4:	b976      	cbnz	r6, 80061c4 <_Bfree+0x28>
 80061a6:	2010      	movs	r0, #16
 80061a8:	f7ff ff02 	bl	8005fb0 <malloc>
 80061ac:	4602      	mov	r2, r0
 80061ae:	61e8      	str	r0, [r5, #28]
 80061b0:	b920      	cbnz	r0, 80061bc <_Bfree+0x20>
 80061b2:	218f      	movs	r1, #143	@ 0x8f
 80061b4:	4b08      	ldr	r3, [pc, #32]	@ (80061d8 <_Bfree+0x3c>)
 80061b6:	4809      	ldr	r0, [pc, #36]	@ (80061dc <_Bfree+0x40>)
 80061b8:	f000 fd62 	bl	8006c80 <__assert_func>
 80061bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061c0:	6006      	str	r6, [r0, #0]
 80061c2:	60c6      	str	r6, [r0, #12]
 80061c4:	b13c      	cbz	r4, 80061d6 <_Bfree+0x3a>
 80061c6:	69eb      	ldr	r3, [r5, #28]
 80061c8:	6862      	ldr	r2, [r4, #4]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80061d0:	6021      	str	r1, [r4, #0]
 80061d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80061d6:	bd70      	pop	{r4, r5, r6, pc}
 80061d8:	0800740f 	.word	0x0800740f
 80061dc:	0800748f 	.word	0x0800748f

080061e0 <__multadd>:
 80061e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061e4:	4607      	mov	r7, r0
 80061e6:	460c      	mov	r4, r1
 80061e8:	461e      	mov	r6, r3
 80061ea:	2000      	movs	r0, #0
 80061ec:	690d      	ldr	r5, [r1, #16]
 80061ee:	f101 0c14 	add.w	ip, r1, #20
 80061f2:	f8dc 3000 	ldr.w	r3, [ip]
 80061f6:	3001      	adds	r0, #1
 80061f8:	b299      	uxth	r1, r3
 80061fa:	fb02 6101 	mla	r1, r2, r1, r6
 80061fe:	0c1e      	lsrs	r6, r3, #16
 8006200:	0c0b      	lsrs	r3, r1, #16
 8006202:	fb02 3306 	mla	r3, r2, r6, r3
 8006206:	b289      	uxth	r1, r1
 8006208:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800620c:	4285      	cmp	r5, r0
 800620e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006212:	f84c 1b04 	str.w	r1, [ip], #4
 8006216:	dcec      	bgt.n	80061f2 <__multadd+0x12>
 8006218:	b30e      	cbz	r6, 800625e <__multadd+0x7e>
 800621a:	68a3      	ldr	r3, [r4, #8]
 800621c:	42ab      	cmp	r3, r5
 800621e:	dc19      	bgt.n	8006254 <__multadd+0x74>
 8006220:	6861      	ldr	r1, [r4, #4]
 8006222:	4638      	mov	r0, r7
 8006224:	3101      	adds	r1, #1
 8006226:	f7ff ff79 	bl	800611c <_Balloc>
 800622a:	4680      	mov	r8, r0
 800622c:	b928      	cbnz	r0, 800623a <__multadd+0x5a>
 800622e:	4602      	mov	r2, r0
 8006230:	21ba      	movs	r1, #186	@ 0xba
 8006232:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <__multadd+0x84>)
 8006234:	480c      	ldr	r0, [pc, #48]	@ (8006268 <__multadd+0x88>)
 8006236:	f000 fd23 	bl	8006c80 <__assert_func>
 800623a:	6922      	ldr	r2, [r4, #16]
 800623c:	f104 010c 	add.w	r1, r4, #12
 8006240:	3202      	adds	r2, #2
 8006242:	0092      	lsls	r2, r2, #2
 8006244:	300c      	adds	r0, #12
 8006246:	f000 fd0d 	bl	8006c64 <memcpy>
 800624a:	4621      	mov	r1, r4
 800624c:	4638      	mov	r0, r7
 800624e:	f7ff ffa5 	bl	800619c <_Bfree>
 8006252:	4644      	mov	r4, r8
 8006254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006258:	3501      	adds	r5, #1
 800625a:	615e      	str	r6, [r3, #20]
 800625c:	6125      	str	r5, [r4, #16]
 800625e:	4620      	mov	r0, r4
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006264:	0800747e 	.word	0x0800747e
 8006268:	0800748f 	.word	0x0800748f

0800626c <__hi0bits>:
 800626c:	4603      	mov	r3, r0
 800626e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006272:	bf3a      	itte	cc
 8006274:	0403      	lslcc	r3, r0, #16
 8006276:	2010      	movcc	r0, #16
 8006278:	2000      	movcs	r0, #0
 800627a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800627e:	bf3c      	itt	cc
 8006280:	021b      	lslcc	r3, r3, #8
 8006282:	3008      	addcc	r0, #8
 8006284:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006288:	bf3c      	itt	cc
 800628a:	011b      	lslcc	r3, r3, #4
 800628c:	3004      	addcc	r0, #4
 800628e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006292:	bf3c      	itt	cc
 8006294:	009b      	lslcc	r3, r3, #2
 8006296:	3002      	addcc	r0, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	db05      	blt.n	80062a8 <__hi0bits+0x3c>
 800629c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80062a0:	f100 0001 	add.w	r0, r0, #1
 80062a4:	bf08      	it	eq
 80062a6:	2020      	moveq	r0, #32
 80062a8:	4770      	bx	lr

080062aa <__lo0bits>:
 80062aa:	6803      	ldr	r3, [r0, #0]
 80062ac:	4602      	mov	r2, r0
 80062ae:	f013 0007 	ands.w	r0, r3, #7
 80062b2:	d00b      	beq.n	80062cc <__lo0bits+0x22>
 80062b4:	07d9      	lsls	r1, r3, #31
 80062b6:	d421      	bmi.n	80062fc <__lo0bits+0x52>
 80062b8:	0798      	lsls	r0, r3, #30
 80062ba:	bf49      	itett	mi
 80062bc:	085b      	lsrmi	r3, r3, #1
 80062be:	089b      	lsrpl	r3, r3, #2
 80062c0:	2001      	movmi	r0, #1
 80062c2:	6013      	strmi	r3, [r2, #0]
 80062c4:	bf5c      	itt	pl
 80062c6:	2002      	movpl	r0, #2
 80062c8:	6013      	strpl	r3, [r2, #0]
 80062ca:	4770      	bx	lr
 80062cc:	b299      	uxth	r1, r3
 80062ce:	b909      	cbnz	r1, 80062d4 <__lo0bits+0x2a>
 80062d0:	2010      	movs	r0, #16
 80062d2:	0c1b      	lsrs	r3, r3, #16
 80062d4:	b2d9      	uxtb	r1, r3
 80062d6:	b909      	cbnz	r1, 80062dc <__lo0bits+0x32>
 80062d8:	3008      	adds	r0, #8
 80062da:	0a1b      	lsrs	r3, r3, #8
 80062dc:	0719      	lsls	r1, r3, #28
 80062de:	bf04      	itt	eq
 80062e0:	091b      	lsreq	r3, r3, #4
 80062e2:	3004      	addeq	r0, #4
 80062e4:	0799      	lsls	r1, r3, #30
 80062e6:	bf04      	itt	eq
 80062e8:	089b      	lsreq	r3, r3, #2
 80062ea:	3002      	addeq	r0, #2
 80062ec:	07d9      	lsls	r1, r3, #31
 80062ee:	d403      	bmi.n	80062f8 <__lo0bits+0x4e>
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	f100 0001 	add.w	r0, r0, #1
 80062f6:	d003      	beq.n	8006300 <__lo0bits+0x56>
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	4770      	bx	lr
 80062fc:	2000      	movs	r0, #0
 80062fe:	4770      	bx	lr
 8006300:	2020      	movs	r0, #32
 8006302:	4770      	bx	lr

08006304 <__i2b>:
 8006304:	b510      	push	{r4, lr}
 8006306:	460c      	mov	r4, r1
 8006308:	2101      	movs	r1, #1
 800630a:	f7ff ff07 	bl	800611c <_Balloc>
 800630e:	4602      	mov	r2, r0
 8006310:	b928      	cbnz	r0, 800631e <__i2b+0x1a>
 8006312:	f240 1145 	movw	r1, #325	@ 0x145
 8006316:	4b04      	ldr	r3, [pc, #16]	@ (8006328 <__i2b+0x24>)
 8006318:	4804      	ldr	r0, [pc, #16]	@ (800632c <__i2b+0x28>)
 800631a:	f000 fcb1 	bl	8006c80 <__assert_func>
 800631e:	2301      	movs	r3, #1
 8006320:	6144      	str	r4, [r0, #20]
 8006322:	6103      	str	r3, [r0, #16]
 8006324:	bd10      	pop	{r4, pc}
 8006326:	bf00      	nop
 8006328:	0800747e 	.word	0x0800747e
 800632c:	0800748f 	.word	0x0800748f

08006330 <__multiply>:
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	4617      	mov	r7, r2
 8006336:	690a      	ldr	r2, [r1, #16]
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	4689      	mov	r9, r1
 800633c:	429a      	cmp	r2, r3
 800633e:	bfa2      	ittt	ge
 8006340:	463b      	movge	r3, r7
 8006342:	460f      	movge	r7, r1
 8006344:	4699      	movge	r9, r3
 8006346:	693d      	ldr	r5, [r7, #16]
 8006348:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	eb05 060a 	add.w	r6, r5, sl
 8006354:	42b3      	cmp	r3, r6
 8006356:	b085      	sub	sp, #20
 8006358:	bfb8      	it	lt
 800635a:	3101      	addlt	r1, #1
 800635c:	f7ff fede 	bl	800611c <_Balloc>
 8006360:	b930      	cbnz	r0, 8006370 <__multiply+0x40>
 8006362:	4602      	mov	r2, r0
 8006364:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006368:	4b40      	ldr	r3, [pc, #256]	@ (800646c <__multiply+0x13c>)
 800636a:	4841      	ldr	r0, [pc, #260]	@ (8006470 <__multiply+0x140>)
 800636c:	f000 fc88 	bl	8006c80 <__assert_func>
 8006370:	f100 0414 	add.w	r4, r0, #20
 8006374:	4623      	mov	r3, r4
 8006376:	2200      	movs	r2, #0
 8006378:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800637c:	4573      	cmp	r3, lr
 800637e:	d320      	bcc.n	80063c2 <__multiply+0x92>
 8006380:	f107 0814 	add.w	r8, r7, #20
 8006384:	f109 0114 	add.w	r1, r9, #20
 8006388:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800638c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006390:	9302      	str	r3, [sp, #8]
 8006392:	1beb      	subs	r3, r5, r7
 8006394:	3b15      	subs	r3, #21
 8006396:	f023 0303 	bic.w	r3, r3, #3
 800639a:	3304      	adds	r3, #4
 800639c:	3715      	adds	r7, #21
 800639e:	42bd      	cmp	r5, r7
 80063a0:	bf38      	it	cc
 80063a2:	2304      	movcc	r3, #4
 80063a4:	9301      	str	r3, [sp, #4]
 80063a6:	9b02      	ldr	r3, [sp, #8]
 80063a8:	9103      	str	r1, [sp, #12]
 80063aa:	428b      	cmp	r3, r1
 80063ac:	d80c      	bhi.n	80063c8 <__multiply+0x98>
 80063ae:	2e00      	cmp	r6, #0
 80063b0:	dd03      	ble.n	80063ba <__multiply+0x8a>
 80063b2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d055      	beq.n	8006466 <__multiply+0x136>
 80063ba:	6106      	str	r6, [r0, #16]
 80063bc:	b005      	add	sp, #20
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	f843 2b04 	str.w	r2, [r3], #4
 80063c6:	e7d9      	b.n	800637c <__multiply+0x4c>
 80063c8:	f8b1 a000 	ldrh.w	sl, [r1]
 80063cc:	f1ba 0f00 	cmp.w	sl, #0
 80063d0:	d01f      	beq.n	8006412 <__multiply+0xe2>
 80063d2:	46c4      	mov	ip, r8
 80063d4:	46a1      	mov	r9, r4
 80063d6:	2700      	movs	r7, #0
 80063d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063dc:	f8d9 3000 	ldr.w	r3, [r9]
 80063e0:	fa1f fb82 	uxth.w	fp, r2
 80063e4:	b29b      	uxth	r3, r3
 80063e6:	fb0a 330b 	mla	r3, sl, fp, r3
 80063ea:	443b      	add	r3, r7
 80063ec:	f8d9 7000 	ldr.w	r7, [r9]
 80063f0:	0c12      	lsrs	r2, r2, #16
 80063f2:	0c3f      	lsrs	r7, r7, #16
 80063f4:	fb0a 7202 	mla	r2, sl, r2, r7
 80063f8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006402:	4565      	cmp	r5, ip
 8006404:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006408:	f849 3b04 	str.w	r3, [r9], #4
 800640c:	d8e4      	bhi.n	80063d8 <__multiply+0xa8>
 800640e:	9b01      	ldr	r3, [sp, #4]
 8006410:	50e7      	str	r7, [r4, r3]
 8006412:	9b03      	ldr	r3, [sp, #12]
 8006414:	3104      	adds	r1, #4
 8006416:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800641a:	f1b9 0f00 	cmp.w	r9, #0
 800641e:	d020      	beq.n	8006462 <__multiply+0x132>
 8006420:	4647      	mov	r7, r8
 8006422:	46a4      	mov	ip, r4
 8006424:	f04f 0a00 	mov.w	sl, #0
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	f8b7 b000 	ldrh.w	fp, [r7]
 800642e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006432:	b29b      	uxth	r3, r3
 8006434:	fb09 220b 	mla	r2, r9, fp, r2
 8006438:	4452      	add	r2, sl
 800643a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800643e:	f84c 3b04 	str.w	r3, [ip], #4
 8006442:	f857 3b04 	ldr.w	r3, [r7], #4
 8006446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800644a:	f8bc 3000 	ldrh.w	r3, [ip]
 800644e:	42bd      	cmp	r5, r7
 8006450:	fb09 330a 	mla	r3, r9, sl, r3
 8006454:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800645c:	d8e5      	bhi.n	800642a <__multiply+0xfa>
 800645e:	9a01      	ldr	r2, [sp, #4]
 8006460:	50a3      	str	r3, [r4, r2]
 8006462:	3404      	adds	r4, #4
 8006464:	e79f      	b.n	80063a6 <__multiply+0x76>
 8006466:	3e01      	subs	r6, #1
 8006468:	e7a1      	b.n	80063ae <__multiply+0x7e>
 800646a:	bf00      	nop
 800646c:	0800747e 	.word	0x0800747e
 8006470:	0800748f 	.word	0x0800748f

08006474 <__pow5mult>:
 8006474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006478:	4615      	mov	r5, r2
 800647a:	f012 0203 	ands.w	r2, r2, #3
 800647e:	4607      	mov	r7, r0
 8006480:	460e      	mov	r6, r1
 8006482:	d007      	beq.n	8006494 <__pow5mult+0x20>
 8006484:	4c25      	ldr	r4, [pc, #148]	@ (800651c <__pow5mult+0xa8>)
 8006486:	3a01      	subs	r2, #1
 8006488:	2300      	movs	r3, #0
 800648a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800648e:	f7ff fea7 	bl	80061e0 <__multadd>
 8006492:	4606      	mov	r6, r0
 8006494:	10ad      	asrs	r5, r5, #2
 8006496:	d03d      	beq.n	8006514 <__pow5mult+0xa0>
 8006498:	69fc      	ldr	r4, [r7, #28]
 800649a:	b97c      	cbnz	r4, 80064bc <__pow5mult+0x48>
 800649c:	2010      	movs	r0, #16
 800649e:	f7ff fd87 	bl	8005fb0 <malloc>
 80064a2:	4602      	mov	r2, r0
 80064a4:	61f8      	str	r0, [r7, #28]
 80064a6:	b928      	cbnz	r0, 80064b4 <__pow5mult+0x40>
 80064a8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80064ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006520 <__pow5mult+0xac>)
 80064ae:	481d      	ldr	r0, [pc, #116]	@ (8006524 <__pow5mult+0xb0>)
 80064b0:	f000 fbe6 	bl	8006c80 <__assert_func>
 80064b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80064b8:	6004      	str	r4, [r0, #0]
 80064ba:	60c4      	str	r4, [r0, #12]
 80064bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80064c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80064c4:	b94c      	cbnz	r4, 80064da <__pow5mult+0x66>
 80064c6:	f240 2171 	movw	r1, #625	@ 0x271
 80064ca:	4638      	mov	r0, r7
 80064cc:	f7ff ff1a 	bl	8006304 <__i2b>
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	f8c8 0008 	str.w	r0, [r8, #8]
 80064d8:	6003      	str	r3, [r0, #0]
 80064da:	f04f 0900 	mov.w	r9, #0
 80064de:	07eb      	lsls	r3, r5, #31
 80064e0:	d50a      	bpl.n	80064f8 <__pow5mult+0x84>
 80064e2:	4631      	mov	r1, r6
 80064e4:	4622      	mov	r2, r4
 80064e6:	4638      	mov	r0, r7
 80064e8:	f7ff ff22 	bl	8006330 <__multiply>
 80064ec:	4680      	mov	r8, r0
 80064ee:	4631      	mov	r1, r6
 80064f0:	4638      	mov	r0, r7
 80064f2:	f7ff fe53 	bl	800619c <_Bfree>
 80064f6:	4646      	mov	r6, r8
 80064f8:	106d      	asrs	r5, r5, #1
 80064fa:	d00b      	beq.n	8006514 <__pow5mult+0xa0>
 80064fc:	6820      	ldr	r0, [r4, #0]
 80064fe:	b938      	cbnz	r0, 8006510 <__pow5mult+0x9c>
 8006500:	4622      	mov	r2, r4
 8006502:	4621      	mov	r1, r4
 8006504:	4638      	mov	r0, r7
 8006506:	f7ff ff13 	bl	8006330 <__multiply>
 800650a:	6020      	str	r0, [r4, #0]
 800650c:	f8c0 9000 	str.w	r9, [r0]
 8006510:	4604      	mov	r4, r0
 8006512:	e7e4      	b.n	80064de <__pow5mult+0x6a>
 8006514:	4630      	mov	r0, r6
 8006516:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800651a:	bf00      	nop
 800651c:	08007540 	.word	0x08007540
 8006520:	0800740f 	.word	0x0800740f
 8006524:	0800748f 	.word	0x0800748f

08006528 <__lshift>:
 8006528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800652c:	460c      	mov	r4, r1
 800652e:	4607      	mov	r7, r0
 8006530:	4691      	mov	r9, r2
 8006532:	6923      	ldr	r3, [r4, #16]
 8006534:	6849      	ldr	r1, [r1, #4]
 8006536:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006540:	f108 0601 	add.w	r6, r8, #1
 8006544:	42b3      	cmp	r3, r6
 8006546:	db0b      	blt.n	8006560 <__lshift+0x38>
 8006548:	4638      	mov	r0, r7
 800654a:	f7ff fde7 	bl	800611c <_Balloc>
 800654e:	4605      	mov	r5, r0
 8006550:	b948      	cbnz	r0, 8006566 <__lshift+0x3e>
 8006552:	4602      	mov	r2, r0
 8006554:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006558:	4b27      	ldr	r3, [pc, #156]	@ (80065f8 <__lshift+0xd0>)
 800655a:	4828      	ldr	r0, [pc, #160]	@ (80065fc <__lshift+0xd4>)
 800655c:	f000 fb90 	bl	8006c80 <__assert_func>
 8006560:	3101      	adds	r1, #1
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	e7ee      	b.n	8006544 <__lshift+0x1c>
 8006566:	2300      	movs	r3, #0
 8006568:	f100 0114 	add.w	r1, r0, #20
 800656c:	f100 0210 	add.w	r2, r0, #16
 8006570:	4618      	mov	r0, r3
 8006572:	4553      	cmp	r3, sl
 8006574:	db33      	blt.n	80065de <__lshift+0xb6>
 8006576:	6920      	ldr	r0, [r4, #16]
 8006578:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800657c:	f104 0314 	add.w	r3, r4, #20
 8006580:	f019 091f 	ands.w	r9, r9, #31
 8006584:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006588:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800658c:	d02b      	beq.n	80065e6 <__lshift+0xbe>
 800658e:	468a      	mov	sl, r1
 8006590:	2200      	movs	r2, #0
 8006592:	f1c9 0e20 	rsb	lr, r9, #32
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	fa00 f009 	lsl.w	r0, r0, r9
 800659c:	4310      	orrs	r0, r2
 800659e:	f84a 0b04 	str.w	r0, [sl], #4
 80065a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80065a6:	459c      	cmp	ip, r3
 80065a8:	fa22 f20e 	lsr.w	r2, r2, lr
 80065ac:	d8f3      	bhi.n	8006596 <__lshift+0x6e>
 80065ae:	ebac 0304 	sub.w	r3, ip, r4
 80065b2:	3b15      	subs	r3, #21
 80065b4:	f023 0303 	bic.w	r3, r3, #3
 80065b8:	3304      	adds	r3, #4
 80065ba:	f104 0015 	add.w	r0, r4, #21
 80065be:	4560      	cmp	r0, ip
 80065c0:	bf88      	it	hi
 80065c2:	2304      	movhi	r3, #4
 80065c4:	50ca      	str	r2, [r1, r3]
 80065c6:	b10a      	cbz	r2, 80065cc <__lshift+0xa4>
 80065c8:	f108 0602 	add.w	r6, r8, #2
 80065cc:	3e01      	subs	r6, #1
 80065ce:	4638      	mov	r0, r7
 80065d0:	4621      	mov	r1, r4
 80065d2:	612e      	str	r6, [r5, #16]
 80065d4:	f7ff fde2 	bl	800619c <_Bfree>
 80065d8:	4628      	mov	r0, r5
 80065da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065de:	f842 0f04 	str.w	r0, [r2, #4]!
 80065e2:	3301      	adds	r3, #1
 80065e4:	e7c5      	b.n	8006572 <__lshift+0x4a>
 80065e6:	3904      	subs	r1, #4
 80065e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80065ec:	459c      	cmp	ip, r3
 80065ee:	f841 2f04 	str.w	r2, [r1, #4]!
 80065f2:	d8f9      	bhi.n	80065e8 <__lshift+0xc0>
 80065f4:	e7ea      	b.n	80065cc <__lshift+0xa4>
 80065f6:	bf00      	nop
 80065f8:	0800747e 	.word	0x0800747e
 80065fc:	0800748f 	.word	0x0800748f

08006600 <__mcmp>:
 8006600:	4603      	mov	r3, r0
 8006602:	690a      	ldr	r2, [r1, #16]
 8006604:	6900      	ldr	r0, [r0, #16]
 8006606:	b530      	push	{r4, r5, lr}
 8006608:	1a80      	subs	r0, r0, r2
 800660a:	d10e      	bne.n	800662a <__mcmp+0x2a>
 800660c:	3314      	adds	r3, #20
 800660e:	3114      	adds	r1, #20
 8006610:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006614:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006618:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800661c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006620:	4295      	cmp	r5, r2
 8006622:	d003      	beq.n	800662c <__mcmp+0x2c>
 8006624:	d205      	bcs.n	8006632 <__mcmp+0x32>
 8006626:	f04f 30ff 	mov.w	r0, #4294967295
 800662a:	bd30      	pop	{r4, r5, pc}
 800662c:	42a3      	cmp	r3, r4
 800662e:	d3f3      	bcc.n	8006618 <__mcmp+0x18>
 8006630:	e7fb      	b.n	800662a <__mcmp+0x2a>
 8006632:	2001      	movs	r0, #1
 8006634:	e7f9      	b.n	800662a <__mcmp+0x2a>
	...

08006638 <__mdiff>:
 8006638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800663c:	4689      	mov	r9, r1
 800663e:	4606      	mov	r6, r0
 8006640:	4611      	mov	r1, r2
 8006642:	4648      	mov	r0, r9
 8006644:	4614      	mov	r4, r2
 8006646:	f7ff ffdb 	bl	8006600 <__mcmp>
 800664a:	1e05      	subs	r5, r0, #0
 800664c:	d112      	bne.n	8006674 <__mdiff+0x3c>
 800664e:	4629      	mov	r1, r5
 8006650:	4630      	mov	r0, r6
 8006652:	f7ff fd63 	bl	800611c <_Balloc>
 8006656:	4602      	mov	r2, r0
 8006658:	b928      	cbnz	r0, 8006666 <__mdiff+0x2e>
 800665a:	f240 2137 	movw	r1, #567	@ 0x237
 800665e:	4b3e      	ldr	r3, [pc, #248]	@ (8006758 <__mdiff+0x120>)
 8006660:	483e      	ldr	r0, [pc, #248]	@ (800675c <__mdiff+0x124>)
 8006662:	f000 fb0d 	bl	8006c80 <__assert_func>
 8006666:	2301      	movs	r3, #1
 8006668:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800666c:	4610      	mov	r0, r2
 800666e:	b003      	add	sp, #12
 8006670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006674:	bfbc      	itt	lt
 8006676:	464b      	movlt	r3, r9
 8006678:	46a1      	movlt	r9, r4
 800667a:	4630      	mov	r0, r6
 800667c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006680:	bfba      	itte	lt
 8006682:	461c      	movlt	r4, r3
 8006684:	2501      	movlt	r5, #1
 8006686:	2500      	movge	r5, #0
 8006688:	f7ff fd48 	bl	800611c <_Balloc>
 800668c:	4602      	mov	r2, r0
 800668e:	b918      	cbnz	r0, 8006698 <__mdiff+0x60>
 8006690:	f240 2145 	movw	r1, #581	@ 0x245
 8006694:	4b30      	ldr	r3, [pc, #192]	@ (8006758 <__mdiff+0x120>)
 8006696:	e7e3      	b.n	8006660 <__mdiff+0x28>
 8006698:	f100 0b14 	add.w	fp, r0, #20
 800669c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80066a0:	f109 0310 	add.w	r3, r9, #16
 80066a4:	60c5      	str	r5, [r0, #12]
 80066a6:	f04f 0c00 	mov.w	ip, #0
 80066aa:	f109 0514 	add.w	r5, r9, #20
 80066ae:	46d9      	mov	r9, fp
 80066b0:	6926      	ldr	r6, [r4, #16]
 80066b2:	f104 0e14 	add.w	lr, r4, #20
 80066b6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80066ba:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80066be:	9301      	str	r3, [sp, #4]
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80066c6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80066ca:	b281      	uxth	r1, r0
 80066cc:	9301      	str	r3, [sp, #4]
 80066ce:	fa1f f38a 	uxth.w	r3, sl
 80066d2:	1a5b      	subs	r3, r3, r1
 80066d4:	0c00      	lsrs	r0, r0, #16
 80066d6:	4463      	add	r3, ip
 80066d8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80066dc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80066e0:	b29b      	uxth	r3, r3
 80066e2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80066e6:	4576      	cmp	r6, lr
 80066e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80066ec:	f849 3b04 	str.w	r3, [r9], #4
 80066f0:	d8e6      	bhi.n	80066c0 <__mdiff+0x88>
 80066f2:	1b33      	subs	r3, r6, r4
 80066f4:	3b15      	subs	r3, #21
 80066f6:	f023 0303 	bic.w	r3, r3, #3
 80066fa:	3415      	adds	r4, #21
 80066fc:	3304      	adds	r3, #4
 80066fe:	42a6      	cmp	r6, r4
 8006700:	bf38      	it	cc
 8006702:	2304      	movcc	r3, #4
 8006704:	441d      	add	r5, r3
 8006706:	445b      	add	r3, fp
 8006708:	461e      	mov	r6, r3
 800670a:	462c      	mov	r4, r5
 800670c:	4544      	cmp	r4, r8
 800670e:	d30e      	bcc.n	800672e <__mdiff+0xf6>
 8006710:	f108 0103 	add.w	r1, r8, #3
 8006714:	1b49      	subs	r1, r1, r5
 8006716:	f021 0103 	bic.w	r1, r1, #3
 800671a:	3d03      	subs	r5, #3
 800671c:	45a8      	cmp	r8, r5
 800671e:	bf38      	it	cc
 8006720:	2100      	movcc	r1, #0
 8006722:	440b      	add	r3, r1
 8006724:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006728:	b199      	cbz	r1, 8006752 <__mdiff+0x11a>
 800672a:	6117      	str	r7, [r2, #16]
 800672c:	e79e      	b.n	800666c <__mdiff+0x34>
 800672e:	46e6      	mov	lr, ip
 8006730:	f854 1b04 	ldr.w	r1, [r4], #4
 8006734:	fa1f fc81 	uxth.w	ip, r1
 8006738:	44f4      	add	ip, lr
 800673a:	0c08      	lsrs	r0, r1, #16
 800673c:	4471      	add	r1, lr
 800673e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006742:	b289      	uxth	r1, r1
 8006744:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006748:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800674c:	f846 1b04 	str.w	r1, [r6], #4
 8006750:	e7dc      	b.n	800670c <__mdiff+0xd4>
 8006752:	3f01      	subs	r7, #1
 8006754:	e7e6      	b.n	8006724 <__mdiff+0xec>
 8006756:	bf00      	nop
 8006758:	0800747e 	.word	0x0800747e
 800675c:	0800748f 	.word	0x0800748f

08006760 <__d2b>:
 8006760:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006764:	2101      	movs	r1, #1
 8006766:	4690      	mov	r8, r2
 8006768:	4699      	mov	r9, r3
 800676a:	9e08      	ldr	r6, [sp, #32]
 800676c:	f7ff fcd6 	bl	800611c <_Balloc>
 8006770:	4604      	mov	r4, r0
 8006772:	b930      	cbnz	r0, 8006782 <__d2b+0x22>
 8006774:	4602      	mov	r2, r0
 8006776:	f240 310f 	movw	r1, #783	@ 0x30f
 800677a:	4b23      	ldr	r3, [pc, #140]	@ (8006808 <__d2b+0xa8>)
 800677c:	4823      	ldr	r0, [pc, #140]	@ (800680c <__d2b+0xac>)
 800677e:	f000 fa7f 	bl	8006c80 <__assert_func>
 8006782:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006786:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800678a:	b10d      	cbz	r5, 8006790 <__d2b+0x30>
 800678c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006790:	9301      	str	r3, [sp, #4]
 8006792:	f1b8 0300 	subs.w	r3, r8, #0
 8006796:	d024      	beq.n	80067e2 <__d2b+0x82>
 8006798:	4668      	mov	r0, sp
 800679a:	9300      	str	r3, [sp, #0]
 800679c:	f7ff fd85 	bl	80062aa <__lo0bits>
 80067a0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80067a4:	b1d8      	cbz	r0, 80067de <__d2b+0x7e>
 80067a6:	f1c0 0320 	rsb	r3, r0, #32
 80067aa:	fa02 f303 	lsl.w	r3, r2, r3
 80067ae:	430b      	orrs	r3, r1
 80067b0:	40c2      	lsrs	r2, r0
 80067b2:	6163      	str	r3, [r4, #20]
 80067b4:	9201      	str	r2, [sp, #4]
 80067b6:	9b01      	ldr	r3, [sp, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	bf0c      	ite	eq
 80067bc:	2201      	moveq	r2, #1
 80067be:	2202      	movne	r2, #2
 80067c0:	61a3      	str	r3, [r4, #24]
 80067c2:	6122      	str	r2, [r4, #16]
 80067c4:	b1ad      	cbz	r5, 80067f2 <__d2b+0x92>
 80067c6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80067ca:	4405      	add	r5, r0
 80067cc:	6035      	str	r5, [r6, #0]
 80067ce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80067d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d4:	6018      	str	r0, [r3, #0]
 80067d6:	4620      	mov	r0, r4
 80067d8:	b002      	add	sp, #8
 80067da:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80067de:	6161      	str	r1, [r4, #20]
 80067e0:	e7e9      	b.n	80067b6 <__d2b+0x56>
 80067e2:	a801      	add	r0, sp, #4
 80067e4:	f7ff fd61 	bl	80062aa <__lo0bits>
 80067e8:	9b01      	ldr	r3, [sp, #4]
 80067ea:	2201      	movs	r2, #1
 80067ec:	6163      	str	r3, [r4, #20]
 80067ee:	3020      	adds	r0, #32
 80067f0:	e7e7      	b.n	80067c2 <__d2b+0x62>
 80067f2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80067f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80067fa:	6030      	str	r0, [r6, #0]
 80067fc:	6918      	ldr	r0, [r3, #16]
 80067fe:	f7ff fd35 	bl	800626c <__hi0bits>
 8006802:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006806:	e7e4      	b.n	80067d2 <__d2b+0x72>
 8006808:	0800747e 	.word	0x0800747e
 800680c:	0800748f 	.word	0x0800748f

08006810 <__ssputs_r>:
 8006810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	461f      	mov	r7, r3
 8006816:	688e      	ldr	r6, [r1, #8]
 8006818:	4682      	mov	sl, r0
 800681a:	42be      	cmp	r6, r7
 800681c:	460c      	mov	r4, r1
 800681e:	4690      	mov	r8, r2
 8006820:	680b      	ldr	r3, [r1, #0]
 8006822:	d82d      	bhi.n	8006880 <__ssputs_r+0x70>
 8006824:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006828:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800682c:	d026      	beq.n	800687c <__ssputs_r+0x6c>
 800682e:	6965      	ldr	r5, [r4, #20]
 8006830:	6909      	ldr	r1, [r1, #16]
 8006832:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006836:	eba3 0901 	sub.w	r9, r3, r1
 800683a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800683e:	1c7b      	adds	r3, r7, #1
 8006840:	444b      	add	r3, r9
 8006842:	106d      	asrs	r5, r5, #1
 8006844:	429d      	cmp	r5, r3
 8006846:	bf38      	it	cc
 8006848:	461d      	movcc	r5, r3
 800684a:	0553      	lsls	r3, r2, #21
 800684c:	d527      	bpl.n	800689e <__ssputs_r+0x8e>
 800684e:	4629      	mov	r1, r5
 8006850:	f7ff fbd8 	bl	8006004 <_malloc_r>
 8006854:	4606      	mov	r6, r0
 8006856:	b360      	cbz	r0, 80068b2 <__ssputs_r+0xa2>
 8006858:	464a      	mov	r2, r9
 800685a:	6921      	ldr	r1, [r4, #16]
 800685c:	f000 fa02 	bl	8006c64 <memcpy>
 8006860:	89a3      	ldrh	r3, [r4, #12]
 8006862:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006866:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800686a:	81a3      	strh	r3, [r4, #12]
 800686c:	6126      	str	r6, [r4, #16]
 800686e:	444e      	add	r6, r9
 8006870:	6026      	str	r6, [r4, #0]
 8006872:	463e      	mov	r6, r7
 8006874:	6165      	str	r5, [r4, #20]
 8006876:	eba5 0509 	sub.w	r5, r5, r9
 800687a:	60a5      	str	r5, [r4, #8]
 800687c:	42be      	cmp	r6, r7
 800687e:	d900      	bls.n	8006882 <__ssputs_r+0x72>
 8006880:	463e      	mov	r6, r7
 8006882:	4632      	mov	r2, r6
 8006884:	4641      	mov	r1, r8
 8006886:	6820      	ldr	r0, [r4, #0]
 8006888:	f000 f9c2 	bl	8006c10 <memmove>
 800688c:	2000      	movs	r0, #0
 800688e:	68a3      	ldr	r3, [r4, #8]
 8006890:	1b9b      	subs	r3, r3, r6
 8006892:	60a3      	str	r3, [r4, #8]
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	4433      	add	r3, r6
 8006898:	6023      	str	r3, [r4, #0]
 800689a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800689e:	462a      	mov	r2, r5
 80068a0:	f000 fa32 	bl	8006d08 <_realloc_r>
 80068a4:	4606      	mov	r6, r0
 80068a6:	2800      	cmp	r0, #0
 80068a8:	d1e0      	bne.n	800686c <__ssputs_r+0x5c>
 80068aa:	4650      	mov	r0, sl
 80068ac:	6921      	ldr	r1, [r4, #16]
 80068ae:	f7ff fb37 	bl	8005f20 <_free_r>
 80068b2:	230c      	movs	r3, #12
 80068b4:	f8ca 3000 	str.w	r3, [sl]
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	f04f 30ff 	mov.w	r0, #4294967295
 80068be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	e7e9      	b.n	800689a <__ssputs_r+0x8a>
	...

080068c8 <_svfiprintf_r>:
 80068c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068cc:	4698      	mov	r8, r3
 80068ce:	898b      	ldrh	r3, [r1, #12]
 80068d0:	4607      	mov	r7, r0
 80068d2:	061b      	lsls	r3, r3, #24
 80068d4:	460d      	mov	r5, r1
 80068d6:	4614      	mov	r4, r2
 80068d8:	b09d      	sub	sp, #116	@ 0x74
 80068da:	d510      	bpl.n	80068fe <_svfiprintf_r+0x36>
 80068dc:	690b      	ldr	r3, [r1, #16]
 80068de:	b973      	cbnz	r3, 80068fe <_svfiprintf_r+0x36>
 80068e0:	2140      	movs	r1, #64	@ 0x40
 80068e2:	f7ff fb8f 	bl	8006004 <_malloc_r>
 80068e6:	6028      	str	r0, [r5, #0]
 80068e8:	6128      	str	r0, [r5, #16]
 80068ea:	b930      	cbnz	r0, 80068fa <_svfiprintf_r+0x32>
 80068ec:	230c      	movs	r3, #12
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	f04f 30ff 	mov.w	r0, #4294967295
 80068f4:	b01d      	add	sp, #116	@ 0x74
 80068f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068fa:	2340      	movs	r3, #64	@ 0x40
 80068fc:	616b      	str	r3, [r5, #20]
 80068fe:	2300      	movs	r3, #0
 8006900:	9309      	str	r3, [sp, #36]	@ 0x24
 8006902:	2320      	movs	r3, #32
 8006904:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006908:	2330      	movs	r3, #48	@ 0x30
 800690a:	f04f 0901 	mov.w	r9, #1
 800690e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006912:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006aac <_svfiprintf_r+0x1e4>
 8006916:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800691a:	4623      	mov	r3, r4
 800691c:	469a      	mov	sl, r3
 800691e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006922:	b10a      	cbz	r2, 8006928 <_svfiprintf_r+0x60>
 8006924:	2a25      	cmp	r2, #37	@ 0x25
 8006926:	d1f9      	bne.n	800691c <_svfiprintf_r+0x54>
 8006928:	ebba 0b04 	subs.w	fp, sl, r4
 800692c:	d00b      	beq.n	8006946 <_svfiprintf_r+0x7e>
 800692e:	465b      	mov	r3, fp
 8006930:	4622      	mov	r2, r4
 8006932:	4629      	mov	r1, r5
 8006934:	4638      	mov	r0, r7
 8006936:	f7ff ff6b 	bl	8006810 <__ssputs_r>
 800693a:	3001      	adds	r0, #1
 800693c:	f000 80a7 	beq.w	8006a8e <_svfiprintf_r+0x1c6>
 8006940:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006942:	445a      	add	r2, fp
 8006944:	9209      	str	r2, [sp, #36]	@ 0x24
 8006946:	f89a 3000 	ldrb.w	r3, [sl]
 800694a:	2b00      	cmp	r3, #0
 800694c:	f000 809f 	beq.w	8006a8e <_svfiprintf_r+0x1c6>
 8006950:	2300      	movs	r3, #0
 8006952:	f04f 32ff 	mov.w	r2, #4294967295
 8006956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800695a:	f10a 0a01 	add.w	sl, sl, #1
 800695e:	9304      	str	r3, [sp, #16]
 8006960:	9307      	str	r3, [sp, #28]
 8006962:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006966:	931a      	str	r3, [sp, #104]	@ 0x68
 8006968:	4654      	mov	r4, sl
 800696a:	2205      	movs	r2, #5
 800696c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006970:	484e      	ldr	r0, [pc, #312]	@ (8006aac <_svfiprintf_r+0x1e4>)
 8006972:	f7fe fc6a 	bl	800524a <memchr>
 8006976:	9a04      	ldr	r2, [sp, #16]
 8006978:	b9d8      	cbnz	r0, 80069b2 <_svfiprintf_r+0xea>
 800697a:	06d0      	lsls	r0, r2, #27
 800697c:	bf44      	itt	mi
 800697e:	2320      	movmi	r3, #32
 8006980:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006984:	0711      	lsls	r1, r2, #28
 8006986:	bf44      	itt	mi
 8006988:	232b      	movmi	r3, #43	@ 0x2b
 800698a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800698e:	f89a 3000 	ldrb.w	r3, [sl]
 8006992:	2b2a      	cmp	r3, #42	@ 0x2a
 8006994:	d015      	beq.n	80069c2 <_svfiprintf_r+0xfa>
 8006996:	4654      	mov	r4, sl
 8006998:	2000      	movs	r0, #0
 800699a:	f04f 0c0a 	mov.w	ip, #10
 800699e:	9a07      	ldr	r2, [sp, #28]
 80069a0:	4621      	mov	r1, r4
 80069a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069a6:	3b30      	subs	r3, #48	@ 0x30
 80069a8:	2b09      	cmp	r3, #9
 80069aa:	d94b      	bls.n	8006a44 <_svfiprintf_r+0x17c>
 80069ac:	b1b0      	cbz	r0, 80069dc <_svfiprintf_r+0x114>
 80069ae:	9207      	str	r2, [sp, #28]
 80069b0:	e014      	b.n	80069dc <_svfiprintf_r+0x114>
 80069b2:	eba0 0308 	sub.w	r3, r0, r8
 80069b6:	fa09 f303 	lsl.w	r3, r9, r3
 80069ba:	4313      	orrs	r3, r2
 80069bc:	46a2      	mov	sl, r4
 80069be:	9304      	str	r3, [sp, #16]
 80069c0:	e7d2      	b.n	8006968 <_svfiprintf_r+0xa0>
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	1d19      	adds	r1, r3, #4
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	9103      	str	r1, [sp, #12]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	bfbb      	ittet	lt
 80069ce:	425b      	neglt	r3, r3
 80069d0:	f042 0202 	orrlt.w	r2, r2, #2
 80069d4:	9307      	strge	r3, [sp, #28]
 80069d6:	9307      	strlt	r3, [sp, #28]
 80069d8:	bfb8      	it	lt
 80069da:	9204      	strlt	r2, [sp, #16]
 80069dc:	7823      	ldrb	r3, [r4, #0]
 80069de:	2b2e      	cmp	r3, #46	@ 0x2e
 80069e0:	d10a      	bne.n	80069f8 <_svfiprintf_r+0x130>
 80069e2:	7863      	ldrb	r3, [r4, #1]
 80069e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80069e6:	d132      	bne.n	8006a4e <_svfiprintf_r+0x186>
 80069e8:	9b03      	ldr	r3, [sp, #12]
 80069ea:	3402      	adds	r4, #2
 80069ec:	1d1a      	adds	r2, r3, #4
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	9203      	str	r2, [sp, #12]
 80069f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80069f6:	9305      	str	r3, [sp, #20]
 80069f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006ab0 <_svfiprintf_r+0x1e8>
 80069fc:	2203      	movs	r2, #3
 80069fe:	4650      	mov	r0, sl
 8006a00:	7821      	ldrb	r1, [r4, #0]
 8006a02:	f7fe fc22 	bl	800524a <memchr>
 8006a06:	b138      	cbz	r0, 8006a18 <_svfiprintf_r+0x150>
 8006a08:	2240      	movs	r2, #64	@ 0x40
 8006a0a:	9b04      	ldr	r3, [sp, #16]
 8006a0c:	eba0 000a 	sub.w	r0, r0, sl
 8006a10:	4082      	lsls	r2, r0
 8006a12:	4313      	orrs	r3, r2
 8006a14:	3401      	adds	r4, #1
 8006a16:	9304      	str	r3, [sp, #16]
 8006a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a1c:	2206      	movs	r2, #6
 8006a1e:	4825      	ldr	r0, [pc, #148]	@ (8006ab4 <_svfiprintf_r+0x1ec>)
 8006a20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006a24:	f7fe fc11 	bl	800524a <memchr>
 8006a28:	2800      	cmp	r0, #0
 8006a2a:	d036      	beq.n	8006a9a <_svfiprintf_r+0x1d2>
 8006a2c:	4b22      	ldr	r3, [pc, #136]	@ (8006ab8 <_svfiprintf_r+0x1f0>)
 8006a2e:	bb1b      	cbnz	r3, 8006a78 <_svfiprintf_r+0x1b0>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	3307      	adds	r3, #7
 8006a34:	f023 0307 	bic.w	r3, r3, #7
 8006a38:	3308      	adds	r3, #8
 8006a3a:	9303      	str	r3, [sp, #12]
 8006a3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a3e:	4433      	add	r3, r6
 8006a40:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a42:	e76a      	b.n	800691a <_svfiprintf_r+0x52>
 8006a44:	460c      	mov	r4, r1
 8006a46:	2001      	movs	r0, #1
 8006a48:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a4c:	e7a8      	b.n	80069a0 <_svfiprintf_r+0xd8>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f04f 0c0a 	mov.w	ip, #10
 8006a54:	4619      	mov	r1, r3
 8006a56:	3401      	adds	r4, #1
 8006a58:	9305      	str	r3, [sp, #20]
 8006a5a:	4620      	mov	r0, r4
 8006a5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a60:	3a30      	subs	r2, #48	@ 0x30
 8006a62:	2a09      	cmp	r2, #9
 8006a64:	d903      	bls.n	8006a6e <_svfiprintf_r+0x1a6>
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0c6      	beq.n	80069f8 <_svfiprintf_r+0x130>
 8006a6a:	9105      	str	r1, [sp, #20]
 8006a6c:	e7c4      	b.n	80069f8 <_svfiprintf_r+0x130>
 8006a6e:	4604      	mov	r4, r0
 8006a70:	2301      	movs	r3, #1
 8006a72:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a76:	e7f0      	b.n	8006a5a <_svfiprintf_r+0x192>
 8006a78:	ab03      	add	r3, sp, #12
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	462a      	mov	r2, r5
 8006a7e:	4638      	mov	r0, r7
 8006a80:	4b0e      	ldr	r3, [pc, #56]	@ (8006abc <_svfiprintf_r+0x1f4>)
 8006a82:	a904      	add	r1, sp, #16
 8006a84:	f7fd fe6a 	bl	800475c <_printf_float>
 8006a88:	1c42      	adds	r2, r0, #1
 8006a8a:	4606      	mov	r6, r0
 8006a8c:	d1d6      	bne.n	8006a3c <_svfiprintf_r+0x174>
 8006a8e:	89ab      	ldrh	r3, [r5, #12]
 8006a90:	065b      	lsls	r3, r3, #25
 8006a92:	f53f af2d 	bmi.w	80068f0 <_svfiprintf_r+0x28>
 8006a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006a98:	e72c      	b.n	80068f4 <_svfiprintf_r+0x2c>
 8006a9a:	ab03      	add	r3, sp, #12
 8006a9c:	9300      	str	r3, [sp, #0]
 8006a9e:	462a      	mov	r2, r5
 8006aa0:	4638      	mov	r0, r7
 8006aa2:	4b06      	ldr	r3, [pc, #24]	@ (8006abc <_svfiprintf_r+0x1f4>)
 8006aa4:	a904      	add	r1, sp, #16
 8006aa6:	f7fe f8f7 	bl	8004c98 <_printf_i>
 8006aaa:	e7ed      	b.n	8006a88 <_svfiprintf_r+0x1c0>
 8006aac:	080074e8 	.word	0x080074e8
 8006ab0:	080074ee 	.word	0x080074ee
 8006ab4:	080074f2 	.word	0x080074f2
 8006ab8:	0800475d 	.word	0x0800475d
 8006abc:	08006811 	.word	0x08006811

08006ac0 <__sflush_r>:
 8006ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	0716      	lsls	r6, r2, #28
 8006ac8:	4605      	mov	r5, r0
 8006aca:	460c      	mov	r4, r1
 8006acc:	d454      	bmi.n	8006b78 <__sflush_r+0xb8>
 8006ace:	684b      	ldr	r3, [r1, #4]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	dc02      	bgt.n	8006ada <__sflush_r+0x1a>
 8006ad4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	dd48      	ble.n	8006b6c <__sflush_r+0xac>
 8006ada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006adc:	2e00      	cmp	r6, #0
 8006ade:	d045      	beq.n	8006b6c <__sflush_r+0xac>
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006ae6:	682f      	ldr	r7, [r5, #0]
 8006ae8:	6a21      	ldr	r1, [r4, #32]
 8006aea:	602b      	str	r3, [r5, #0]
 8006aec:	d030      	beq.n	8006b50 <__sflush_r+0x90>
 8006aee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006af0:	89a3      	ldrh	r3, [r4, #12]
 8006af2:	0759      	lsls	r1, r3, #29
 8006af4:	d505      	bpl.n	8006b02 <__sflush_r+0x42>
 8006af6:	6863      	ldr	r3, [r4, #4]
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006afc:	b10b      	cbz	r3, 8006b02 <__sflush_r+0x42>
 8006afe:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006b00:	1ad2      	subs	r2, r2, r3
 8006b02:	2300      	movs	r3, #0
 8006b04:	4628      	mov	r0, r5
 8006b06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006b08:	6a21      	ldr	r1, [r4, #32]
 8006b0a:	47b0      	blx	r6
 8006b0c:	1c43      	adds	r3, r0, #1
 8006b0e:	89a3      	ldrh	r3, [r4, #12]
 8006b10:	d106      	bne.n	8006b20 <__sflush_r+0x60>
 8006b12:	6829      	ldr	r1, [r5, #0]
 8006b14:	291d      	cmp	r1, #29
 8006b16:	d82b      	bhi.n	8006b70 <__sflush_r+0xb0>
 8006b18:	4a28      	ldr	r2, [pc, #160]	@ (8006bbc <__sflush_r+0xfc>)
 8006b1a:	40ca      	lsrs	r2, r1
 8006b1c:	07d6      	lsls	r6, r2, #31
 8006b1e:	d527      	bpl.n	8006b70 <__sflush_r+0xb0>
 8006b20:	2200      	movs	r2, #0
 8006b22:	6062      	str	r2, [r4, #4]
 8006b24:	6922      	ldr	r2, [r4, #16]
 8006b26:	04d9      	lsls	r1, r3, #19
 8006b28:	6022      	str	r2, [r4, #0]
 8006b2a:	d504      	bpl.n	8006b36 <__sflush_r+0x76>
 8006b2c:	1c42      	adds	r2, r0, #1
 8006b2e:	d101      	bne.n	8006b34 <__sflush_r+0x74>
 8006b30:	682b      	ldr	r3, [r5, #0]
 8006b32:	b903      	cbnz	r3, 8006b36 <__sflush_r+0x76>
 8006b34:	6560      	str	r0, [r4, #84]	@ 0x54
 8006b36:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b38:	602f      	str	r7, [r5, #0]
 8006b3a:	b1b9      	cbz	r1, 8006b6c <__sflush_r+0xac>
 8006b3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b40:	4299      	cmp	r1, r3
 8006b42:	d002      	beq.n	8006b4a <__sflush_r+0x8a>
 8006b44:	4628      	mov	r0, r5
 8006b46:	f7ff f9eb 	bl	8005f20 <_free_r>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b4e:	e00d      	b.n	8006b6c <__sflush_r+0xac>
 8006b50:	2301      	movs	r3, #1
 8006b52:	4628      	mov	r0, r5
 8006b54:	47b0      	blx	r6
 8006b56:	4602      	mov	r2, r0
 8006b58:	1c50      	adds	r0, r2, #1
 8006b5a:	d1c9      	bne.n	8006af0 <__sflush_r+0x30>
 8006b5c:	682b      	ldr	r3, [r5, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d0c6      	beq.n	8006af0 <__sflush_r+0x30>
 8006b62:	2b1d      	cmp	r3, #29
 8006b64:	d001      	beq.n	8006b6a <__sflush_r+0xaa>
 8006b66:	2b16      	cmp	r3, #22
 8006b68:	d11d      	bne.n	8006ba6 <__sflush_r+0xe6>
 8006b6a:	602f      	str	r7, [r5, #0]
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	e021      	b.n	8006bb4 <__sflush_r+0xf4>
 8006b70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b74:	b21b      	sxth	r3, r3
 8006b76:	e01a      	b.n	8006bae <__sflush_r+0xee>
 8006b78:	690f      	ldr	r7, [r1, #16]
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	d0f6      	beq.n	8006b6c <__sflush_r+0xac>
 8006b7e:	0793      	lsls	r3, r2, #30
 8006b80:	bf18      	it	ne
 8006b82:	2300      	movne	r3, #0
 8006b84:	680e      	ldr	r6, [r1, #0]
 8006b86:	bf08      	it	eq
 8006b88:	694b      	ldreq	r3, [r1, #20]
 8006b8a:	1bf6      	subs	r6, r6, r7
 8006b8c:	600f      	str	r7, [r1, #0]
 8006b8e:	608b      	str	r3, [r1, #8]
 8006b90:	2e00      	cmp	r6, #0
 8006b92:	ddeb      	ble.n	8006b6c <__sflush_r+0xac>
 8006b94:	4633      	mov	r3, r6
 8006b96:	463a      	mov	r2, r7
 8006b98:	4628      	mov	r0, r5
 8006b9a:	6a21      	ldr	r1, [r4, #32]
 8006b9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006ba0:	47e0      	blx	ip
 8006ba2:	2800      	cmp	r0, #0
 8006ba4:	dc07      	bgt.n	8006bb6 <__sflush_r+0xf6>
 8006ba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006baa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bae:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bb6:	4407      	add	r7, r0
 8006bb8:	1a36      	subs	r6, r6, r0
 8006bba:	e7e9      	b.n	8006b90 <__sflush_r+0xd0>
 8006bbc:	20400001 	.word	0x20400001

08006bc0 <_fflush_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	690b      	ldr	r3, [r1, #16]
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	460c      	mov	r4, r1
 8006bc8:	b913      	cbnz	r3, 8006bd0 <_fflush_r+0x10>
 8006bca:	2500      	movs	r5, #0
 8006bcc:	4628      	mov	r0, r5
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	b118      	cbz	r0, 8006bda <_fflush_r+0x1a>
 8006bd2:	6a03      	ldr	r3, [r0, #32]
 8006bd4:	b90b      	cbnz	r3, 8006bda <_fflush_r+0x1a>
 8006bd6:	f7fe fa09 	bl	8004fec <__sinit>
 8006bda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0f3      	beq.n	8006bca <_fflush_r+0xa>
 8006be2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006be4:	07d0      	lsls	r0, r2, #31
 8006be6:	d404      	bmi.n	8006bf2 <_fflush_r+0x32>
 8006be8:	0599      	lsls	r1, r3, #22
 8006bea:	d402      	bmi.n	8006bf2 <_fflush_r+0x32>
 8006bec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bee:	f7fe fb2a 	bl	8005246 <__retarget_lock_acquire_recursive>
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	4621      	mov	r1, r4
 8006bf6:	f7ff ff63 	bl	8006ac0 <__sflush_r>
 8006bfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bfc:	4605      	mov	r5, r0
 8006bfe:	07da      	lsls	r2, r3, #31
 8006c00:	d4e4      	bmi.n	8006bcc <_fflush_r+0xc>
 8006c02:	89a3      	ldrh	r3, [r4, #12]
 8006c04:	059b      	lsls	r3, r3, #22
 8006c06:	d4e1      	bmi.n	8006bcc <_fflush_r+0xc>
 8006c08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006c0a:	f7fe fb1d 	bl	8005248 <__retarget_lock_release_recursive>
 8006c0e:	e7dd      	b.n	8006bcc <_fflush_r+0xc>

08006c10 <memmove>:
 8006c10:	4288      	cmp	r0, r1
 8006c12:	b510      	push	{r4, lr}
 8006c14:	eb01 0402 	add.w	r4, r1, r2
 8006c18:	d902      	bls.n	8006c20 <memmove+0x10>
 8006c1a:	4284      	cmp	r4, r0
 8006c1c:	4623      	mov	r3, r4
 8006c1e:	d807      	bhi.n	8006c30 <memmove+0x20>
 8006c20:	1e43      	subs	r3, r0, #1
 8006c22:	42a1      	cmp	r1, r4
 8006c24:	d008      	beq.n	8006c38 <memmove+0x28>
 8006c26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c2e:	e7f8      	b.n	8006c22 <memmove+0x12>
 8006c30:	4601      	mov	r1, r0
 8006c32:	4402      	add	r2, r0
 8006c34:	428a      	cmp	r2, r1
 8006c36:	d100      	bne.n	8006c3a <memmove+0x2a>
 8006c38:	bd10      	pop	{r4, pc}
 8006c3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c42:	e7f7      	b.n	8006c34 <memmove+0x24>

08006c44 <_sbrk_r>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	2300      	movs	r3, #0
 8006c48:	4d05      	ldr	r5, [pc, #20]	@ (8006c60 <_sbrk_r+0x1c>)
 8006c4a:	4604      	mov	r4, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	602b      	str	r3, [r5, #0]
 8006c50:	f7fa fefa 	bl	8001a48 <_sbrk>
 8006c54:	1c43      	adds	r3, r0, #1
 8006c56:	d102      	bne.n	8006c5e <_sbrk_r+0x1a>
 8006c58:	682b      	ldr	r3, [r5, #0]
 8006c5a:	b103      	cbz	r3, 8006c5e <_sbrk_r+0x1a>
 8006c5c:	6023      	str	r3, [r4, #0]
 8006c5e:	bd38      	pop	{r3, r4, r5, pc}
 8006c60:	20000404 	.word	0x20000404

08006c64 <memcpy>:
 8006c64:	440a      	add	r2, r1
 8006c66:	4291      	cmp	r1, r2
 8006c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c6c:	d100      	bne.n	8006c70 <memcpy+0xc>
 8006c6e:	4770      	bx	lr
 8006c70:	b510      	push	{r4, lr}
 8006c72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c76:	4291      	cmp	r1, r2
 8006c78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c7c:	d1f9      	bne.n	8006c72 <memcpy+0xe>
 8006c7e:	bd10      	pop	{r4, pc}

08006c80 <__assert_func>:
 8006c80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c82:	4614      	mov	r4, r2
 8006c84:	461a      	mov	r2, r3
 8006c86:	4b09      	ldr	r3, [pc, #36]	@ (8006cac <__assert_func+0x2c>)
 8006c88:	4605      	mov	r5, r0
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68d8      	ldr	r0, [r3, #12]
 8006c8e:	b14c      	cbz	r4, 8006ca4 <__assert_func+0x24>
 8006c90:	4b07      	ldr	r3, [pc, #28]	@ (8006cb0 <__assert_func+0x30>)
 8006c92:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c96:	9100      	str	r1, [sp, #0]
 8006c98:	462b      	mov	r3, r5
 8006c9a:	4906      	ldr	r1, [pc, #24]	@ (8006cb4 <__assert_func+0x34>)
 8006c9c:	f000 f870 	bl	8006d80 <fiprintf>
 8006ca0:	f000 f880 	bl	8006da4 <abort>
 8006ca4:	4b04      	ldr	r3, [pc, #16]	@ (8006cb8 <__assert_func+0x38>)
 8006ca6:	461c      	mov	r4, r3
 8006ca8:	e7f3      	b.n	8006c92 <__assert_func+0x12>
 8006caa:	bf00      	nop
 8006cac:	2000001c 	.word	0x2000001c
 8006cb0:	08007503 	.word	0x08007503
 8006cb4:	08007510 	.word	0x08007510
 8006cb8:	0800753e 	.word	0x0800753e

08006cbc <_calloc_r>:
 8006cbc:	b570      	push	{r4, r5, r6, lr}
 8006cbe:	fba1 5402 	umull	r5, r4, r1, r2
 8006cc2:	b934      	cbnz	r4, 8006cd2 <_calloc_r+0x16>
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	f7ff f99d 	bl	8006004 <_malloc_r>
 8006cca:	4606      	mov	r6, r0
 8006ccc:	b928      	cbnz	r0, 8006cda <_calloc_r+0x1e>
 8006cce:	4630      	mov	r0, r6
 8006cd0:	bd70      	pop	{r4, r5, r6, pc}
 8006cd2:	220c      	movs	r2, #12
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	6002      	str	r2, [r0, #0]
 8006cd8:	e7f9      	b.n	8006cce <_calloc_r+0x12>
 8006cda:	462a      	mov	r2, r5
 8006cdc:	4621      	mov	r1, r4
 8006cde:	f7fe fa34 	bl	800514a <memset>
 8006ce2:	e7f4      	b.n	8006cce <_calloc_r+0x12>

08006ce4 <__ascii_mbtowc>:
 8006ce4:	b082      	sub	sp, #8
 8006ce6:	b901      	cbnz	r1, 8006cea <__ascii_mbtowc+0x6>
 8006ce8:	a901      	add	r1, sp, #4
 8006cea:	b142      	cbz	r2, 8006cfe <__ascii_mbtowc+0x1a>
 8006cec:	b14b      	cbz	r3, 8006d02 <__ascii_mbtowc+0x1e>
 8006cee:	7813      	ldrb	r3, [r2, #0]
 8006cf0:	600b      	str	r3, [r1, #0]
 8006cf2:	7812      	ldrb	r2, [r2, #0]
 8006cf4:	1e10      	subs	r0, r2, #0
 8006cf6:	bf18      	it	ne
 8006cf8:	2001      	movne	r0, #1
 8006cfa:	b002      	add	sp, #8
 8006cfc:	4770      	bx	lr
 8006cfe:	4610      	mov	r0, r2
 8006d00:	e7fb      	b.n	8006cfa <__ascii_mbtowc+0x16>
 8006d02:	f06f 0001 	mvn.w	r0, #1
 8006d06:	e7f8      	b.n	8006cfa <__ascii_mbtowc+0x16>

08006d08 <_realloc_r>:
 8006d08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	4614      	mov	r4, r2
 8006d10:	460d      	mov	r5, r1
 8006d12:	b921      	cbnz	r1, 8006d1e <_realloc_r+0x16>
 8006d14:	4611      	mov	r1, r2
 8006d16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1a:	f7ff b973 	b.w	8006004 <_malloc_r>
 8006d1e:	b92a      	cbnz	r2, 8006d2c <_realloc_r+0x24>
 8006d20:	f7ff f8fe 	bl	8005f20 <_free_r>
 8006d24:	4625      	mov	r5, r4
 8006d26:	4628      	mov	r0, r5
 8006d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d2c:	f000 f841 	bl	8006db2 <_malloc_usable_size_r>
 8006d30:	4284      	cmp	r4, r0
 8006d32:	4606      	mov	r6, r0
 8006d34:	d802      	bhi.n	8006d3c <_realloc_r+0x34>
 8006d36:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d3a:	d8f4      	bhi.n	8006d26 <_realloc_r+0x1e>
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	4638      	mov	r0, r7
 8006d40:	f7ff f960 	bl	8006004 <_malloc_r>
 8006d44:	4680      	mov	r8, r0
 8006d46:	b908      	cbnz	r0, 8006d4c <_realloc_r+0x44>
 8006d48:	4645      	mov	r5, r8
 8006d4a:	e7ec      	b.n	8006d26 <_realloc_r+0x1e>
 8006d4c:	42b4      	cmp	r4, r6
 8006d4e:	4622      	mov	r2, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	bf28      	it	cs
 8006d54:	4632      	movcs	r2, r6
 8006d56:	f7ff ff85 	bl	8006c64 <memcpy>
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7ff f8df 	bl	8005f20 <_free_r>
 8006d62:	e7f1      	b.n	8006d48 <_realloc_r+0x40>

08006d64 <__ascii_wctomb>:
 8006d64:	4603      	mov	r3, r0
 8006d66:	4608      	mov	r0, r1
 8006d68:	b141      	cbz	r1, 8006d7c <__ascii_wctomb+0x18>
 8006d6a:	2aff      	cmp	r2, #255	@ 0xff
 8006d6c:	d904      	bls.n	8006d78 <__ascii_wctomb+0x14>
 8006d6e:	228a      	movs	r2, #138	@ 0x8a
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	4770      	bx	lr
 8006d78:	2001      	movs	r0, #1
 8006d7a:	700a      	strb	r2, [r1, #0]
 8006d7c:	4770      	bx	lr
	...

08006d80 <fiprintf>:
 8006d80:	b40e      	push	{r1, r2, r3}
 8006d82:	b503      	push	{r0, r1, lr}
 8006d84:	4601      	mov	r1, r0
 8006d86:	ab03      	add	r3, sp, #12
 8006d88:	4805      	ldr	r0, [pc, #20]	@ (8006da0 <fiprintf+0x20>)
 8006d8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d8e:	6800      	ldr	r0, [r0, #0]
 8006d90:	9301      	str	r3, [sp, #4]
 8006d92:	f000 f83d 	bl	8006e10 <_vfiprintf_r>
 8006d96:	b002      	add	sp, #8
 8006d98:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d9c:	b003      	add	sp, #12
 8006d9e:	4770      	bx	lr
 8006da0:	2000001c 	.word	0x2000001c

08006da4 <abort>:
 8006da4:	2006      	movs	r0, #6
 8006da6:	b508      	push	{r3, lr}
 8006da8:	f000 fa06 	bl	80071b8 <raise>
 8006dac:	2001      	movs	r0, #1
 8006dae:	f7fa fdd6 	bl	800195e <_exit>

08006db2 <_malloc_usable_size_r>:
 8006db2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006db6:	1f18      	subs	r0, r3, #4
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	bfbc      	itt	lt
 8006dbc:	580b      	ldrlt	r3, [r1, r0]
 8006dbe:	18c0      	addlt	r0, r0, r3
 8006dc0:	4770      	bx	lr

08006dc2 <__sfputc_r>:
 8006dc2:	6893      	ldr	r3, [r2, #8]
 8006dc4:	b410      	push	{r4}
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	6093      	str	r3, [r2, #8]
 8006dcc:	da07      	bge.n	8006dde <__sfputc_r+0x1c>
 8006dce:	6994      	ldr	r4, [r2, #24]
 8006dd0:	42a3      	cmp	r3, r4
 8006dd2:	db01      	blt.n	8006dd8 <__sfputc_r+0x16>
 8006dd4:	290a      	cmp	r1, #10
 8006dd6:	d102      	bne.n	8006dde <__sfputc_r+0x1c>
 8006dd8:	bc10      	pop	{r4}
 8006dda:	f000 b931 	b.w	8007040 <__swbuf_r>
 8006dde:	6813      	ldr	r3, [r2, #0]
 8006de0:	1c58      	adds	r0, r3, #1
 8006de2:	6010      	str	r0, [r2, #0]
 8006de4:	7019      	strb	r1, [r3, #0]
 8006de6:	4608      	mov	r0, r1
 8006de8:	bc10      	pop	{r4}
 8006dea:	4770      	bx	lr

08006dec <__sfputs_r>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	4606      	mov	r6, r0
 8006df0:	460f      	mov	r7, r1
 8006df2:	4614      	mov	r4, r2
 8006df4:	18d5      	adds	r5, r2, r3
 8006df6:	42ac      	cmp	r4, r5
 8006df8:	d101      	bne.n	8006dfe <__sfputs_r+0x12>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e007      	b.n	8006e0e <__sfputs_r+0x22>
 8006dfe:	463a      	mov	r2, r7
 8006e00:	4630      	mov	r0, r6
 8006e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e06:	f7ff ffdc 	bl	8006dc2 <__sfputc_r>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	d1f3      	bne.n	8006df6 <__sfputs_r+0xa>
 8006e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006e10 <_vfiprintf_r>:
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e14:	460d      	mov	r5, r1
 8006e16:	4614      	mov	r4, r2
 8006e18:	4698      	mov	r8, r3
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	b09d      	sub	sp, #116	@ 0x74
 8006e1e:	b118      	cbz	r0, 8006e28 <_vfiprintf_r+0x18>
 8006e20:	6a03      	ldr	r3, [r0, #32]
 8006e22:	b90b      	cbnz	r3, 8006e28 <_vfiprintf_r+0x18>
 8006e24:	f7fe f8e2 	bl	8004fec <__sinit>
 8006e28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_vfiprintf_r+0x2a>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_vfiprintf_r+0x2a>
 8006e34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e36:	f7fe fa06 	bl	8005246 <__retarget_lock_acquire_recursive>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	071b      	lsls	r3, r3, #28
 8006e3e:	d501      	bpl.n	8006e44 <_vfiprintf_r+0x34>
 8006e40:	692b      	ldr	r3, [r5, #16]
 8006e42:	b99b      	cbnz	r3, 8006e6c <_vfiprintf_r+0x5c>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 f938 	bl	80070bc <__swsetup_r>
 8006e4c:	b170      	cbz	r0, 8006e6c <_vfiprintf_r+0x5c>
 8006e4e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e50:	07dc      	lsls	r4, r3, #31
 8006e52:	d504      	bpl.n	8006e5e <_vfiprintf_r+0x4e>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b01d      	add	sp, #116	@ 0x74
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	89ab      	ldrh	r3, [r5, #12]
 8006e60:	0598      	lsls	r0, r3, #22
 8006e62:	d4f7      	bmi.n	8006e54 <_vfiprintf_r+0x44>
 8006e64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e66:	f7fe f9ef 	bl	8005248 <__retarget_lock_release_recursive>
 8006e6a:	e7f3      	b.n	8006e54 <_vfiprintf_r+0x44>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e70:	2320      	movs	r3, #32
 8006e72:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006e76:	2330      	movs	r3, #48	@ 0x30
 8006e78:	f04f 0901 	mov.w	r9, #1
 8006e7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e80:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800702c <_vfiprintf_r+0x21c>
 8006e84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006e88:	4623      	mov	r3, r4
 8006e8a:	469a      	mov	sl, r3
 8006e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e90:	b10a      	cbz	r2, 8006e96 <_vfiprintf_r+0x86>
 8006e92:	2a25      	cmp	r2, #37	@ 0x25
 8006e94:	d1f9      	bne.n	8006e8a <_vfiprintf_r+0x7a>
 8006e96:	ebba 0b04 	subs.w	fp, sl, r4
 8006e9a:	d00b      	beq.n	8006eb4 <_vfiprintf_r+0xa4>
 8006e9c:	465b      	mov	r3, fp
 8006e9e:	4622      	mov	r2, r4
 8006ea0:	4629      	mov	r1, r5
 8006ea2:	4630      	mov	r0, r6
 8006ea4:	f7ff ffa2 	bl	8006dec <__sfputs_r>
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	f000 80a7 	beq.w	8006ffc <_vfiprintf_r+0x1ec>
 8006eae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006eb0:	445a      	add	r2, fp
 8006eb2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	f000 809f 	beq.w	8006ffc <_vfiprintf_r+0x1ec>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8006ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ec8:	f10a 0a01 	add.w	sl, sl, #1
 8006ecc:	9304      	str	r3, [sp, #16]
 8006ece:	9307      	str	r3, [sp, #28]
 8006ed0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ed4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ed6:	4654      	mov	r4, sl
 8006ed8:	2205      	movs	r2, #5
 8006eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ede:	4853      	ldr	r0, [pc, #332]	@ (800702c <_vfiprintf_r+0x21c>)
 8006ee0:	f7fe f9b3 	bl	800524a <memchr>
 8006ee4:	9a04      	ldr	r2, [sp, #16]
 8006ee6:	b9d8      	cbnz	r0, 8006f20 <_vfiprintf_r+0x110>
 8006ee8:	06d1      	lsls	r1, r2, #27
 8006eea:	bf44      	itt	mi
 8006eec:	2320      	movmi	r3, #32
 8006eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006ef2:	0713      	lsls	r3, r2, #28
 8006ef4:	bf44      	itt	mi
 8006ef6:	232b      	movmi	r3, #43	@ 0x2b
 8006ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006efc:	f89a 3000 	ldrb.w	r3, [sl]
 8006f00:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f02:	d015      	beq.n	8006f30 <_vfiprintf_r+0x120>
 8006f04:	4654      	mov	r4, sl
 8006f06:	2000      	movs	r0, #0
 8006f08:	f04f 0c0a 	mov.w	ip, #10
 8006f0c:	9a07      	ldr	r2, [sp, #28]
 8006f0e:	4621      	mov	r1, r4
 8006f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f14:	3b30      	subs	r3, #48	@ 0x30
 8006f16:	2b09      	cmp	r3, #9
 8006f18:	d94b      	bls.n	8006fb2 <_vfiprintf_r+0x1a2>
 8006f1a:	b1b0      	cbz	r0, 8006f4a <_vfiprintf_r+0x13a>
 8006f1c:	9207      	str	r2, [sp, #28]
 8006f1e:	e014      	b.n	8006f4a <_vfiprintf_r+0x13a>
 8006f20:	eba0 0308 	sub.w	r3, r0, r8
 8006f24:	fa09 f303 	lsl.w	r3, r9, r3
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	46a2      	mov	sl, r4
 8006f2c:	9304      	str	r3, [sp, #16]
 8006f2e:	e7d2      	b.n	8006ed6 <_vfiprintf_r+0xc6>
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	1d19      	adds	r1, r3, #4
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	9103      	str	r1, [sp, #12]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	bfbb      	ittet	lt
 8006f3c:	425b      	neglt	r3, r3
 8006f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f42:	9307      	strge	r3, [sp, #28]
 8006f44:	9307      	strlt	r3, [sp, #28]
 8006f46:	bfb8      	it	lt
 8006f48:	9204      	strlt	r2, [sp, #16]
 8006f4a:	7823      	ldrb	r3, [r4, #0]
 8006f4c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f4e:	d10a      	bne.n	8006f66 <_vfiprintf_r+0x156>
 8006f50:	7863      	ldrb	r3, [r4, #1]
 8006f52:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f54:	d132      	bne.n	8006fbc <_vfiprintf_r+0x1ac>
 8006f56:	9b03      	ldr	r3, [sp, #12]
 8006f58:	3402      	adds	r4, #2
 8006f5a:	1d1a      	adds	r2, r3, #4
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	9203      	str	r2, [sp, #12]
 8006f60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f64:	9305      	str	r3, [sp, #20]
 8006f66:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007030 <_vfiprintf_r+0x220>
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	4650      	mov	r0, sl
 8006f6e:	7821      	ldrb	r1, [r4, #0]
 8006f70:	f7fe f96b 	bl	800524a <memchr>
 8006f74:	b138      	cbz	r0, 8006f86 <_vfiprintf_r+0x176>
 8006f76:	2240      	movs	r2, #64	@ 0x40
 8006f78:	9b04      	ldr	r3, [sp, #16]
 8006f7a:	eba0 000a 	sub.w	r0, r0, sl
 8006f7e:	4082      	lsls	r2, r0
 8006f80:	4313      	orrs	r3, r2
 8006f82:	3401      	adds	r4, #1
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	4829      	ldr	r0, [pc, #164]	@ (8007034 <_vfiprintf_r+0x224>)
 8006f8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006f92:	f7fe f95a 	bl	800524a <memchr>
 8006f96:	2800      	cmp	r0, #0
 8006f98:	d03f      	beq.n	800701a <_vfiprintf_r+0x20a>
 8006f9a:	4b27      	ldr	r3, [pc, #156]	@ (8007038 <_vfiprintf_r+0x228>)
 8006f9c:	bb1b      	cbnz	r3, 8006fe6 <_vfiprintf_r+0x1d6>
 8006f9e:	9b03      	ldr	r3, [sp, #12]
 8006fa0:	3307      	adds	r3, #7
 8006fa2:	f023 0307 	bic.w	r3, r3, #7
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	9303      	str	r3, [sp, #12]
 8006faa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fac:	443b      	add	r3, r7
 8006fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fb0:	e76a      	b.n	8006e88 <_vfiprintf_r+0x78>
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fba:	e7a8      	b.n	8006f0e <_vfiprintf_r+0xfe>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f04f 0c0a 	mov.w	ip, #10
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	3401      	adds	r4, #1
 8006fc6:	9305      	str	r3, [sp, #20]
 8006fc8:	4620      	mov	r0, r4
 8006fca:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fce:	3a30      	subs	r2, #48	@ 0x30
 8006fd0:	2a09      	cmp	r2, #9
 8006fd2:	d903      	bls.n	8006fdc <_vfiprintf_r+0x1cc>
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d0c6      	beq.n	8006f66 <_vfiprintf_r+0x156>
 8006fd8:	9105      	str	r1, [sp, #20]
 8006fda:	e7c4      	b.n	8006f66 <_vfiprintf_r+0x156>
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2301      	movs	r3, #1
 8006fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fe4:	e7f0      	b.n	8006fc8 <_vfiprintf_r+0x1b8>
 8006fe6:	ab03      	add	r3, sp, #12
 8006fe8:	9300      	str	r3, [sp, #0]
 8006fea:	462a      	mov	r2, r5
 8006fec:	4630      	mov	r0, r6
 8006fee:	4b13      	ldr	r3, [pc, #76]	@ (800703c <_vfiprintf_r+0x22c>)
 8006ff0:	a904      	add	r1, sp, #16
 8006ff2:	f7fd fbb3 	bl	800475c <_printf_float>
 8006ff6:	4607      	mov	r7, r0
 8006ff8:	1c78      	adds	r0, r7, #1
 8006ffa:	d1d6      	bne.n	8006faa <_vfiprintf_r+0x19a>
 8006ffc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006ffe:	07d9      	lsls	r1, r3, #31
 8007000:	d405      	bmi.n	800700e <_vfiprintf_r+0x1fe>
 8007002:	89ab      	ldrh	r3, [r5, #12]
 8007004:	059a      	lsls	r2, r3, #22
 8007006:	d402      	bmi.n	800700e <_vfiprintf_r+0x1fe>
 8007008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800700a:	f7fe f91d 	bl	8005248 <__retarget_lock_release_recursive>
 800700e:	89ab      	ldrh	r3, [r5, #12]
 8007010:	065b      	lsls	r3, r3, #25
 8007012:	f53f af1f 	bmi.w	8006e54 <_vfiprintf_r+0x44>
 8007016:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007018:	e71e      	b.n	8006e58 <_vfiprintf_r+0x48>
 800701a:	ab03      	add	r3, sp, #12
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	462a      	mov	r2, r5
 8007020:	4630      	mov	r0, r6
 8007022:	4b06      	ldr	r3, [pc, #24]	@ (800703c <_vfiprintf_r+0x22c>)
 8007024:	a904      	add	r1, sp, #16
 8007026:	f7fd fe37 	bl	8004c98 <_printf_i>
 800702a:	e7e4      	b.n	8006ff6 <_vfiprintf_r+0x1e6>
 800702c:	080074e8 	.word	0x080074e8
 8007030:	080074ee 	.word	0x080074ee
 8007034:	080074f2 	.word	0x080074f2
 8007038:	0800475d 	.word	0x0800475d
 800703c:	08006ded 	.word	0x08006ded

08007040 <__swbuf_r>:
 8007040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007042:	460e      	mov	r6, r1
 8007044:	4614      	mov	r4, r2
 8007046:	4605      	mov	r5, r0
 8007048:	b118      	cbz	r0, 8007052 <__swbuf_r+0x12>
 800704a:	6a03      	ldr	r3, [r0, #32]
 800704c:	b90b      	cbnz	r3, 8007052 <__swbuf_r+0x12>
 800704e:	f7fd ffcd 	bl	8004fec <__sinit>
 8007052:	69a3      	ldr	r3, [r4, #24]
 8007054:	60a3      	str	r3, [r4, #8]
 8007056:	89a3      	ldrh	r3, [r4, #12]
 8007058:	071a      	lsls	r2, r3, #28
 800705a:	d501      	bpl.n	8007060 <__swbuf_r+0x20>
 800705c:	6923      	ldr	r3, [r4, #16]
 800705e:	b943      	cbnz	r3, 8007072 <__swbuf_r+0x32>
 8007060:	4621      	mov	r1, r4
 8007062:	4628      	mov	r0, r5
 8007064:	f000 f82a 	bl	80070bc <__swsetup_r>
 8007068:	b118      	cbz	r0, 8007072 <__swbuf_r+0x32>
 800706a:	f04f 37ff 	mov.w	r7, #4294967295
 800706e:	4638      	mov	r0, r7
 8007070:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	6922      	ldr	r2, [r4, #16]
 8007076:	b2f6      	uxtb	r6, r6
 8007078:	1a98      	subs	r0, r3, r2
 800707a:	6963      	ldr	r3, [r4, #20]
 800707c:	4637      	mov	r7, r6
 800707e:	4283      	cmp	r3, r0
 8007080:	dc05      	bgt.n	800708e <__swbuf_r+0x4e>
 8007082:	4621      	mov	r1, r4
 8007084:	4628      	mov	r0, r5
 8007086:	f7ff fd9b 	bl	8006bc0 <_fflush_r>
 800708a:	2800      	cmp	r0, #0
 800708c:	d1ed      	bne.n	800706a <__swbuf_r+0x2a>
 800708e:	68a3      	ldr	r3, [r4, #8]
 8007090:	3b01      	subs	r3, #1
 8007092:	60a3      	str	r3, [r4, #8]
 8007094:	6823      	ldr	r3, [r4, #0]
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	6022      	str	r2, [r4, #0]
 800709a:	701e      	strb	r6, [r3, #0]
 800709c:	6962      	ldr	r2, [r4, #20]
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	429a      	cmp	r2, r3
 80070a2:	d004      	beq.n	80070ae <__swbuf_r+0x6e>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	07db      	lsls	r3, r3, #31
 80070a8:	d5e1      	bpl.n	800706e <__swbuf_r+0x2e>
 80070aa:	2e0a      	cmp	r6, #10
 80070ac:	d1df      	bne.n	800706e <__swbuf_r+0x2e>
 80070ae:	4621      	mov	r1, r4
 80070b0:	4628      	mov	r0, r5
 80070b2:	f7ff fd85 	bl	8006bc0 <_fflush_r>
 80070b6:	2800      	cmp	r0, #0
 80070b8:	d0d9      	beq.n	800706e <__swbuf_r+0x2e>
 80070ba:	e7d6      	b.n	800706a <__swbuf_r+0x2a>

080070bc <__swsetup_r>:
 80070bc:	b538      	push	{r3, r4, r5, lr}
 80070be:	4b29      	ldr	r3, [pc, #164]	@ (8007164 <__swsetup_r+0xa8>)
 80070c0:	4605      	mov	r5, r0
 80070c2:	6818      	ldr	r0, [r3, #0]
 80070c4:	460c      	mov	r4, r1
 80070c6:	b118      	cbz	r0, 80070d0 <__swsetup_r+0x14>
 80070c8:	6a03      	ldr	r3, [r0, #32]
 80070ca:	b90b      	cbnz	r3, 80070d0 <__swsetup_r+0x14>
 80070cc:	f7fd ff8e 	bl	8004fec <__sinit>
 80070d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070d4:	0719      	lsls	r1, r3, #28
 80070d6:	d422      	bmi.n	800711e <__swsetup_r+0x62>
 80070d8:	06da      	lsls	r2, r3, #27
 80070da:	d407      	bmi.n	80070ec <__swsetup_r+0x30>
 80070dc:	2209      	movs	r2, #9
 80070de:	602a      	str	r2, [r5, #0]
 80070e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295
 80070e8:	81a3      	strh	r3, [r4, #12]
 80070ea:	e033      	b.n	8007154 <__swsetup_r+0x98>
 80070ec:	0758      	lsls	r0, r3, #29
 80070ee:	d512      	bpl.n	8007116 <__swsetup_r+0x5a>
 80070f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80070f2:	b141      	cbz	r1, 8007106 <__swsetup_r+0x4a>
 80070f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80070f8:	4299      	cmp	r1, r3
 80070fa:	d002      	beq.n	8007102 <__swsetup_r+0x46>
 80070fc:	4628      	mov	r0, r5
 80070fe:	f7fe ff0f 	bl	8005f20 <_free_r>
 8007102:	2300      	movs	r3, #0
 8007104:	6363      	str	r3, [r4, #52]	@ 0x34
 8007106:	89a3      	ldrh	r3, [r4, #12]
 8007108:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800710c:	81a3      	strh	r3, [r4, #12]
 800710e:	2300      	movs	r3, #0
 8007110:	6063      	str	r3, [r4, #4]
 8007112:	6923      	ldr	r3, [r4, #16]
 8007114:	6023      	str	r3, [r4, #0]
 8007116:	89a3      	ldrh	r3, [r4, #12]
 8007118:	f043 0308 	orr.w	r3, r3, #8
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	b94b      	cbnz	r3, 8007136 <__swsetup_r+0x7a>
 8007122:	89a3      	ldrh	r3, [r4, #12]
 8007124:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007128:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800712c:	d003      	beq.n	8007136 <__swsetup_r+0x7a>
 800712e:	4621      	mov	r1, r4
 8007130:	4628      	mov	r0, r5
 8007132:	f000 f882 	bl	800723a <__smakebuf_r>
 8007136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800713a:	f013 0201 	ands.w	r2, r3, #1
 800713e:	d00a      	beq.n	8007156 <__swsetup_r+0x9a>
 8007140:	2200      	movs	r2, #0
 8007142:	60a2      	str	r2, [r4, #8]
 8007144:	6962      	ldr	r2, [r4, #20]
 8007146:	4252      	negs	r2, r2
 8007148:	61a2      	str	r2, [r4, #24]
 800714a:	6922      	ldr	r2, [r4, #16]
 800714c:	b942      	cbnz	r2, 8007160 <__swsetup_r+0xa4>
 800714e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007152:	d1c5      	bne.n	80070e0 <__swsetup_r+0x24>
 8007154:	bd38      	pop	{r3, r4, r5, pc}
 8007156:	0799      	lsls	r1, r3, #30
 8007158:	bf58      	it	pl
 800715a:	6962      	ldrpl	r2, [r4, #20]
 800715c:	60a2      	str	r2, [r4, #8]
 800715e:	e7f4      	b.n	800714a <__swsetup_r+0x8e>
 8007160:	2000      	movs	r0, #0
 8007162:	e7f7      	b.n	8007154 <__swsetup_r+0x98>
 8007164:	2000001c 	.word	0x2000001c

08007168 <_raise_r>:
 8007168:	291f      	cmp	r1, #31
 800716a:	b538      	push	{r3, r4, r5, lr}
 800716c:	4605      	mov	r5, r0
 800716e:	460c      	mov	r4, r1
 8007170:	d904      	bls.n	800717c <_raise_r+0x14>
 8007172:	2316      	movs	r3, #22
 8007174:	6003      	str	r3, [r0, #0]
 8007176:	f04f 30ff 	mov.w	r0, #4294967295
 800717a:	bd38      	pop	{r3, r4, r5, pc}
 800717c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800717e:	b112      	cbz	r2, 8007186 <_raise_r+0x1e>
 8007180:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007184:	b94b      	cbnz	r3, 800719a <_raise_r+0x32>
 8007186:	4628      	mov	r0, r5
 8007188:	f000 f830 	bl	80071ec <_getpid_r>
 800718c:	4622      	mov	r2, r4
 800718e:	4601      	mov	r1, r0
 8007190:	4628      	mov	r0, r5
 8007192:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007196:	f000 b817 	b.w	80071c8 <_kill_r>
 800719a:	2b01      	cmp	r3, #1
 800719c:	d00a      	beq.n	80071b4 <_raise_r+0x4c>
 800719e:	1c59      	adds	r1, r3, #1
 80071a0:	d103      	bne.n	80071aa <_raise_r+0x42>
 80071a2:	2316      	movs	r3, #22
 80071a4:	6003      	str	r3, [r0, #0]
 80071a6:	2001      	movs	r0, #1
 80071a8:	e7e7      	b.n	800717a <_raise_r+0x12>
 80071aa:	2100      	movs	r1, #0
 80071ac:	4620      	mov	r0, r4
 80071ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80071b2:	4798      	blx	r3
 80071b4:	2000      	movs	r0, #0
 80071b6:	e7e0      	b.n	800717a <_raise_r+0x12>

080071b8 <raise>:
 80071b8:	4b02      	ldr	r3, [pc, #8]	@ (80071c4 <raise+0xc>)
 80071ba:	4601      	mov	r1, r0
 80071bc:	6818      	ldr	r0, [r3, #0]
 80071be:	f7ff bfd3 	b.w	8007168 <_raise_r>
 80071c2:	bf00      	nop
 80071c4:	2000001c 	.word	0x2000001c

080071c8 <_kill_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	2300      	movs	r3, #0
 80071cc:	4d06      	ldr	r5, [pc, #24]	@ (80071e8 <_kill_r+0x20>)
 80071ce:	4604      	mov	r4, r0
 80071d0:	4608      	mov	r0, r1
 80071d2:	4611      	mov	r1, r2
 80071d4:	602b      	str	r3, [r5, #0]
 80071d6:	f7fa fbb2 	bl	800193e <_kill>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d102      	bne.n	80071e4 <_kill_r+0x1c>
 80071de:	682b      	ldr	r3, [r5, #0]
 80071e0:	b103      	cbz	r3, 80071e4 <_kill_r+0x1c>
 80071e2:	6023      	str	r3, [r4, #0]
 80071e4:	bd38      	pop	{r3, r4, r5, pc}
 80071e6:	bf00      	nop
 80071e8:	20000404 	.word	0x20000404

080071ec <_getpid_r>:
 80071ec:	f7fa bba0 	b.w	8001930 <_getpid>

080071f0 <__swhatbuf_r>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	460c      	mov	r4, r1
 80071f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071f8:	4615      	mov	r5, r2
 80071fa:	2900      	cmp	r1, #0
 80071fc:	461e      	mov	r6, r3
 80071fe:	b096      	sub	sp, #88	@ 0x58
 8007200:	da0c      	bge.n	800721c <__swhatbuf_r+0x2c>
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	2100      	movs	r1, #0
 8007206:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800720a:	bf14      	ite	ne
 800720c:	2340      	movne	r3, #64	@ 0x40
 800720e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007212:	2000      	movs	r0, #0
 8007214:	6031      	str	r1, [r6, #0]
 8007216:	602b      	str	r3, [r5, #0]
 8007218:	b016      	add	sp, #88	@ 0x58
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	466a      	mov	r2, sp
 800721e:	f000 f849 	bl	80072b4 <_fstat_r>
 8007222:	2800      	cmp	r0, #0
 8007224:	dbed      	blt.n	8007202 <__swhatbuf_r+0x12>
 8007226:	9901      	ldr	r1, [sp, #4]
 8007228:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800722c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007230:	4259      	negs	r1, r3
 8007232:	4159      	adcs	r1, r3
 8007234:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007238:	e7eb      	b.n	8007212 <__swhatbuf_r+0x22>

0800723a <__smakebuf_r>:
 800723a:	898b      	ldrh	r3, [r1, #12]
 800723c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800723e:	079d      	lsls	r5, r3, #30
 8007240:	4606      	mov	r6, r0
 8007242:	460c      	mov	r4, r1
 8007244:	d507      	bpl.n	8007256 <__smakebuf_r+0x1c>
 8007246:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800724a:	6023      	str	r3, [r4, #0]
 800724c:	6123      	str	r3, [r4, #16]
 800724e:	2301      	movs	r3, #1
 8007250:	6163      	str	r3, [r4, #20]
 8007252:	b003      	add	sp, #12
 8007254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007256:	466a      	mov	r2, sp
 8007258:	ab01      	add	r3, sp, #4
 800725a:	f7ff ffc9 	bl	80071f0 <__swhatbuf_r>
 800725e:	9f00      	ldr	r7, [sp, #0]
 8007260:	4605      	mov	r5, r0
 8007262:	4639      	mov	r1, r7
 8007264:	4630      	mov	r0, r6
 8007266:	f7fe fecd 	bl	8006004 <_malloc_r>
 800726a:	b948      	cbnz	r0, 8007280 <__smakebuf_r+0x46>
 800726c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007270:	059a      	lsls	r2, r3, #22
 8007272:	d4ee      	bmi.n	8007252 <__smakebuf_r+0x18>
 8007274:	f023 0303 	bic.w	r3, r3, #3
 8007278:	f043 0302 	orr.w	r3, r3, #2
 800727c:	81a3      	strh	r3, [r4, #12]
 800727e:	e7e2      	b.n	8007246 <__smakebuf_r+0xc>
 8007280:	89a3      	ldrh	r3, [r4, #12]
 8007282:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800728a:	81a3      	strh	r3, [r4, #12]
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	6020      	str	r0, [r4, #0]
 8007290:	b15b      	cbz	r3, 80072aa <__smakebuf_r+0x70>
 8007292:	4630      	mov	r0, r6
 8007294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007298:	f000 f81e 	bl	80072d8 <_isatty_r>
 800729c:	b128      	cbz	r0, 80072aa <__smakebuf_r+0x70>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f023 0303 	bic.w	r3, r3, #3
 80072a4:	f043 0301 	orr.w	r3, r3, #1
 80072a8:	81a3      	strh	r3, [r4, #12]
 80072aa:	89a3      	ldrh	r3, [r4, #12]
 80072ac:	431d      	orrs	r5, r3
 80072ae:	81a5      	strh	r5, [r4, #12]
 80072b0:	e7cf      	b.n	8007252 <__smakebuf_r+0x18>
	...

080072b4 <_fstat_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	2300      	movs	r3, #0
 80072b8:	4d06      	ldr	r5, [pc, #24]	@ (80072d4 <_fstat_r+0x20>)
 80072ba:	4604      	mov	r4, r0
 80072bc:	4608      	mov	r0, r1
 80072be:	4611      	mov	r1, r2
 80072c0:	602b      	str	r3, [r5, #0]
 80072c2:	f7fa fb9b 	bl	80019fc <_fstat>
 80072c6:	1c43      	adds	r3, r0, #1
 80072c8:	d102      	bne.n	80072d0 <_fstat_r+0x1c>
 80072ca:	682b      	ldr	r3, [r5, #0]
 80072cc:	b103      	cbz	r3, 80072d0 <_fstat_r+0x1c>
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	bd38      	pop	{r3, r4, r5, pc}
 80072d2:	bf00      	nop
 80072d4:	20000404 	.word	0x20000404

080072d8 <_isatty_r>:
 80072d8:	b538      	push	{r3, r4, r5, lr}
 80072da:	2300      	movs	r3, #0
 80072dc:	4d05      	ldr	r5, [pc, #20]	@ (80072f4 <_isatty_r+0x1c>)
 80072de:	4604      	mov	r4, r0
 80072e0:	4608      	mov	r0, r1
 80072e2:	602b      	str	r3, [r5, #0]
 80072e4:	f7fa fb99 	bl	8001a1a <_isatty>
 80072e8:	1c43      	adds	r3, r0, #1
 80072ea:	d102      	bne.n	80072f2 <_isatty_r+0x1a>
 80072ec:	682b      	ldr	r3, [r5, #0]
 80072ee:	b103      	cbz	r3, 80072f2 <_isatty_r+0x1a>
 80072f0:	6023      	str	r3, [r4, #0]
 80072f2:	bd38      	pop	{r3, r4, r5, pc}
 80072f4:	20000404 	.word	0x20000404

080072f8 <_init>:
 80072f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072fa:	bf00      	nop
 80072fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fe:	bc08      	pop	{r3}
 8007300:	469e      	mov	lr, r3
 8007302:	4770      	bx	lr

08007304 <_fini>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr
