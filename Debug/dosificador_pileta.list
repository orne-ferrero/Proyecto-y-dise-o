
dosificador_pileta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08006750  08006750  00007750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b34  08006b34  000081d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b34  08006b34  00007b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b3c  08006b3c  000081d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b3c  08006b3c  00007b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b40  08006b40  00007b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08006b44  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  200001d8  08006d1c  000081d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08006d1c  000083e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b14b  00000000  00000000  00008201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c20  00000000  00000000  0001334c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  00014f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a63  00000000  00000000  00015cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018938  00000000  00000000  0001672b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb36  00000000  00000000  0002f063  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cdc7  00000000  00000000  0003eb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b10  00000000  00000000  000cb9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d04b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006738 	.word	0x08006738

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	08006738 	.word	0x08006738

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <i2c_write>:
static void lcd_pulse_enable(uint8_t data);
static void lcd_cmd(uint8_t cmd);
static void lcd_data(uint8_t data);


static void i2c_write(uint8_t val) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af02      	add	r7, sp, #8
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
HAL_I2C_Master_Transmit(&hi2c1, I2C_LCD_ADDR, &val, 1, HAL_MAX_DELAY);
 800107a:	1dfa      	adds	r2, r7, #7
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	2301      	movs	r3, #1
 8001084:	214e      	movs	r1, #78	@ 0x4e
 8001086:	4803      	ldr	r0, [pc, #12]	@ (8001094 <i2c_write+0x24>)
 8001088:	f001 f96a 	bl	8002360 <HAL_I2C_Master_Transmit>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	200001f4 	.word	0x200001f4

08001098 <lcd_pulse_enable>:


static void lcd_pulse_enable(uint8_t data) {
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
i2c_write(data | LCD_EN | bl_state);
 80010a2:	4b10      	ldr	r3, [pc, #64]	@ (80010e4 <lcd_pulse_enable+0x4c>)
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	f043 0304 	orr.w	r3, r3, #4
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ffdc 	bl	8001070 <i2c_write>
HAL_Delay(1);
 80010b8:	2001      	movs	r0, #1
 80010ba:	f000 fd81 	bl	8001bc0 <HAL_Delay>
i2c_write((data & ~LCD_EN) | bl_state);
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	f023 0304 	bic.w	r3, r3, #4
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b07      	ldr	r3, [pc, #28]	@ (80010e4 <lcd_pulse_enable+0x4c>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffce 	bl	8001070 <i2c_write>
HAL_Delay(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f000 fd73 	bl	8001bc0 <HAL_Delay>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000000 	.word	0x20000000

080010e8 <lcd_write_nibble>:


static void lcd_write_nibble(uint8_t nibble, uint8_t mode_rs) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	460a      	mov	r2, r1
 80010f2:	71fb      	strb	r3, [r7, #7]
 80010f4:	4613      	mov	r3, r2
 80010f6:	71bb      	strb	r3, [r7, #6]
// D7..D4 del LCD están en P7..P4 del PCF; por eso usamos (nibble & 0xF0)
uint8_t out = (nibble & 0xF0) | mode_rs; // RW=0 siempre (escritura)
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	f023 030f 	bic.w	r3, r3, #15
 8001100:	b25a      	sxtb	r2, r3
 8001102:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001106:	4313      	orrs	r3, r2
 8001108:	b25b      	sxtb	r3, r3
 800110a:	73fb      	strb	r3, [r7, #15]
i2c_write(out | bl_state);
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <lcd_write_nibble+0x44>)
 800110e:	781a      	ldrb	r2, [r3, #0]
 8001110:	7bfb      	ldrb	r3, [r7, #15]
 8001112:	4313      	orrs	r3, r2
 8001114:	b2db      	uxtb	r3, r3
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffaa 	bl	8001070 <i2c_write>
lcd_pulse_enable(out);
 800111c:	7bfb      	ldrb	r3, [r7, #15]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ffba 	bl	8001098 <lcd_pulse_enable>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000000 	.word	0x20000000

08001130 <lcd_send>:


static void lcd_send(uint8_t value, uint8_t mode_rs) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	460a      	mov	r2, r1
 800113a:	71fb      	strb	r3, [r7, #7]
 800113c:	4613      	mov	r3, r2
 800113e:	71bb      	strb	r3, [r7, #6]
lcd_write_nibble(value & 0xF0, mode_rs);
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	f023 030f 	bic.w	r3, r3, #15
 8001146:	b2db      	uxtb	r3, r3
 8001148:	79ba      	ldrb	r2, [r7, #6]
 800114a:	4611      	mov	r1, r2
 800114c:	4618      	mov	r0, r3
 800114e:	f7ff ffcb 	bl	80010e8 <lcd_write_nibble>
lcd_write_nibble((value << 4) & 0xF0, mode_rs);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	011b      	lsls	r3, r3, #4
 8001156:	b2db      	uxtb	r3, r3
 8001158:	79ba      	ldrb	r2, [r7, #6]
 800115a:	4611      	mov	r1, r2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff ffc3 	bl	80010e8 <lcd_write_nibble>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <lcd_cmd>:


static void lcd_cmd(uint8_t cmd) { lcd_send(cmd, 0); }
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	79fb      	ldrb	r3, [r7, #7]
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ffd9 	bl	8001130 <lcd_send>
 800117e:	bf00      	nop
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <lcd_data>:
static void lcd_data(uint8_t data) { lcd_send(data, LCD_RS); }
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2101      	movs	r1, #1
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ffcb 	bl	8001130 <lcd_send>
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <lcd_clear>:
bl_state = on ? LCD_BL : 0;
i2c_write(bl_state);
}


void lcd_clear(void) {
 80011a2:	b580      	push	{r7, lr}
 80011a4:	af00      	add	r7, sp, #0
lcd_cmd(0x01); // clear
 80011a6:	2001      	movs	r0, #1
 80011a8:	f7ff ffdf 	bl	800116a <lcd_cmd>
HAL_Delay(2); // >1.53 ms
 80011ac:	2002      	movs	r0, #2
 80011ae:	f000 fd07 	bl	8001bc0 <HAL_Delay>
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <lcd_put_cur>:


void lcd_put_cur(uint8_t row, uint8_t col) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b084      	sub	sp, #16
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	4603      	mov	r3, r0
 80011be:	460a      	mov	r2, r1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	4613      	mov	r3, r2
 80011c4:	71bb      	strb	r3, [r7, #6]
uint8_t addr = (row == 0 ? 0x00 : 0x40) + col;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d101      	bne.n	80011d0 <lcd_put_cur+0x1a>
 80011cc:	2200      	movs	r2, #0
 80011ce:	e000      	b.n	80011d2 <lcd_put_cur+0x1c>
 80011d0:	2240      	movs	r2, #64	@ 0x40
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	4413      	add	r3, r2
 80011d6:	73fb      	strb	r3, [r7, #15]
lcd_cmd(0x80 | addr);
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ffc2 	bl	800116a <lcd_cmd>
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <lcd_init>:


void lcd_init(void) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	af00      	add	r7, sp, #0
HAL_Delay(50); // >40 ms después de VCC sube
 80011f2:	2032      	movs	r0, #50	@ 0x32
 80011f4:	f000 fce4 	bl	8001bc0 <HAL_Delay>


// Secuencia de arranque en 4‑bit
lcd_write_nibble(0x30, 0); HAL_Delay(5);
 80011f8:	2100      	movs	r1, #0
 80011fa:	2030      	movs	r0, #48	@ 0x30
 80011fc:	f7ff ff74 	bl	80010e8 <lcd_write_nibble>
 8001200:	2005      	movs	r0, #5
 8001202:	f000 fcdd 	bl	8001bc0 <HAL_Delay>
lcd_write_nibble(0x30, 0); HAL_Delay(1);
 8001206:	2100      	movs	r1, #0
 8001208:	2030      	movs	r0, #48	@ 0x30
 800120a:	f7ff ff6d 	bl	80010e8 <lcd_write_nibble>
 800120e:	2001      	movs	r0, #1
 8001210:	f000 fcd6 	bl	8001bc0 <HAL_Delay>
lcd_write_nibble(0x30, 0); HAL_Delay(1);
 8001214:	2100      	movs	r1, #0
 8001216:	2030      	movs	r0, #48	@ 0x30
 8001218:	f7ff ff66 	bl	80010e8 <lcd_write_nibble>
 800121c:	2001      	movs	r0, #1
 800121e:	f000 fccf 	bl	8001bc0 <HAL_Delay>
lcd_write_nibble(0x20, 0); HAL_Delay(1); // 4‑bit
 8001222:	2100      	movs	r1, #0
 8001224:	2020      	movs	r0, #32
 8001226:	f7ff ff5f 	bl	80010e8 <lcd_write_nibble>
 800122a:	2001      	movs	r0, #1
 800122c:	f000 fcc8 	bl	8001bc0 <HAL_Delay>


// Función: 2 líneas, 5x8 dots
lcd_cmd(0x28);
 8001230:	2028      	movs	r0, #40	@ 0x28
 8001232:	f7ff ff9a 	bl	800116a <lcd_cmd>
// Display ON, cursor OFF, blink OFF
lcd_cmd(0x0C);
 8001236:	200c      	movs	r0, #12
 8001238:	f7ff ff97 	bl	800116a <lcd_cmd>
// Entry mode: incrementar, sin shift
lcd_cmd(0x06);
 800123c:	2006      	movs	r0, #6
 800123e:	f7ff ff94 	bl	800116a <lcd_cmd>
lcd_clear();
 8001242:	f7ff ffae 	bl	80011a2 <lcd_clear>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}

0800124a <lcd_write_char>:


void lcd_write_char(char ch) { lcd_data((uint8_t)ch); }
 800124a:	b580      	push	{r7, lr}
 800124c:	b082      	sub	sp, #8
 800124e:	af00      	add	r7, sp, #0
 8001250:	4603      	mov	r3, r0
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff95 	bl	8001186 <lcd_data>
 800125c:	bf00      	nop
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <lcd_send_string>:


void lcd_send_string(const char *str) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
while (*str) {
 800126c:	e006      	b.n	800127c <lcd_send_string+0x18>
lcd_write_char(*str++);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	607a      	str	r2, [r7, #4]
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffe7 	bl	800124a <lcd_write_char>
while (*str) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d1f4      	bne.n	800126e <lcd_send_string+0xa>
}
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <calcularErrorPH>:
#define DUTY_MAX 1.0f
#define CAUDAL_MAXIMO 1.33f


//funcion para calcular el error de ph
float calcularErrorPH(float ph_actual){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	return PH_IDEAL - ph_actual;
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4804      	ldr	r0, [pc, #16]	@ (80012ac <calcularErrorPH+0x1c>)
 800129c:	f7ff fbf8 	bl	8000a90 <__aeabi_fsub>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40eccccd 	.word	0x40eccccd

080012b0 <obtenerSensibilidad>:

//determino sensibilidad segun error
float obtenerSensibilidad(float error){
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
	return (error < 0.0f) ? SENSIBILIDAD_BAJAR_PH : SENSIBILIDAD_SUBIR_PH;
 80012b8:	f04f 0100 	mov.w	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff fe8f 	bl	8000fe0 <__aeabi_fcmplt>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <obtenerSensibilidad+0x1e>
 80012c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80012cc:	e000      	b.n	80012d0 <obtenerSensibilidad+0x20>
 80012ce:	4b02      	ldr	r3, [pc, #8]	@ (80012d8 <obtenerSensibilidad+0x28>)
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3708      	adds	r7, #8
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	4068b924 	.word	0x4068b924

080012dc <calcularVolumen>:
 //calculo volumen
float calcularVolumen (float error, float sensibilidad){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
	return error/sensibilidad;
 80012e6:	6839      	ldr	r1, [r7, #0]
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fd8f 	bl	8000e0c <__aeabi_fdiv>
 80012ee:	4603      	mov	r3, r0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <calcularCaudal>:

//Calculo caudal
float calcularCaudal(float volumen){
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
	return volumen/TC;
 8001300:	4904      	ldr	r1, [pc, #16]	@ (8001314 <calcularCaudal+0x1c>)
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fd82 	bl	8000e0c <__aeabi_fdiv>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	40a00000 	.word	0x40a00000

08001318 <calcularDutyFinal>:

//calculo duty final limitado

float calcularDutyFinal(float caudal){
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	float duty_crudo = caudal / CAUDAL_MAXIMO;
 8001320:	4912      	ldr	r1, [pc, #72]	@ (800136c <calcularDutyFinal+0x54>)
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fd72 	bl	8000e0c <__aeabi_fdiv>
 8001328:	4603      	mov	r3, r0
 800132a:	60fb      	str	r3, [r7, #12]
	float duty_con_ganancia = duty_crudo * KP;
 800132c:	4910      	ldr	r1, [pc, #64]	@ (8001370 <calcularDutyFinal+0x58>)
 800132e:	68f8      	ldr	r0, [r7, #12]
 8001330:	f7ff fcb8 	bl	8000ca4 <__aeabi_fmul>
 8001334:	4603      	mov	r3, r0
 8001336:	60bb      	str	r3, [r7, #8]

	if (duty_con_ganancia > DUTY_MAX) return DUTY_MAX;
 8001338:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f7ff fe6d 	bl	800101c <__aeabi_fcmpgt>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <calcularDutyFinal+0x36>
 8001348:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800134c:	e009      	b.n	8001362 <calcularDutyFinal+0x4a>
	if (duty_con_ganancia < DUTY_MIN) return DUTY_MIN;
 800134e:	4909      	ldr	r1, [pc, #36]	@ (8001374 <calcularDutyFinal+0x5c>)
 8001350:	68b8      	ldr	r0, [r7, #8]
 8001352:	f7ff fe45 	bl	8000fe0 <__aeabi_fcmplt>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <calcularDutyFinal+0x48>
 800135c:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <calcularDutyFinal+0x5c>)
 800135e:	e000      	b.n	8001362 <calcularDutyFinal+0x4a>
	return duty_con_ganancia;
 8001360:	68bb      	ldr	r3, [r7, #8]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3710      	adds	r7, #16
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	3faa3d71 	.word	0x3faa3d71
 8001370:	3fd9999a 	.word	0x3fd9999a
 8001374:	3e8ccccd 	.word	0x3e8ccccd

08001378 <setBombaPWM>:

void setBombaPWM(float duty, int subir) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
    uint32_t pulse = (uint32_t)(duty * htim2.Init.Period);
 8001382:	4b14      	ldr	r3, [pc, #80]	@ (80013d4 <setBombaPWM+0x5c>)
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fc34 	bl	8000bf4 <__aeabi_ui2f>
 800138c:	4603      	mov	r3, r0
 800138e:	6879      	ldr	r1, [r7, #4]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fc87 	bl	8000ca4 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe49 	bl	8001030 <__aeabi_f2uiz>
 800139e:	4603      	mov	r3, r0
 80013a0:	60fb      	str	r3, [r7, #12]
    if (subir) {
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <setBombaPWM+0x42>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);  // Bomba subir pH
 80013a8:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <setBombaPWM+0x5c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68fa      	ldr	r2, [r7, #12]
 80013ae:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);      // Apaga bomba bajar
 80013b0:	4b08      	ldr	r3, [pc, #32]	@ (80013d4 <setBombaPWM+0x5c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2200      	movs	r2, #0
 80013b6:	639a      	str	r2, [r3, #56]	@ 0x38
    } else {
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // Apaga bomba subir
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);  // Bomba bajar pH
    }
}
 80013b8:	e007      	b.n	80013ca <setBombaPWM+0x52>
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);      // Apaga bomba subir
 80013ba:	4b06      	ldr	r3, [pc, #24]	@ (80013d4 <setBombaPWM+0x5c>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2200      	movs	r2, #0
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
        __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pulse);  // Bomba bajar pH
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <setBombaPWM+0x5c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000248 	.word	0x20000248

080013d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b092      	sub	sp, #72	@ 0x48
 80013dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013de:	f000 fb8d 	bl	8001afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e2:	f000 f8bf 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e6:	f000 f98b 	bl	8001700 <MX_GPIO_Init>
  MX_I2C1_Init();
 80013ea:	f000 f8f7 	bl	80015dc <MX_I2C1_Init>
  MX_TIM2_Init();
 80013ee:	f000 f923 	bl	8001638 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80013f2:	f7ff fefc 	bl	80011ee <lcd_init>

  //arrancar los canales PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // Bomba subir pH
 80013f6:	2100      	movs	r1, #0
 80013f8:	4854      	ldr	r0, [pc, #336]	@ (800154c <main+0x174>)
 80013fa:	f001 ff55 	bl	80032a8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); // Bomba bajar pH
 80013fe:	2104      	movs	r1, #4
 8001400:	4852      	ldr	r0, [pc, #328]	@ (800154c <main+0x174>)
 8001402:	f001 ff51 	bl	80032a8 <HAL_TIM_PWM_Start>

  float ph_actual = 0.5f;
 8001406:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800140a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  float error = calcularErrorPH(ph_actual);
 800140c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800140e:	f7ff ff3f 	bl	8001290 <calcularErrorPH>
 8001412:	63b8      	str	r0, [r7, #56]	@ 0x38

	  if (fabs(error) == 0.0f){
 8001414:	f04f 0100 	mov.w	r1, #0
 8001418:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800141a:	f7ff fdd7 	bl	8000fcc <__aeabi_fcmpeq>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d01f      	beq.n	8001464 <main+0x8c>
		  lcd_clear();
 8001424:	f7ff febd 	bl	80011a2 <lcd_clear>
		  lcd_put_cur(0,0);
 8001428:	2100      	movs	r1, #0
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fec3 	bl	80011b6 <lcd_put_cur>
		  lcd_send_string("pH ideal");
 8001430:	4847      	ldr	r0, [pc, #284]	@ (8001550 <main+0x178>)
 8001432:	f7ff ff17 	bl	8001264 <lcd_send_string>
		  setBombaPWM(0, 1);
 8001436:	2101      	movs	r1, #1
 8001438:	f04f 0000 	mov.w	r0, #0
 800143c:	f7ff ff9c 	bl	8001378 <setBombaPWM>
		  HAL_Delay(2000); // espera 2 segundos
 8001440:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001444:	f000 fbbc 	bl	8001bc0 <HAL_Delay>

		   lcd_clear();
 8001448:	f7ff feab 	bl	80011a2 <lcd_clear>
		   lcd_put_cur(0,0);
 800144c:	2100      	movs	r1, #0
 800144e:	2000      	movs	r0, #0
 8001450:	f7ff feb1 	bl	80011b6 <lcd_put_cur>
		   lcd_send_string("Bombas off");
 8001454:	483f      	ldr	r0, [pc, #252]	@ (8001554 <main+0x17c>)
 8001456:	f7ff ff05 	bl	8001264 <lcd_send_string>
		   HAL_Delay(2000);
 800145a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800145e:	f000 fbaf 	bl	8001bc0 <HAL_Delay>
 8001462:	e7d3      	b.n	800140c <main+0x34>

	  } else {

	  float sensibilidad = obtenerSensibilidad(error);
 8001464:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001466:	f7ff ff23 	bl	80012b0 <obtenerSensibilidad>
 800146a:	6378      	str	r0, [r7, #52]	@ 0x34
	  float volumen = calcularVolumen(error, sensibilidad);
 800146c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800146e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001470:	f7ff ff34 	bl	80012dc <calcularVolumen>
 8001474:	6338      	str	r0, [r7, #48]	@ 0x30
	  float caudal = calcularCaudal(volumen);
 8001476:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8001478:	f7ff ff3e 	bl	80012f8 <calcularCaudal>
 800147c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	  float duty = calcularDutyFinal(fabs(caudal));
 800147e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001480:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff ff47 	bl	8001318 <calcularDutyFinal>
 800148a:	62b8      	str	r0, [r7, #40]	@ 0x28

	    lcd_clear();
 800148c:	f7ff fe89 	bl	80011a2 <lcd_clear>
	    lcd_put_cur(0,0);
 8001490:	2100      	movs	r1, #0
 8001492:	2000      	movs	r0, #0
 8001494:	f7ff fe8f 	bl	80011b6 <lcd_put_cur>
	    char ph_line[17];
	    if(error < 0.0f){
 8001498:	f04f 0100 	mov.w	r1, #0
 800149c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800149e:	f7ff fd9f 	bl	8000fe0 <__aeabi_fcmplt>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d014      	beq.n	80014d2 <main+0xfa>
	    snprintf(ph_line, sizeof(ph_line), "Bajar: %.2f pH", fabs(error));
 80014a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014aa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe ffba 	bl	8000428 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	f107 0014 	add.w	r0, r7, #20
 80014bc:	e9cd 2300 	strd	r2, r3, [sp]
 80014c0:	4a25      	ldr	r2, [pc, #148]	@ (8001558 <main+0x180>)
 80014c2:	2111      	movs	r1, #17
 80014c4:	f002 ffe8 	bl	8004498 <sniprintf>
	    setBombaPWM(duty, 0);
 80014c8:	2100      	movs	r1, #0
 80014ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014cc:	f7ff ff54 	bl	8001378 <setBombaPWM>
 80014d0:	e013      	b.n	80014fa <main+0x122>
	  } else{
	     snprintf(ph_line, sizeof(ph_line), "Subir: %.2f pH", fabs(error));
 80014d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80014d8:	4618      	mov	r0, r3
 80014da:	f7fe ffa5 	bl	8000428 <__aeabi_f2d>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	f107 0014 	add.w	r0, r7, #20
 80014e6:	e9cd 2300 	strd	r2, r3, [sp]
 80014ea:	4a1c      	ldr	r2, [pc, #112]	@ (800155c <main+0x184>)
 80014ec:	2111      	movs	r1, #17
 80014ee:	f002 ffd3 	bl	8004498 <sniprintf>
	     setBombaPWM(duty,1);
 80014f2:	2101      	movs	r1, #1
 80014f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80014f6:	f7ff ff3f 	bl	8001378 <setBombaPWM>
	  }

	    lcd_send_string(ph_line);       // ✅ mostrar el texto
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff feb0 	bl	8001264 <lcd_send_string>
	    HAL_Delay(2000);
 8001504:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001508:	f000 fb5a 	bl	8001bc0 <HAL_Delay>

	    HAL_Delay(2000);
 800150c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001510:	f000 fb56 	bl	8001bc0 <HAL_Delay>

	 // Secuencia: Duty de la bomba
	     lcd_clear();
 8001514:	f7ff fe45 	bl	80011a2 <lcd_clear>
	     lcd_put_cur(0,0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f7ff fe4b 	bl	80011b6 <lcd_put_cur>
	     char duty_line[17];
	     snprintf(duty_line, sizeof(duty_line), "Duty: %.2f", duty);
 8001520:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4638      	mov	r0, r7
 800152c:	e9cd 2300 	strd	r2, r3, [sp]
 8001530:	4a0b      	ldr	r2, [pc, #44]	@ (8001560 <main+0x188>)
 8001532:	2111      	movs	r1, #17
 8001534:	f002 ffb0 	bl	8004498 <sniprintf>
	     lcd_send_string(duty_line);
 8001538:	463b      	mov	r3, r7
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fe92 	bl	8001264 <lcd_send_string>
	      HAL_Delay(2000);
 8001540:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001544:	f000 fb3c 	bl	8001bc0 <HAL_Delay>
  {
 8001548:	e760      	b.n	800140c <main+0x34>
 800154a:	bf00      	nop
 800154c:	20000248 	.word	0x20000248
 8001550:	08006750 	.word	0x08006750
 8001554:	0800675c 	.word	0x0800675c
 8001558:	08006768 	.word	0x08006768
 800155c:	08006778 	.word	0x08006778
 8001560:	08006788 	.word	0x08006788

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b090      	sub	sp, #64	@ 0x40
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	2228      	movs	r2, #40	@ 0x28
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f003 f809 	bl	800458a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158a:	2301      	movs	r3, #1
 800158c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158e:	2310      	movs	r3, #16
 8001590:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001592:	2300      	movs	r3, #0
 8001594:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f001 fa38 	bl	8002a10 <HAL_RCC_OscConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015a6:	f000 f8cd 	bl	8001744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	230f      	movs	r3, #15
 80015ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fca6 	bl	8002f14 <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ce:	f000 f8b9 	bl	8001744 <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3740      	adds	r7, #64	@ 0x40
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <MX_I2C1_Init+0x50>)
 80015e2:	4a13      	ldr	r2, [pc, #76]	@ (8001630 <MX_I2C1_Init+0x54>)
 80015e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015e6:	4b11      	ldr	r3, [pc, #68]	@ (800162c <MX_I2C1_Init+0x50>)
 80015e8:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <MX_I2C1_Init+0x58>)
 80015ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	@ (800162c <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <MX_I2C1_Init+0x50>)
 80015fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80015fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001600:	4b0a      	ldr	r3, [pc, #40]	@ (800162c <MX_I2C1_Init+0x50>)
 8001602:	2200      	movs	r2, #0
 8001604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <MX_I2C1_Init+0x50>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <MX_I2C1_Init+0x50>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <MX_I2C1_Init+0x50>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001618:	4804      	ldr	r0, [pc, #16]	@ (800162c <MX_I2C1_Init+0x50>)
 800161a:	f000 fd5d 	bl	80020d8 <HAL_I2C_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001624:	f000 f88e 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	200001f4 	.word	0x200001f4
 8001630:	40005400 	.word	0x40005400
 8001634:	000186a0 	.word	0x000186a0

08001638 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	@ 0x28
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800163e:	f107 0320 	add.w	r3, r7, #32
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]
 8001654:	611a      	str	r2, [r3, #16]
 8001656:	615a      	str	r2, [r3, #20]
 8001658:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800165a:	4b28      	ldr	r3, [pc, #160]	@ (80016fc <MX_TIM2_Init+0xc4>)
 800165c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001660:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001662:	4b26      	ldr	r3, [pc, #152]	@ (80016fc <MX_TIM2_Init+0xc4>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b24      	ldr	r3, [pc, #144]	@ (80016fc <MX_TIM2_Init+0xc4>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 399;
 800166e:	4b23      	ldr	r3, [pc, #140]	@ (80016fc <MX_TIM2_Init+0xc4>)
 8001670:	f240 128f 	movw	r2, #399	@ 0x18f
 8001674:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b21      	ldr	r3, [pc, #132]	@ (80016fc <MX_TIM2_Init+0xc4>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b1f      	ldr	r3, [pc, #124]	@ (80016fc <MX_TIM2_Init+0xc4>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001682:	481e      	ldr	r0, [pc, #120]	@ (80016fc <MX_TIM2_Init+0xc4>)
 8001684:	f001 fdc0 	bl	8003208 <HAL_TIM_PWM_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800168e:	f000 f859 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	4619      	mov	r1, r3
 80016a0:	4816      	ldr	r0, [pc, #88]	@ (80016fc <MX_TIM2_Init+0xc4>)
 80016a2:	f002 f97f 	bl	80039a4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80016ac:	f000 f84a 	bl	8001744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016b0:	2360      	movs	r3, #96	@ 0x60
 80016b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	4619      	mov	r1, r3
 80016c6:	480d      	ldr	r0, [pc, #52]	@ (80016fc <MX_TIM2_Init+0xc4>)
 80016c8:	f001 fe90 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80016d2:	f000 f837 	bl	8001744 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2204      	movs	r2, #4
 80016da:	4619      	mov	r1, r3
 80016dc:	4807      	ldr	r0, [pc, #28]	@ (80016fc <MX_TIM2_Init+0xc4>)
 80016de:	f001 fe85 	bl	80033ec <HAL_TIM_PWM_ConfigChannel>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80016e8:	f000 f82c 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80016ec:	4803      	ldr	r0, [pc, #12]	@ (80016fc <MX_TIM2_Init+0xc4>)
 80016ee:	f000 f8bb 	bl	8001868 <HAL_TIM_MspPostInit>

}
 80016f2:	bf00      	nop
 80016f4:	3728      	adds	r7, #40	@ 0x28
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000248 	.word	0x20000248

08001700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001706:	4b0e      	ldr	r3, [pc, #56]	@ (8001740 <MX_GPIO_Init+0x40>)
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	4a0d      	ldr	r2, [pc, #52]	@ (8001740 <MX_GPIO_Init+0x40>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	6193      	str	r3, [r2, #24]
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <MX_GPIO_Init+0x40>)
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0304 	and.w	r3, r3, #4
 800171a:	607b      	str	r3, [r7, #4]
 800171c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <MX_GPIO_Init+0x40>)
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	4a07      	ldr	r2, [pc, #28]	@ (8001740 <MX_GPIO_Init+0x40>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6193      	str	r3, [r2, #24]
 800172a:	4b05      	ldr	r3, [pc, #20]	@ (8001740 <MX_GPIO_Init+0x40>)
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	bc80      	pop	{r7}
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <Error_Handler+0x8>

08001750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001756:	4b15      	ldr	r3, [pc, #84]	@ (80017ac <HAL_MspInit+0x5c>)
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	4a14      	ldr	r2, [pc, #80]	@ (80017ac <HAL_MspInit+0x5c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6193      	str	r3, [r2, #24]
 8001762:	4b12      	ldr	r3, [pc, #72]	@ (80017ac <HAL_MspInit+0x5c>)
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b0f      	ldr	r3, [pc, #60]	@ (80017ac <HAL_MspInit+0x5c>)
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	4a0e      	ldr	r2, [pc, #56]	@ (80017ac <HAL_MspInit+0x5c>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	61d3      	str	r3, [r2, #28]
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <HAL_MspInit+0x5c>)
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	607b      	str	r3, [r7, #4]
 8001784:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001786:	4b0a      	ldr	r3, [pc, #40]	@ (80017b0 <HAL_MspInit+0x60>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <HAL_MspInit+0x60>)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	40021000 	.word	0x40021000
 80017b0:	40010000 	.word	0x40010000

080017b4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a15      	ldr	r2, [pc, #84]	@ (8001824 <HAL_I2C_MspInit+0x70>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d123      	bne.n	800181c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d4:	4b14      	ldr	r3, [pc, #80]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 80017d6:	699b      	ldr	r3, [r3, #24]
 80017d8:	4a13      	ldr	r2, [pc, #76]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 80017da:	f043 0308 	orr.w	r3, r3, #8
 80017de:	6193      	str	r3, [r2, #24]
 80017e0:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017ec:	23c0      	movs	r3, #192	@ 0xc0
 80017ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f107 0310 	add.w	r3, r7, #16
 80017fc:	4619      	mov	r1, r3
 80017fe:	480b      	ldr	r0, [pc, #44]	@ (800182c <HAL_I2C_MspInit+0x78>)
 8001800:	f000 fae6 	bl	8001dd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 800180a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800180e:	61d3      	str	r3, [r2, #28]
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_I2C_MspInit+0x74>)
 8001812:	69db      	ldr	r3, [r3, #28]
 8001814:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40005400 	.word	0x40005400
 8001828:	40021000 	.word	0x40021000
 800182c:	40010c00 	.word	0x40010c00

08001830 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d10b      	bne.n	800185a <HAL_TIM_PWM_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001842:	4b08      	ldr	r3, [pc, #32]	@ (8001864 <HAL_TIM_PWM_MspInit+0x34>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_TIM_PWM_MspInit+0x34>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	61d3      	str	r3, [r2, #28]
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <HAL_TIM_PWM_MspInit+0x34>)
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	40021000 	.word	0x40021000

08001868 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001870:	f107 0310 	add.w	r3, r7, #16
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001886:	d117      	bne.n	80018b8 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_TIM_MspPostInit+0x58>)
 800188a:	699b      	ldr	r3, [r3, #24]
 800188c:	4a0c      	ldr	r2, [pc, #48]	@ (80018c0 <HAL_TIM_MspPostInit+0x58>)
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	6193      	str	r3, [r2, #24]
 8001894:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <HAL_TIM_MspPostInit+0x58>)
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018a0:	2303      	movs	r3, #3
 80018a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2302      	movs	r3, #2
 80018aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ac:	f107 0310 	add.w	r3, r7, #16
 80018b0:	4619      	mov	r1, r3
 80018b2:	4804      	ldr	r0, [pc, #16]	@ (80018c4 <HAL_TIM_MspPostInit+0x5c>)
 80018b4:	f000 fa8c 	bl	8001dd0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40010800 	.word	0x40010800

080018c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018cc:	bf00      	nop
 80018ce:	e7fd      	b.n	80018cc <NMI_Handler+0x4>

080018d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018d4:	bf00      	nop
 80018d6:	e7fd      	b.n	80018d4 <HardFault_Handler+0x4>

080018d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018dc:	bf00      	nop
 80018de:	e7fd      	b.n	80018dc <MemManage_Handler+0x4>

080018e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018e4:	bf00      	nop
 80018e6:	e7fd      	b.n	80018e4 <BusFault_Handler+0x4>

080018e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ec:	bf00      	nop
 80018ee:	e7fd      	b.n	80018ec <UsageFault_Handler+0x4>

080018f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr

080018fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	bc80      	pop	{r7}
 8001906:	4770      	bx	lr

08001908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001918:	f000 f936 	bl	8001b88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}

08001920 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return 1;
 8001924:	2301      	movs	r3, #1
}
 8001926:	4618      	mov	r0, r3
 8001928:	46bd      	mov	sp, r7
 800192a:	bc80      	pop	{r7}
 800192c:	4770      	bx	lr

0800192e <_kill>:

int _kill(int pid, int sig)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001938:	f002 fe7a 	bl	8004630 <__errno>
 800193c:	4603      	mov	r3, r0
 800193e:	2216      	movs	r2, #22
 8001940:	601a      	str	r2, [r3, #0]
  return -1;
 8001942:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001946:	4618      	mov	r0, r3
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_exit>:

void _exit (int status)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001956:	f04f 31ff 	mov.w	r1, #4294967295
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff ffe7 	bl	800192e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <_exit+0x12>

08001964 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	e00a      	b.n	800198c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001976:	f3af 8000 	nop.w
 800197a:	4601      	mov	r1, r0
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	1c5a      	adds	r2, r3, #1
 8001980:	60ba      	str	r2, [r7, #8]
 8001982:	b2ca      	uxtb	r2, r1
 8001984:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3301      	adds	r3, #1
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	429a      	cmp	r2, r3
 8001992:	dbf0      	blt.n	8001976 <_read+0x12>
  }

  return len;
 8001994:	687b      	ldr	r3, [r7, #4]
}
 8001996:	4618      	mov	r0, r3
 8001998:	3718      	adds	r7, #24
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e009      	b.n	80019c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf1      	blt.n	80019b0 <_write+0x12>
  }
  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_close>:

int _close(int file)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019fc:	605a      	str	r2, [r3, #4]
  return 0;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr

08001a0a <_isatty>:

int _isatty(int file)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr

08001a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bc80      	pop	{r7}
 8001a34:	4770      	bx	lr
	...

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f002 fde2 	bl	8004630 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20005000 	.word	0x20005000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	20000290 	.word	0x20000290
 8001aa0:	200003e8 	.word	0x200003e8

08001aa4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aa8:	bf00      	nop
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr

08001ab0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ab0:	f7ff fff8 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ab4:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001ab6:	490c      	ldr	r1, [pc, #48]	@ (8001ae8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001ab8:	4a0c      	ldr	r2, [pc, #48]	@ (8001aec <LoopFillZerobss+0x16>)
  movs r3, #0
 8001aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001abc:	e002      	b.n	8001ac4 <LoopCopyDataInit>

08001abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ac2:	3304      	adds	r3, #4

08001ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac8:	d3f9      	bcc.n	8001abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aca:	4a09      	ldr	r2, [pc, #36]	@ (8001af0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001acc:	4c09      	ldr	r4, [pc, #36]	@ (8001af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ad0:	e001      	b.n	8001ad6 <LoopFillZerobss>

08001ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad4:	3204      	adds	r2, #4

08001ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad8:	d3fb      	bcc.n	8001ad2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ada:	f002 fdaf 	bl	800463c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001ade:	f7ff fc7b 	bl	80013d8 <main>
  bx lr
 8001ae2:	4770      	bx	lr
  ldr r0, =_sdata
 8001ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001aec:	08006b44 	.word	0x08006b44
  ldr r2, =_sbss
 8001af0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001af4:	200003e4 	.word	0x200003e4

08001af8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001af8:	e7fe      	b.n	8001af8 <ADC1_2_IRQHandler>
	...

08001afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b00:	4b08      	ldr	r3, [pc, #32]	@ (8001b24 <HAL_Init+0x28>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <HAL_Init+0x28>)
 8001b06:	f043 0310 	orr.w	r3, r3, #16
 8001b0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b0c:	2003      	movs	r0, #3
 8001b0e:	f000 f92b 	bl	8001d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b12:	200f      	movs	r0, #15
 8001b14:	f000 f808 	bl	8001b28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b18:	f7ff fe1a 	bl	8001750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40022000 	.word	0x40022000

08001b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b30:	4b12      	ldr	r3, [pc, #72]	@ (8001b7c <HAL_InitTick+0x54>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	4b12      	ldr	r3, [pc, #72]	@ (8001b80 <HAL_InitTick+0x58>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b46:	4618      	mov	r0, r3
 8001b48:	f000 f935 	bl	8001db6 <HAL_SYSTICK_Config>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e00e      	b.n	8001b74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2b0f      	cmp	r3, #15
 8001b5a:	d80a      	bhi.n	8001b72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	6879      	ldr	r1, [r7, #4]
 8001b60:	f04f 30ff 	mov.w	r0, #4294967295
 8001b64:	f000 f90b 	bl	8001d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b68:	4a06      	ldr	r2, [pc, #24]	@ (8001b84 <HAL_InitTick+0x5c>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	20000004 	.word	0x20000004
 8001b80:	2000000c 	.word	0x2000000c
 8001b84:	20000008 	.word	0x20000008

08001b88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_IncTick+0x1c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	461a      	mov	r2, r3
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	4a03      	ldr	r2, [pc, #12]	@ (8001ba8 <HAL_IncTick+0x20>)
 8001b9a:	6013      	str	r3, [r2, #0]
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bc80      	pop	{r7}
 8001ba2:	4770      	bx	lr
 8001ba4:	2000000c 	.word	0x2000000c
 8001ba8:	20000294 	.word	0x20000294

08001bac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b02      	ldr	r3, [pc, #8]	@ (8001bbc <HAL_GetTick+0x10>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr
 8001bbc:	20000294 	.word	0x20000294

08001bc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bc8:	f7ff fff0 	bl	8001bac <HAL_GetTick>
 8001bcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd8:	d005      	beq.n	8001be6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bda:	4b0a      	ldr	r3, [pc, #40]	@ (8001c04 <HAL_Delay+0x44>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	4413      	add	r3, r2
 8001be4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001be6:	bf00      	nop
 8001be8:	f7ff ffe0 	bl	8001bac <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d8f7      	bhi.n	8001be8 <HAL_Delay+0x28>
  {
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	3710      	adds	r7, #16
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000000c 	.word	0x2000000c

08001c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f003 0307 	and.w	r3, r3, #7
 8001c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c1e:	68ba      	ldr	r2, [r7, #8]
 8001c20:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c24:	4013      	ands	r3, r2
 8001c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c30:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <__NVIC_SetPriorityGrouping+0x44>)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	60d3      	str	r3, [r2, #12]
}
 8001c40:	bf00      	nop
 8001c42:	3714      	adds	r7, #20
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bc80      	pop	{r7}
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c54:	4b04      	ldr	r3, [pc, #16]	@ (8001c68 <__NVIC_GetPriorityGrouping+0x18>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	0a1b      	lsrs	r3, r3, #8
 8001c5a:	f003 0307 	and.w	r3, r3, #7
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	6039      	str	r1, [r7, #0]
 8001c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	db0a      	blt.n	8001c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2da      	uxtb	r2, r3
 8001c84:	490c      	ldr	r1, [pc, #48]	@ (8001cb8 <__NVIC_SetPriority+0x4c>)
 8001c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8a:	0112      	lsls	r2, r2, #4
 8001c8c:	b2d2      	uxtb	r2, r2
 8001c8e:	440b      	add	r3, r1
 8001c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c94:	e00a      	b.n	8001cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	b2da      	uxtb	r2, r3
 8001c9a:	4908      	ldr	r1, [pc, #32]	@ (8001cbc <__NVIC_SetPriority+0x50>)
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	f003 030f 	and.w	r3, r3, #15
 8001ca2:	3b04      	subs	r3, #4
 8001ca4:	0112      	lsls	r2, r2, #4
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	440b      	add	r3, r1
 8001caa:	761a      	strb	r2, [r3, #24]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	e000e100 	.word	0xe000e100
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b089      	sub	sp, #36	@ 0x24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f1c3 0307 	rsb	r3, r3, #7
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	bf28      	it	cs
 8001cde:	2304      	movcs	r3, #4
 8001ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d902      	bls.n	8001cf0 <NVIC_EncodePriority+0x30>
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	e000      	b.n	8001cf2 <NVIC_EncodePriority+0x32>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	401a      	ands	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d08:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d12:	43d9      	mvns	r1, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	4313      	orrs	r3, r2
         );
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b082      	sub	sp, #8
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d34:	d301      	bcc.n	8001d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00f      	b.n	8001d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d64 <SysTick_Config+0x40>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3b01      	subs	r3, #1
 8001d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d42:	210f      	movs	r1, #15
 8001d44:	f04f 30ff 	mov.w	r0, #4294967295
 8001d48:	f7ff ff90 	bl	8001c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d4c:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <SysTick_Config+0x40>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d52:	4b04      	ldr	r3, [pc, #16]	@ (8001d64 <SysTick_Config+0x40>)
 8001d54:	2207      	movs	r2, #7
 8001d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	e000e010 	.word	0xe000e010

08001d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f7ff ff49 	bl	8001c08 <__NVIC_SetPriorityGrouping>
}
 8001d76:	bf00      	nop
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	4603      	mov	r3, r0
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d90:	f7ff ff5e 	bl	8001c50 <__NVIC_GetPriorityGrouping>
 8001d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	68b9      	ldr	r1, [r7, #8]
 8001d9a:	6978      	ldr	r0, [r7, #20]
 8001d9c:	f7ff ff90 	bl	8001cc0 <NVIC_EncodePriority>
 8001da0:	4602      	mov	r2, r0
 8001da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001da6:	4611      	mov	r1, r2
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff5f 	bl	8001c6c <__NVIC_SetPriority>
}
 8001dae:	bf00      	nop
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ffb0 	bl	8001d24 <SysTick_Config>
 8001dc4:	4603      	mov	r3, r0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b08b      	sub	sp, #44	@ 0x2c
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de2:	e169      	b.n	80020b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001de4:	2201      	movs	r2, #1
 8001de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	4013      	ands	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	f040 8158 	bne.w	80020b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	4a9a      	ldr	r2, [pc, #616]	@ (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d05e      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e0c:	4a98      	ldr	r2, [pc, #608]	@ (8002070 <HAL_GPIO_Init+0x2a0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d875      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e12:	4a98      	ldr	r2, [pc, #608]	@ (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d058      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e18:	4a96      	ldr	r2, [pc, #600]	@ (8002074 <HAL_GPIO_Init+0x2a4>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d86f      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e1e:	4a96      	ldr	r2, [pc, #600]	@ (8002078 <HAL_GPIO_Init+0x2a8>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d052      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e24:	4a94      	ldr	r2, [pc, #592]	@ (8002078 <HAL_GPIO_Init+0x2a8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d869      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e2a:	4a94      	ldr	r2, [pc, #592]	@ (800207c <HAL_GPIO_Init+0x2ac>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d04c      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e30:	4a92      	ldr	r2, [pc, #584]	@ (800207c <HAL_GPIO_Init+0x2ac>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d863      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e36:	4a92      	ldr	r2, [pc, #584]	@ (8002080 <HAL_GPIO_Init+0x2b0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d046      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
 8001e3c:	4a90      	ldr	r2, [pc, #576]	@ (8002080 <HAL_GPIO_Init+0x2b0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d85d      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e42:	2b12      	cmp	r3, #18
 8001e44:	d82a      	bhi.n	8001e9c <HAL_GPIO_Init+0xcc>
 8001e46:	2b12      	cmp	r3, #18
 8001e48:	d859      	bhi.n	8001efe <HAL_GPIO_Init+0x12e>
 8001e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e50 <HAL_GPIO_Init+0x80>)
 8001e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e50:	08001ecb 	.word	0x08001ecb
 8001e54:	08001ea5 	.word	0x08001ea5
 8001e58:	08001eb7 	.word	0x08001eb7
 8001e5c:	08001ef9 	.word	0x08001ef9
 8001e60:	08001eff 	.word	0x08001eff
 8001e64:	08001eff 	.word	0x08001eff
 8001e68:	08001eff 	.word	0x08001eff
 8001e6c:	08001eff 	.word	0x08001eff
 8001e70:	08001eff 	.word	0x08001eff
 8001e74:	08001eff 	.word	0x08001eff
 8001e78:	08001eff 	.word	0x08001eff
 8001e7c:	08001eff 	.word	0x08001eff
 8001e80:	08001eff 	.word	0x08001eff
 8001e84:	08001eff 	.word	0x08001eff
 8001e88:	08001eff 	.word	0x08001eff
 8001e8c:	08001eff 	.word	0x08001eff
 8001e90:	08001eff 	.word	0x08001eff
 8001e94:	08001ead 	.word	0x08001ead
 8001e98:	08001ec1 	.word	0x08001ec1
 8001e9c:	4a79      	ldr	r2, [pc, #484]	@ (8002084 <HAL_GPIO_Init+0x2b4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ea2:	e02c      	b.n	8001efe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e029      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e024      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e01f      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e01a      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e013      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	611a      	str	r2, [r3, #16]
          break;
 8001eea:	e009      	b.n	8001f00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	615a      	str	r2, [r3, #20]
          break;
 8001ef6:	e003      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e000      	b.n	8001f00 <HAL_GPIO_Init+0x130>
          break;
 8001efe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2bff      	cmp	r3, #255	@ 0xff
 8001f04:	d801      	bhi.n	8001f0a <HAL_GPIO_Init+0x13a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	e001      	b.n	8001f0e <HAL_GPIO_Init+0x13e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f10:	69bb      	ldr	r3, [r7, #24]
 8001f12:	2bff      	cmp	r3, #255	@ 0xff
 8001f14:	d802      	bhi.n	8001f1c <HAL_GPIO_Init+0x14c>
 8001f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	e002      	b.n	8001f22 <HAL_GPIO_Init+0x152>
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1e:	3b08      	subs	r3, #8
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	210f      	movs	r1, #15
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	401a      	ands	r2, r3
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	f000 80b1 	beq.w	80020b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f50:	4b4d      	ldr	r3, [pc, #308]	@ (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	4a4c      	ldr	r2, [pc, #304]	@ (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6193      	str	r3, [r2, #24]
 8001f5c:	4b4a      	ldr	r3, [pc, #296]	@ (8002088 <HAL_GPIO_Init+0x2b8>)
 8001f5e:	699b      	ldr	r3, [r3, #24]
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f68:	4a48      	ldr	r2, [pc, #288]	@ (800208c <HAL_GPIO_Init+0x2bc>)
 8001f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6c:	089b      	lsrs	r3, r3, #2
 8001f6e:	3302      	adds	r3, #2
 8001f70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	f003 0303 	and.w	r3, r3, #3
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	220f      	movs	r2, #15
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a40      	ldr	r2, [pc, #256]	@ (8002090 <HAL_GPIO_Init+0x2c0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <HAL_GPIO_Init+0x1ec>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a3f      	ldr	r2, [pc, #252]	@ (8002094 <HAL_GPIO_Init+0x2c4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d00d      	beq.n	8001fb8 <HAL_GPIO_Init+0x1e8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8002098 <HAL_GPIO_Init+0x2c8>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d007      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e4>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3d      	ldr	r2, [pc, #244]	@ (800209c <HAL_GPIO_Init+0x2cc>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d101      	bne.n	8001fb0 <HAL_GPIO_Init+0x1e0>
 8001fac:	2303      	movs	r3, #3
 8001fae:	e006      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb0:	2304      	movs	r3, #4
 8001fb2:	e004      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	e002      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e000      	b.n	8001fbe <HAL_GPIO_Init+0x1ee>
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc0:	f002 0203 	and.w	r2, r2, #3
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	4093      	lsls	r3, r2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fce:	492f      	ldr	r1, [pc, #188]	@ (800208c <HAL_GPIO_Init+0x2bc>)
 8001fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd2:	089b      	lsrs	r3, r3, #2
 8001fd4:	3302      	adds	r3, #2
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	492c      	ldr	r1, [pc, #176]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4928      	ldr	r1, [pc, #160]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002000:	4013      	ands	r3, r2
 8002002:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d006      	beq.n	800201e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002010:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	4922      	ldr	r1, [pc, #136]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	60cb      	str	r3, [r1, #12]
 800201c:	e006      	b.n	800202c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	43db      	mvns	r3, r3
 8002026:	491e      	ldr	r1, [pc, #120]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002028:	4013      	ands	r3, r2
 800202a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d006      	beq.n	8002046 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	4918      	ldr	r1, [pc, #96]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	4313      	orrs	r3, r2
 8002042:	604b      	str	r3, [r1, #4]
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002046:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	43db      	mvns	r3, r3
 800204e:	4914      	ldr	r1, [pc, #80]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002050:	4013      	ands	r3, r2
 8002052:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d021      	beq.n	80020a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002060:	4b0f      	ldr	r3, [pc, #60]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	490e      	ldr	r1, [pc, #56]	@ (80020a0 <HAL_GPIO_Init+0x2d0>)
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	4313      	orrs	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
 800206c:	e021      	b.n	80020b2 <HAL_GPIO_Init+0x2e2>
 800206e:	bf00      	nop
 8002070:	10320000 	.word	0x10320000
 8002074:	10310000 	.word	0x10310000
 8002078:	10220000 	.word	0x10220000
 800207c:	10210000 	.word	0x10210000
 8002080:	10120000 	.word	0x10120000
 8002084:	10110000 	.word	0x10110000
 8002088:	40021000 	.word	0x40021000
 800208c:	40010000 	.word	0x40010000
 8002090:	40010800 	.word	0x40010800
 8002094:	40010c00 	.word	0x40010c00
 8002098:	40011000 	.word	0x40011000
 800209c:	40011400 	.word	0x40011400
 80020a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	4909      	ldr	r1, [pc, #36]	@ (80020d4 <HAL_GPIO_Init+0x304>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	3301      	adds	r3, #1
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020be:	fa22 f303 	lsr.w	r3, r2, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f47f ae8e 	bne.w	8001de4 <HAL_GPIO_Init+0x14>
  }
}
 80020c8:	bf00      	nop
 80020ca:	bf00      	nop
 80020cc:	372c      	adds	r7, #44	@ 0x2c
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bc80      	pop	{r7}
 80020d2:	4770      	bx	lr
 80020d4:	40010400 	.word	0x40010400

080020d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e12b      	b.n	8002342 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d106      	bne.n	8002104 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff fb58 	bl	80017b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2224      	movs	r2, #36	@ 0x24
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800212a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800213a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800213c:	f001 f832 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8002140:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	4a81      	ldr	r2, [pc, #516]	@ (800234c <HAL_I2C_Init+0x274>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d807      	bhi.n	800215c <HAL_I2C_Init+0x84>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	4a80      	ldr	r2, [pc, #512]	@ (8002350 <HAL_I2C_Init+0x278>)
 8002150:	4293      	cmp	r3, r2
 8002152:	bf94      	ite	ls
 8002154:	2301      	movls	r3, #1
 8002156:	2300      	movhi	r3, #0
 8002158:	b2db      	uxtb	r3, r3
 800215a:	e006      	b.n	800216a <HAL_I2C_Init+0x92>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a7d      	ldr	r2, [pc, #500]	@ (8002354 <HAL_I2C_Init+0x27c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	bf94      	ite	ls
 8002164:	2301      	movls	r3, #1
 8002166:	2300      	movhi	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e0e7      	b.n	8002342 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a78      	ldr	r2, [pc, #480]	@ (8002358 <HAL_I2C_Init+0x280>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0c9b      	lsrs	r3, r3, #18
 800217c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68ba      	ldr	r2, [r7, #8]
 800218e:	430a      	orrs	r2, r1
 8002190:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	4a6a      	ldr	r2, [pc, #424]	@ (800234c <HAL_I2C_Init+0x274>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d802      	bhi.n	80021ac <HAL_I2C_Init+0xd4>
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	3301      	adds	r3, #1
 80021aa:	e009      	b.n	80021c0 <HAL_I2C_Init+0xe8>
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80021b2:	fb02 f303 	mul.w	r3, r2, r3
 80021b6:	4a69      	ldr	r2, [pc, #420]	@ (800235c <HAL_I2C_Init+0x284>)
 80021b8:	fba2 2303 	umull	r2, r3, r2, r3
 80021bc:	099b      	lsrs	r3, r3, #6
 80021be:	3301      	adds	r3, #1
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80021d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	495c      	ldr	r1, [pc, #368]	@ (800234c <HAL_I2C_Init+0x274>)
 80021dc:	428b      	cmp	r3, r1
 80021de:	d819      	bhi.n	8002214 <HAL_I2C_Init+0x13c>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	1e59      	subs	r1, r3, #1
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80021ee:	1c59      	adds	r1, r3, #1
 80021f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80021f4:	400b      	ands	r3, r1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00a      	beq.n	8002210 <HAL_I2C_Init+0x138>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	1e59      	subs	r1, r3, #1
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fbb1 f3f3 	udiv	r3, r1, r3
 8002208:	3301      	adds	r3, #1
 800220a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800220e:	e051      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002210:	2304      	movs	r3, #4
 8002212:	e04f      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d111      	bne.n	8002240 <HAL_I2C_Init+0x168>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1e58      	subs	r0, r3, #1
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6859      	ldr	r1, [r3, #4]
 8002224:	460b      	mov	r3, r1
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	440b      	add	r3, r1
 800222a:	fbb0 f3f3 	udiv	r3, r0, r3
 800222e:	3301      	adds	r3, #1
 8002230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002234:	2b00      	cmp	r3, #0
 8002236:	bf0c      	ite	eq
 8002238:	2301      	moveq	r3, #1
 800223a:	2300      	movne	r3, #0
 800223c:	b2db      	uxtb	r3, r3
 800223e:	e012      	b.n	8002266 <HAL_I2C_Init+0x18e>
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1e58      	subs	r0, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6859      	ldr	r1, [r3, #4]
 8002248:	460b      	mov	r3, r1
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	0099      	lsls	r1, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	fbb0 f3f3 	udiv	r3, r0, r3
 8002256:	3301      	adds	r3, #1
 8002258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf0c      	ite	eq
 8002260:	2301      	moveq	r3, #1
 8002262:	2300      	movne	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <HAL_I2C_Init+0x196>
 800226a:	2301      	movs	r3, #1
 800226c:	e022      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d10e      	bne.n	8002294 <HAL_I2C_Init+0x1bc>
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1e58      	subs	r0, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6859      	ldr	r1, [r3, #4]
 800227e:	460b      	mov	r3, r1
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	440b      	add	r3, r1
 8002284:	fbb0 f3f3 	udiv	r3, r0, r3
 8002288:	3301      	adds	r3, #1
 800228a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800228e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002292:	e00f      	b.n	80022b4 <HAL_I2C_Init+0x1dc>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1e58      	subs	r0, r3, #1
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	0099      	lsls	r1, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80022aa:	3301      	adds	r3, #1
 80022ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	6809      	ldr	r1, [r1, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	431a      	orrs	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80022e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	6911      	ldr	r1, [r2, #16]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	68d2      	ldr	r2, [r2, #12]
 80022ee:	4311      	orrs	r1, r2
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	6812      	ldr	r2, [r2, #0]
 80022f4:	430b      	orrs	r3, r1
 80022f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695a      	ldr	r2, [r3, #20]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	431a      	orrs	r2, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f042 0201 	orr.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	000186a0 	.word	0x000186a0
 8002350:	001e847f 	.word	0x001e847f
 8002354:	003d08ff 	.word	0x003d08ff
 8002358:	431bde83 	.word	0x431bde83
 800235c:	10624dd3 	.word	0x10624dd3

08002360 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af02      	add	r7, sp, #8
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	607a      	str	r2, [r7, #4]
 800236a:	461a      	mov	r2, r3
 800236c:	460b      	mov	r3, r1
 800236e:	817b      	strh	r3, [r7, #10]
 8002370:	4613      	mov	r3, r2
 8002372:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff fc1a 	bl	8001bac <HAL_GetTick>
 8002378:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b20      	cmp	r3, #32
 8002384:	f040 80e0 	bne.w	8002548 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	2319      	movs	r3, #25
 800238e:	2201      	movs	r2, #1
 8002390:	4970      	ldr	r1, [pc, #448]	@ (8002554 <HAL_I2C_Master_Transmit+0x1f4>)
 8002392:	68f8      	ldr	r0, [r7, #12]
 8002394:	f000 f964 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d001      	beq.n	80023a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800239e:	2302      	movs	r3, #2
 80023a0:	e0d3      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x50>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e0cc      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d007      	beq.n	80023d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f042 0201 	orr.w	r2, r2, #1
 80023d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2221      	movs	r2, #33	@ 0x21
 80023ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2210      	movs	r2, #16
 80023f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	893a      	ldrh	r2, [r7, #8]
 8002406:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	4a50      	ldr	r2, [pc, #320]	@ (8002558 <HAL_I2C_Master_Transmit+0x1f8>)
 8002416:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002418:	8979      	ldrh	r1, [r7, #10]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	6a3a      	ldr	r2, [r7, #32]
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 f89c 	bl	800255c <I2C_MasterRequestWrite>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e08d      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800242e:	2300      	movs	r3, #0
 8002430:	613b      	str	r3, [r7, #16]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002444:	e066      	b.n	8002514 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	6a39      	ldr	r1, [r7, #32]
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f000 fa22 	bl	8002894 <I2C_WaitOnTXEFlagUntilTimeout>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00d      	beq.n	8002472 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	2b04      	cmp	r3, #4
 800245c:	d107      	bne.n	800246e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800246c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06b      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002476:	781a      	ldrb	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248c:	b29b      	uxth	r3, r3
 800248e:	3b01      	subs	r3, #1
 8002490:	b29a      	uxth	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695b      	ldr	r3, [r3, #20]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b04      	cmp	r3, #4
 80024ae:	d11b      	bne.n	80024e8 <HAL_I2C_Master_Transmit+0x188>
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	781a      	ldrb	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e0:	3b01      	subs	r3, #1
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	6a39      	ldr	r1, [r7, #32]
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa19 	bl	8002924 <I2C_WaitOnBTFFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00d      	beq.n	8002514 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fc:	2b04      	cmp	r3, #4
 80024fe:	d107      	bne.n	8002510 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800250e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e01a      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	2b00      	cmp	r3, #0
 800251a:	d194      	bne.n	8002446 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800252a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002544:	2300      	movs	r3, #0
 8002546:	e000      	b.n	800254a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002548:	2302      	movs	r3, #2
  }
}
 800254a:	4618      	mov	r0, r3
 800254c:	3718      	adds	r7, #24
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	00100002 	.word	0x00100002
 8002558:	ffff0000 	.word	0xffff0000

0800255c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af02      	add	r7, sp, #8
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	603b      	str	r3, [r7, #0]
 8002568:	460b      	mov	r3, r1
 800256a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b08      	cmp	r3, #8
 8002576:	d006      	beq.n	8002586 <I2C_MasterRequestWrite+0x2a>
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d003      	beq.n	8002586 <I2C_MasterRequestWrite+0x2a>
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002584:	d108      	bne.n	8002598 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e00b      	b.n	80025b0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	2b12      	cmp	r3, #18
 800259e:	d107      	bne.n	80025b0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025ae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f84f 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00d      	beq.n	80025e4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025d6:	d103      	bne.n	80025e0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025de:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e035      	b.n	8002650 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80025ec:	d108      	bne.n	8002600 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80025ee:	897b      	ldrh	r3, [r7, #10]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	461a      	mov	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80025fc:	611a      	str	r2, [r3, #16]
 80025fe:	e01b      	b.n	8002638 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002600:	897b      	ldrh	r3, [r7, #10]
 8002602:	11db      	asrs	r3, r3, #7
 8002604:	b2db      	uxtb	r3, r3
 8002606:	f003 0306 	and.w	r3, r3, #6
 800260a:	b2db      	uxtb	r3, r3
 800260c:	f063 030f 	orn	r3, r3, #15
 8002610:	b2da      	uxtb	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	490e      	ldr	r1, [pc, #56]	@ (8002658 <I2C_MasterRequestWrite+0xfc>)
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 f898 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e010      	b.n	8002650 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800262e:	897b      	ldrh	r3, [r7, #10]
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	4907      	ldr	r1, [pc, #28]	@ (800265c <I2C_MasterRequestWrite+0x100>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f888 	bl	8002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800264e:	2300      	movs	r3, #0
}
 8002650:	4618      	mov	r0, r3
 8002652:	3718      	adds	r7, #24
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}
 8002658:	00010008 	.word	0x00010008
 800265c:	00010002 	.word	0x00010002

08002660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002670:	e048      	b.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002678:	d044      	beq.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800267a:	f7ff fa97 	bl	8001bac <HAL_GetTick>
 800267e:	4602      	mov	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	429a      	cmp	r2, r3
 8002688:	d302      	bcc.n	8002690 <I2C_WaitOnFlagUntilTimeout+0x30>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d139      	bne.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d10d      	bne.n	80026b6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	695b      	ldr	r3, [r3, #20]
 80026a0:	43da      	mvns	r2, r3
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	4013      	ands	r3, r2
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	bf0c      	ite	eq
 80026ac:	2301      	moveq	r3, #1
 80026ae:	2300      	movne	r3, #0
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	461a      	mov	r2, r3
 80026b4:	e00c      	b.n	80026d0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	43da      	mvns	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4013      	ands	r3, r2
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf0c      	ite	eq
 80026c8:	2301      	moveq	r3, #1
 80026ca:	2300      	movne	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	79fb      	ldrb	r3, [r7, #7]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d116      	bne.n	8002704 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	2220      	movs	r2, #32
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2200      	movs	r2, #0
 80026e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f0:	f043 0220 	orr.w	r2, r3, #32
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e023      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	0c1b      	lsrs	r3, r3, #16
 8002708:	b2db      	uxtb	r3, r3
 800270a:	2b01      	cmp	r3, #1
 800270c:	d10d      	bne.n	800272a <I2C_WaitOnFlagUntilTimeout+0xca>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	43da      	mvns	r2, r3
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	4013      	ands	r3, r2
 800271a:	b29b      	uxth	r3, r3
 800271c:	2b00      	cmp	r3, #0
 800271e:	bf0c      	ite	eq
 8002720:	2301      	moveq	r3, #1
 8002722:	2300      	movne	r3, #0
 8002724:	b2db      	uxtb	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	e00c      	b.n	8002744 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	43da      	mvns	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf0c      	ite	eq
 800273c:	2301      	moveq	r3, #1
 800273e:	2300      	movne	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	461a      	mov	r2, r3
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	429a      	cmp	r2, r3
 8002748:	d093      	beq.n	8002672 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
 8002760:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002762:	e071      	b.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	695b      	ldr	r3, [r3, #20]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002772:	d123      	bne.n	80027bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002782:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800278c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a8:	f043 0204 	orr.w	r2, r3, #4
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e067      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c2:	d041      	beq.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c4:	f7ff f9f2 	bl	8001bac <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d302      	bcc.n	80027da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d136      	bne.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d10c      	bne.n	80027fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	43da      	mvns	r2, r3
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	4013      	ands	r3, r2
 80027f0:	b29b      	uxth	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	bf14      	ite	ne
 80027f6:	2301      	movne	r3, #1
 80027f8:	2300      	moveq	r3, #0
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	e00b      	b.n	8002816 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	43da      	mvns	r2, r3
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	4013      	ands	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	bf14      	ite	ne
 8002810:	2301      	movne	r3, #1
 8002812:	2300      	moveq	r3, #0
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b00      	cmp	r3, #0
 8002818:	d016      	beq.n	8002848 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002834:	f043 0220 	orr.w	r2, r3, #32
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e021      	b.n	800288c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	0c1b      	lsrs	r3, r3, #16
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10c      	bne.n	800286c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	43da      	mvns	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	4013      	ands	r3, r2
 800285e:	b29b      	uxth	r3, r3
 8002860:	2b00      	cmp	r3, #0
 8002862:	bf14      	ite	ne
 8002864:	2301      	movne	r3, #1
 8002866:	2300      	moveq	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	e00b      	b.n	8002884 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	43da      	mvns	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	4013      	ands	r3, r2
 8002878:	b29b      	uxth	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	bf14      	ite	ne
 800287e:	2301      	movne	r3, #1
 8002880:	2300      	moveq	r3, #0
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	f47f af6d 	bne.w	8002764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3710      	adds	r7, #16
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028a0:	e034      	b.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f886 	bl	80029b4 <I2C_IsAcknowledgeFailed>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e034      	b.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d028      	beq.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7ff f977 	bl	8001bac <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d11d      	bne.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028da:	2b80      	cmp	r3, #128	@ 0x80
 80028dc:	d016      	beq.n	800290c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f8:	f043 0220 	orr.w	r2, r3, #32
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e007      	b.n	800291c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002916:	2b80      	cmp	r3, #128	@ 0x80
 8002918:	d1c3      	bne.n	80028a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002930:	e034      	b.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 f83e 	bl	80029b4 <I2C_IsAcknowledgeFailed>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e034      	b.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d028      	beq.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294a:	f7ff f92f 	bl	8001bac <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	d302      	bcc.n	8002960 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d11d      	bne.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	f003 0304 	and.w	r3, r3, #4
 800296a:	2b04      	cmp	r3, #4
 800296c:	d016      	beq.n	800299c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2220      	movs	r2, #32
 8002978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002988:	f043 0220 	orr.w	r2, r3, #32
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e007      	b.n	80029ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	f003 0304 	and.w	r3, r3, #4
 80029a6:	2b04      	cmp	r3, #4
 80029a8:	d1c3      	bne.n	8002932 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3710      	adds	r7, #16
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029ca:	d11b      	bne.n	8002a04 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f0:	f043 0204 	orr.w	r2, r3, #4
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	370c      	adds	r7, #12
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e272      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 8087 	beq.w	8002b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a30:	4b92      	ldr	r3, [pc, #584]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f003 030c 	and.w	r3, r3, #12
 8002a38:	2b04      	cmp	r3, #4
 8002a3a:	d00c      	beq.n	8002a56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a3c:	4b8f      	ldr	r3, [pc, #572]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 030c 	and.w	r3, r3, #12
 8002a44:	2b08      	cmp	r3, #8
 8002a46:	d112      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
 8002a48:	4b8c      	ldr	r3, [pc, #560]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a54:	d10b      	bne.n	8002a6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a56:	4b89      	ldr	r3, [pc, #548]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d06c      	beq.n	8002b3c <HAL_RCC_OscConfig+0x12c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d168      	bne.n	8002b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e24c      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a76:	d106      	bne.n	8002a86 <HAL_RCC_OscConfig+0x76>
 8002a78:	4b80      	ldr	r3, [pc, #512]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a82:	6013      	str	r3, [r2, #0]
 8002a84:	e02e      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10c      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x98>
 8002a8e:	4b7b      	ldr	r3, [pc, #492]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a7a      	ldr	r2, [pc, #488]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a98:	6013      	str	r3, [r2, #0]
 8002a9a:	4b78      	ldr	r3, [pc, #480]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a77      	ldr	r2, [pc, #476]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002aa0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa4:	6013      	str	r3, [r2, #0]
 8002aa6:	e01d      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ab0:	d10c      	bne.n	8002acc <HAL_RCC_OscConfig+0xbc>
 8002ab2:	4b72      	ldr	r3, [pc, #456]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a71      	ldr	r2, [pc, #452]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ab8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002abc:	6013      	str	r3, [r2, #0]
 8002abe:	4b6f      	ldr	r3, [pc, #444]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ac4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac8:	6013      	str	r3, [r2, #0]
 8002aca:	e00b      	b.n	8002ae4 <HAL_RCC_OscConfig+0xd4>
 8002acc:	4b6b      	ldr	r3, [pc, #428]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ad2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ad6:	6013      	str	r3, [r2, #0]
 8002ad8:	4b68      	ldr	r3, [pc, #416]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a67      	ldr	r2, [pc, #412]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002ade:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ae2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d013      	beq.n	8002b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aec:	f7ff f85e 	bl	8001bac <HAL_GetTick>
 8002af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	e008      	b.n	8002b06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002af4:	f7ff f85a 	bl	8001bac <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b64      	cmp	r3, #100	@ 0x64
 8002b00:	d901      	bls.n	8002b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	e200      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	4b5d      	ldr	r3, [pc, #372]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d0f0      	beq.n	8002af4 <HAL_RCC_OscConfig+0xe4>
 8002b12:	e014      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b14:	f7ff f84a 	bl	8001bac <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b1c:	f7ff f846 	bl	8001bac <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b64      	cmp	r3, #100	@ 0x64
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e1ec      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	4b53      	ldr	r3, [pc, #332]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x10c>
 8002b3a:	e000      	b.n	8002b3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d063      	beq.n	8002c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b4a:	4b4c      	ldr	r3, [pc, #304]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 030c 	and.w	r3, r3, #12
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00b      	beq.n	8002b6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b56:	4b49      	ldr	r3, [pc, #292]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d11c      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
 8002b62:	4b46      	ldr	r3, [pc, #280]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b6e:	4b43      	ldr	r3, [pc, #268]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d005      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e1c0      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b86:	4b3d      	ldr	r3, [pc, #244]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4939      	ldr	r1, [pc, #228]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	e03a      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ba4:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7fe ffff 	bl	8001bac <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bb2:	f7fe fffb 	bl	8001bac <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e1a1      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bd0:	4b2a      	ldr	r3, [pc, #168]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	4927      	ldr	r1, [pc, #156]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	600b      	str	r3, [r1, #0]
 8002be4:	e015      	b.n	8002c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002be6:	4b26      	ldr	r3, [pc, #152]	@ (8002c80 <HAL_RCC_OscConfig+0x270>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe ffde 	bl	8001bac <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf4:	f7fe ffda 	bl	8001bac <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e180      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	4b1d      	ldr	r3, [pc, #116]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03a      	beq.n	8002c94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c26:	4b17      	ldr	r3, [pc, #92]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c2c:	f7fe ffbe 	bl	8001bac <HAL_GetTick>
 8002c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c32:	e008      	b.n	8002c46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c34:	f7fe ffba 	bl	8001bac <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d901      	bls.n	8002c46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e160      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	4b0d      	ldr	r3, [pc, #52]	@ (8002c7c <HAL_RCC_OscConfig+0x26c>)
 8002c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0f0      	beq.n	8002c34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c52:	2001      	movs	r0, #1
 8002c54:	f000 faba 	bl	80031cc <RCC_Delay>
 8002c58:	e01c      	b.n	8002c94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c60:	f7fe ffa4 	bl	8001bac <HAL_GetTick>
 8002c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c66:	e00f      	b.n	8002c88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c68:	f7fe ffa0 	bl	8001bac <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d908      	bls.n	8002c88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e146      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
 8002c7a:	bf00      	nop
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	42420000 	.word	0x42420000
 8002c84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c88:	4b92      	ldr	r3, [pc, #584]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1e9      	bne.n	8002c68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 80a6 	beq.w	8002dee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ca6:	4b8b      	ldr	r3, [pc, #556]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cb2:	4b88      	ldr	r3, [pc, #544]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb4:	69db      	ldr	r3, [r3, #28]
 8002cb6:	4a87      	ldr	r2, [pc, #540]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cbc:	61d3      	str	r3, [r2, #28]
 8002cbe:	4b85      	ldr	r3, [pc, #532]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002cc0:	69db      	ldr	r3, [r3, #28]
 8002cc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc6:	60bb      	str	r3, [r7, #8]
 8002cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cce:	4b82      	ldr	r3, [pc, #520]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d118      	bne.n	8002d0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cda:	4b7f      	ldr	r3, [pc, #508]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a7e      	ldr	r2, [pc, #504]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002ce0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ce6:	f7fe ff61 	bl	8001bac <HAL_GetTick>
 8002cea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cee:	f7fe ff5d 	bl	8001bac <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b64      	cmp	r3, #100	@ 0x64
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e103      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	4b75      	ldr	r3, [pc, #468]	@ (8002ed8 <HAL_RCC_OscConfig+0x4c8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0f0      	beq.n	8002cee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d106      	bne.n	8002d22 <HAL_RCC_OscConfig+0x312>
 8002d14:	4b6f      	ldr	r3, [pc, #444]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a6e      	ldr	r2, [pc, #440]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	e02d      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCC_OscConfig+0x334>
 8002d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d2c:	6a1b      	ldr	r3, [r3, #32]
 8002d2e:	4a69      	ldr	r2, [pc, #420]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	6213      	str	r3, [r2, #32]
 8002d36:	4b67      	ldr	r3, [pc, #412]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d38:	6a1b      	ldr	r3, [r3, #32]
 8002d3a:	4a66      	ldr	r2, [pc, #408]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	f023 0304 	bic.w	r3, r3, #4
 8002d40:	6213      	str	r3, [r2, #32]
 8002d42:	e01c      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	2b05      	cmp	r3, #5
 8002d4a:	d10c      	bne.n	8002d66 <HAL_RCC_OscConfig+0x356>
 8002d4c:	4b61      	ldr	r3, [pc, #388]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	4a60      	ldr	r2, [pc, #384]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6213      	str	r3, [r2, #32]
 8002d58:	4b5e      	ldr	r3, [pc, #376]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4a5d      	ldr	r2, [pc, #372]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d5e:	f043 0301 	orr.w	r3, r3, #1
 8002d62:	6213      	str	r3, [r2, #32]
 8002d64:	e00b      	b.n	8002d7e <HAL_RCC_OscConfig+0x36e>
 8002d66:	4b5b      	ldr	r3, [pc, #364]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4a5a      	ldr	r2, [pc, #360]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	f023 0301 	bic.w	r3, r3, #1
 8002d70:	6213      	str	r3, [r2, #32]
 8002d72:	4b58      	ldr	r3, [pc, #352]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4a57      	ldr	r2, [pc, #348]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	f023 0304 	bic.w	r3, r3, #4
 8002d7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7fe ff11 	bl	8001bac <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d8c:	e00a      	b.n	8002da4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8e:	f7fe ff0d 	bl	8001bac <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d901      	bls.n	8002da4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e0b1      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da4:	4b4b      	ldr	r3, [pc, #300]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0ee      	beq.n	8002d8e <HAL_RCC_OscConfig+0x37e>
 8002db0:	e014      	b.n	8002ddc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002db2:	f7fe fefb 	bl	8001bac <HAL_GetTick>
 8002db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002db8:	e00a      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dba:	f7fe fef7 	bl	8001bac <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e09b      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dd0:	4b40      	ldr	r3, [pc, #256]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0302 	and.w	r3, r3, #2
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1ee      	bne.n	8002dba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ddc:	7dfb      	ldrb	r3, [r7, #23]
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d105      	bne.n	8002dee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002de2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4a3b      	ldr	r2, [pc, #236]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002de8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002dec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 8087 	beq.w	8002f06 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002df8:	4b36      	ldr	r3, [pc, #216]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f003 030c 	and.w	r3, r3, #12
 8002e00:	2b08      	cmp	r3, #8
 8002e02:	d061      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d146      	bne.n	8002e9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e0c:	4b33      	ldr	r3, [pc, #204]	@ (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e12:	f7fe fecb 	bl	8001bac <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1a:	f7fe fec7 	bl	8001bac <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e06d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	4b29      	ldr	r3, [pc, #164]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1f0      	bne.n	8002e1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a1b      	ldr	r3, [r3, #32]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e40:	d108      	bne.n	8002e54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e42:	4b24      	ldr	r3, [pc, #144]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4921      	ldr	r1, [pc, #132]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e54:	4b1f      	ldr	r3, [pc, #124]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6a19      	ldr	r1, [r3, #32]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e64:	430b      	orrs	r3, r1
 8002e66:	491b      	ldr	r1, [pc, #108]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe fe9b 	bl	8001bac <HAL_GetTick>
 8002e76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e78:	e008      	b.n	8002e8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7a:	f7fe fe97 	bl	8001bac <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d901      	bls.n	8002e8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e88:	2303      	movs	r3, #3
 8002e8a:	e03d      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d0f0      	beq.n	8002e7a <HAL_RCC_OscConfig+0x46a>
 8002e98:	e035      	b.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <HAL_RCC_OscConfig+0x4cc>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7fe fe84 	bl	8001bac <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7fe fe80 	bl	8001bac <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e026      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_OscConfig+0x4c4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x498>
 8002ec6:	e01e      	b.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d107      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e019      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCC_OscConfig+0x500>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d106      	bne.n	8002f02 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d001      	beq.n	8002f06 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000

08002f14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0d0      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f28:	4b6a      	ldr	r3, [pc, #424]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	683a      	ldr	r2, [r7, #0]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d910      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f36:	4b67      	ldr	r3, [pc, #412]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f023 0207 	bic.w	r2, r3, #7
 8002f3e:	4965      	ldr	r1, [pc, #404]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f46:	4b63      	ldr	r3, [pc, #396]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d001      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0b8      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d020      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f70:	4b59      	ldr	r3, [pc, #356]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4a58      	ldr	r2, [pc, #352]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f76:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f7a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f88:	4b53      	ldr	r3, [pc, #332]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a52      	ldr	r2, [pc, #328]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f92:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f94:	4b50      	ldr	r3, [pc, #320]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	494d      	ldr	r1, [pc, #308]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d040      	beq.n	8003034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d107      	bne.n	8002fca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	4b47      	ldr	r3, [pc, #284]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e07f      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d107      	bne.n	8002fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fd2:	4b41      	ldr	r3, [pc, #260]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d109      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e073      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe2:	4b3d      	ldr	r3, [pc, #244]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d101      	bne.n	8002ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e06b      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ff2:	4b39      	ldr	r3, [pc, #228]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f023 0203 	bic.w	r2, r3, #3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4936      	ldr	r1, [pc, #216]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003004:	f7fe fdd2 	bl	8001bac <HAL_GetTick>
 8003008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300a:	e00a      	b.n	8003022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300c:	f7fe fdce 	bl	8001bac <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e053      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003022:	4b2d      	ldr	r3, [pc, #180]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 020c 	and.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	429a      	cmp	r2, r3
 8003032:	d1eb      	bne.n	800300c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003034:	4b27      	ldr	r3, [pc, #156]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d210      	bcs.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b24      	ldr	r3, [pc, #144]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f023 0207 	bic.w	r2, r3, #7
 800304a:	4922      	ldr	r1, [pc, #136]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	4313      	orrs	r3, r2
 8003050:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003052:	4b20      	ldr	r3, [pc, #128]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0307 	and.w	r3, r3, #7
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	429a      	cmp	r2, r3
 800305e:	d001      	beq.n	8003064 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e032      	b.n	80030ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0304 	and.w	r3, r3, #4
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003070:	4b19      	ldr	r3, [pc, #100]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	4916      	ldr	r1, [pc, #88]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b00      	cmp	r3, #0
 800308c:	d009      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800308e:	4b12      	ldr	r3, [pc, #72]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	691b      	ldr	r3, [r3, #16]
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	490e      	ldr	r1, [pc, #56]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030a2:	f000 f821 	bl	80030e8 <HAL_RCC_GetSysClockFreq>
 80030a6:	4602      	mov	r2, r0
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c4>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	091b      	lsrs	r3, r3, #4
 80030ae:	f003 030f 	and.w	r3, r3, #15
 80030b2:	490a      	ldr	r1, [pc, #40]	@ (80030dc <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	5ccb      	ldrb	r3, [r1, r3]
 80030b6:	fa22 f303 	lsr.w	r3, r2, r3
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <HAL_RCC_ClockConfig+0x1cc>)
 80030bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030be:	4b09      	ldr	r3, [pc, #36]	@ (80030e4 <HAL_RCC_ClockConfig+0x1d0>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fe fd30 	bl	8001b28 <HAL_InitTick>

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40022000 	.word	0x40022000
 80030d8:	40021000 	.word	0x40021000
 80030dc:	08006794 	.word	0x08006794
 80030e0:	20000004 	.word	0x20000004
 80030e4:	20000008 	.word	0x20000008

080030e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	2300      	movs	r3, #0
 80030f8:	617b      	str	r3, [r7, #20]
 80030fa:	2300      	movs	r3, #0
 80030fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003102:	4b1e      	ldr	r3, [pc, #120]	@ (800317c <HAL_RCC_GetSysClockFreq+0x94>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b04      	cmp	r3, #4
 8003110:	d002      	beq.n	8003118 <HAL_RCC_GetSysClockFreq+0x30>
 8003112:	2b08      	cmp	r3, #8
 8003114:	d003      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x36>
 8003116:	e027      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x98>)
 800311a:	613b      	str	r3, [r7, #16]
      break;
 800311c:	e027      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	0c9b      	lsrs	r3, r3, #18
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	4a17      	ldr	r2, [pc, #92]	@ (8003184 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003128:	5cd3      	ldrb	r3, [r2, r3]
 800312a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d010      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003136:	4b11      	ldr	r3, [pc, #68]	@ (800317c <HAL_RCC_GetSysClockFreq+0x94>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	0c5b      	lsrs	r3, r3, #17
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	4a11      	ldr	r2, [pc, #68]	@ (8003188 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003142:	5cd3      	ldrb	r3, [r2, r3]
 8003144:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a0d      	ldr	r2, [pc, #52]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x98>)
 800314a:	fb03 f202 	mul.w	r2, r3, r2
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	fbb2 f3f3 	udiv	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
 8003156:	e004      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a0c      	ldr	r2, [pc, #48]	@ (800318c <HAL_RCC_GetSysClockFreq+0xa4>)
 800315c:	fb02 f303 	mul.w	r3, r2, r3
 8003160:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	613b      	str	r3, [r7, #16]
      break;
 8003166:	e002      	b.n	800316e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003168:	4b05      	ldr	r3, [pc, #20]	@ (8003180 <HAL_RCC_GetSysClockFreq+0x98>)
 800316a:	613b      	str	r3, [r7, #16]
      break;
 800316c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800316e:	693b      	ldr	r3, [r7, #16]
}
 8003170:	4618      	mov	r0, r3
 8003172:	371c      	adds	r7, #28
 8003174:	46bd      	mov	sp, r7
 8003176:	bc80      	pop	{r7}
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	007a1200 	.word	0x007a1200
 8003184:	080067ac 	.word	0x080067ac
 8003188:	080067bc 	.word	0x080067bc
 800318c:	003d0900 	.word	0x003d0900

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b02      	ldr	r3, [pc, #8]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	bc80      	pop	{r7}
 800319e:	4770      	bx	lr
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031a8:	f7ff fff2 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b05      	ldr	r3, [pc, #20]	@ (80031c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4903      	ldr	r1, [pc, #12]	@ (80031c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40021000 	.word	0x40021000
 80031c8:	080067a4 	.word	0x080067a4

080031cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <RCC_Delay+0x34>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003204 <RCC_Delay+0x38>)
 80031da:	fba2 2303 	umull	r2, r3, r2, r3
 80031de:	0a5b      	lsrs	r3, r3, #9
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	fb02 f303 	mul.w	r3, r2, r3
 80031e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80031e8:	bf00      	nop
  }
  while (Delay --);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	1e5a      	subs	r2, r3, #1
 80031ee:	60fa      	str	r2, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1f9      	bne.n	80031e8 <RCC_Delay+0x1c>
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr
 8003200:	20000004 	.word	0x20000004
 8003204:	10624dd3 	.word	0x10624dd3

08003208 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e041      	b.n	800329e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d106      	bne.n	8003234 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f7fe fafe 	bl	8001830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3304      	adds	r3, #4
 8003244:	4619      	mov	r1, r3
 8003246:	4610      	mov	r0, r2
 8003248:	f000 f992 	bl	8003570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2201      	movs	r2, #1
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800329c:	2300      	movs	r3, #0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_TIM_PWM_Start+0x24>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	bf14      	ite	ne
 80032c4:	2301      	movne	r3, #1
 80032c6:	2300      	moveq	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e022      	b.n	8003312 <HAL_TIM_PWM_Start+0x6a>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d109      	bne.n	80032e6 <HAL_TIM_PWM_Start+0x3e>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	bf14      	ite	ne
 80032de:	2301      	movne	r3, #1
 80032e0:	2300      	moveq	r3, #0
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	e015      	b.n	8003312 <HAL_TIM_PWM_Start+0x6a>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b08      	cmp	r3, #8
 80032ea:	d109      	bne.n	8003300 <HAL_TIM_PWM_Start+0x58>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	bf14      	ite	ne
 80032f8:	2301      	movne	r3, #1
 80032fa:	2300      	moveq	r3, #0
 80032fc:	b2db      	uxtb	r3, r3
 80032fe:	e008      	b.n	8003312 <HAL_TIM_PWM_Start+0x6a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b01      	cmp	r3, #1
 800330a:	bf14      	ite	ne
 800330c:	2301      	movne	r3, #1
 800330e:	2300      	moveq	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e05e      	b.n	80033d8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_TIM_PWM_Start+0x82>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003328:	e013      	b.n	8003352 <HAL_TIM_PWM_Start+0xaa>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d104      	bne.n	800333a <HAL_TIM_PWM_Start+0x92>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2202      	movs	r2, #2
 8003334:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003338:	e00b      	b.n	8003352 <HAL_TIM_PWM_Start+0xaa>
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	2b08      	cmp	r3, #8
 800333e:	d104      	bne.n	800334a <HAL_TIM_PWM_Start+0xa2>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003348:	e003      	b.n	8003352 <HAL_TIM_PWM_Start+0xaa>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2202      	movs	r2, #2
 800334e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2201      	movs	r2, #1
 8003358:	6839      	ldr	r1, [r7, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fafe 	bl	800395c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1e      	ldr	r2, [pc, #120]	@ (80033e0 <HAL_TIM_PWM_Start+0x138>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d107      	bne.n	800337a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003378:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a18      	ldr	r2, [pc, #96]	@ (80033e0 <HAL_TIM_PWM_Start+0x138>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_TIM_PWM_Start+0xfa>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800338c:	d009      	beq.n	80033a2 <HAL_TIM_PWM_Start+0xfa>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a14      	ldr	r2, [pc, #80]	@ (80033e4 <HAL_TIM_PWM_Start+0x13c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_TIM_PWM_Start+0xfa>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a12      	ldr	r2, [pc, #72]	@ (80033e8 <HAL_TIM_PWM_Start+0x140>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d111      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b06      	cmp	r3, #6
 80033b2:	d010      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	e007      	b.n	80033d6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40012c00 	.word	0x40012c00
 80033e4:	40000400 	.word	0x40000400
 80033e8:	40000800 	.word	0x40000800

080033ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b086      	sub	sp, #24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003406:	2302      	movs	r3, #2
 8003408:	e0ae      	b.n	8003568 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b0c      	cmp	r3, #12
 8003416:	f200 809f 	bhi.w	8003558 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800341a:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	08003455 	.word	0x08003455
 8003424:	08003559 	.word	0x08003559
 8003428:	08003559 	.word	0x08003559
 800342c:	08003559 	.word	0x08003559
 8003430:	08003495 	.word	0x08003495
 8003434:	08003559 	.word	0x08003559
 8003438:	08003559 	.word	0x08003559
 800343c:	08003559 	.word	0x08003559
 8003440:	080034d7 	.word	0x080034d7
 8003444:	08003559 	.word	0x08003559
 8003448:	08003559 	.word	0x08003559
 800344c:	08003559 	.word	0x08003559
 8003450:	08003517 	.word	0x08003517
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68b9      	ldr	r1, [r7, #8]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f8f6 	bl	800364c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699a      	ldr	r2, [r3, #24]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f042 0208 	orr.w	r2, r2, #8
 800346e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	699a      	ldr	r2, [r3, #24]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0204 	bic.w	r2, r2, #4
 800347e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6999      	ldr	r1, [r3, #24]
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	691a      	ldr	r2, [r3, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	619a      	str	r2, [r3, #24]
      break;
 8003492:	e064      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	4618      	mov	r0, r3
 800349c:	f000 f93c 	bl	8003718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6999      	ldr	r1, [r3, #24]
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	691b      	ldr	r3, [r3, #16]
 80034ca:	021a      	lsls	r2, r3, #8
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	619a      	str	r2, [r3, #24]
      break;
 80034d4:	e043      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 f985 	bl	80037ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0208 	orr.w	r2, r2, #8
 80034f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	69da      	ldr	r2, [r3, #28]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f022 0204 	bic.w	r2, r2, #4
 8003500:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	69d9      	ldr	r1, [r3, #28]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	61da      	str	r2, [r3, #28]
      break;
 8003514:	e023      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f9cf 	bl	80038c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	69da      	ldr	r2, [r3, #28]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003530:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	69da      	ldr	r2, [r3, #28]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003540:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	69d9      	ldr	r1, [r3, #28]
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	021a      	lsls	r2, r3, #8
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	61da      	str	r2, [r3, #28]
      break;
 8003556:	e002      	b.n	800355e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	75fb      	strb	r3, [r7, #23]
      break;
 800355c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a2f      	ldr	r2, [pc, #188]	@ (8003640 <TIM_Base_SetConfig+0xd0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00b      	beq.n	80035a0 <TIM_Base_SetConfig+0x30>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800358e:	d007      	beq.n	80035a0 <TIM_Base_SetConfig+0x30>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a2c      	ldr	r2, [pc, #176]	@ (8003644 <TIM_Base_SetConfig+0xd4>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d003      	beq.n	80035a0 <TIM_Base_SetConfig+0x30>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a2b      	ldr	r2, [pc, #172]	@ (8003648 <TIM_Base_SetConfig+0xd8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d108      	bne.n	80035b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a22      	ldr	r2, [pc, #136]	@ (8003640 <TIM_Base_SetConfig+0xd0>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d00b      	beq.n	80035d2 <TIM_Base_SetConfig+0x62>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035c0:	d007      	beq.n	80035d2 <TIM_Base_SetConfig+0x62>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003644 <TIM_Base_SetConfig+0xd4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d003      	beq.n	80035d2 <TIM_Base_SetConfig+0x62>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a1e      	ldr	r2, [pc, #120]	@ (8003648 <TIM_Base_SetConfig+0xd8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d108      	bne.n	80035e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689a      	ldr	r2, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a0d      	ldr	r2, [pc, #52]	@ (8003640 <TIM_Base_SetConfig+0xd0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d103      	bne.n	8003618 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	691a      	ldr	r2, [r3, #16]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d005      	beq.n	8003636 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
  }
}
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800

0800364c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a1b      	ldr	r3, [r3, #32]
 8003660:	f023 0201 	bic.w	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800367a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f023 0303 	bic.w	r3, r3, #3
 8003682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f023 0302 	bic.w	r3, r3, #2
 8003694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	697a      	ldr	r2, [r7, #20]
 800369c:	4313      	orrs	r3, r2
 800369e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	@ (8003714 <TIM_OC1_SetConfig+0xc8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d10c      	bne.n	80036c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0308 	bic.w	r3, r3, #8
 80036ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a13      	ldr	r2, [pc, #76]	@ (8003714 <TIM_OC1_SetConfig+0xc8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d111      	bne.n	80036ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	621a      	str	r2, [r3, #32]
}
 8003708:	bf00      	nop
 800370a:	371c      	adds	r7, #28
 800370c:	46bd      	mov	sp, r7
 800370e:	bc80      	pop	{r7}
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40012c00 	.word	0x40012c00

08003718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 0210 	bic.w	r2, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800374e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	021b      	lsls	r3, r3, #8
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4313      	orrs	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	f023 0320 	bic.w	r3, r3, #32
 8003762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	4a1d      	ldr	r2, [pc, #116]	@ (80037e8 <TIM_OC2_SetConfig+0xd0>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10d      	bne.n	8003794 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800377e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	011b      	lsls	r3, r3, #4
 8003786:	697a      	ldr	r2, [r7, #20]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003792:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a14      	ldr	r2, [pc, #80]	@ (80037e8 <TIM_OC2_SetConfig+0xd0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d113      	bne.n	80037c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	621a      	str	r2, [r3, #32]
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00

080037ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b087      	sub	sp, #28
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69db      	ldr	r3, [r3, #28]
 8003812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800381a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f023 0303 	bic.w	r3, r3, #3
 8003822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4313      	orrs	r3, r2
 8003840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a1d      	ldr	r2, [pc, #116]	@ (80038bc <TIM_OC3_SetConfig+0xd0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d10d      	bne.n	8003866 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	697a      	ldr	r2, [r7, #20]
 800385a:	4313      	orrs	r3, r2
 800385c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a14      	ldr	r2, [pc, #80]	@ (80038bc <TIM_OC3_SetConfig+0xd0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d113      	bne.n	8003896 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	685a      	ldr	r2, [r3, #4]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	621a      	str	r2, [r3, #32]
}
 80038b0:	bf00      	nop
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	40012c00 	.word	0x40012c00

080038c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b087      	sub	sp, #28
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	4313      	orrs	r3, r2
 8003902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800390a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	031b      	lsls	r3, r3, #12
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a0f      	ldr	r2, [pc, #60]	@ (8003958 <TIM_OC4_SetConfig+0x98>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d109      	bne.n	8003934 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	019b      	lsls	r3, r3, #6
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685a      	ldr	r2, [r3, #4]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	621a      	str	r2, [r3, #32]
}
 800394e:	bf00      	nop
 8003950:	371c      	adds	r7, #28
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr
 8003958:	40012c00 	.word	0x40012c00

0800395c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	f003 031f 	and.w	r3, r3, #31
 800396e:	2201      	movs	r2, #1
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a1a      	ldr	r2, [r3, #32]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	43db      	mvns	r3, r3
 800397e:	401a      	ands	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	6a1a      	ldr	r2, [r3, #32]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	fa01 f303 	lsl.w	r3, r1, r3
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
}
 800399a:	bf00      	nop
 800399c:	371c      	adds	r7, #28
 800399e:	46bd      	mov	sp, r7
 80039a0:	bc80      	pop	{r7}
 80039a2:	4770      	bx	lr

080039a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e046      	b.n	8003a4a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2202      	movs	r2, #2
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a16      	ldr	r2, [pc, #88]	@ (8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00e      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a08:	d009      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a12      	ldr	r2, [pc, #72]	@ (8003a58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d004      	beq.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a10      	ldr	r2, [pc, #64]	@ (8003a5c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d10c      	bne.n	8003a38 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68ba      	ldr	r2, [r7, #8]
 8003a36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3714      	adds	r7, #20
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bc80      	pop	{r7}
 8003a52:	4770      	bx	lr
 8003a54:	40012c00 	.word	0x40012c00
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800

08003a60 <__cvt>:
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a66:	461d      	mov	r5, r3
 8003a68:	bfbb      	ittet	lt
 8003a6a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8003a6e:	461d      	movlt	r5, r3
 8003a70:	2300      	movge	r3, #0
 8003a72:	232d      	movlt	r3, #45	@ 0x2d
 8003a74:	b088      	sub	sp, #32
 8003a76:	4614      	mov	r4, r2
 8003a78:	bfb8      	it	lt
 8003a7a:	4614      	movlt	r4, r2
 8003a7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8003a7e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8003a80:	7013      	strb	r3, [r2, #0]
 8003a82:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8003a84:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8003a88:	f023 0820 	bic.w	r8, r3, #32
 8003a8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003a90:	d005      	beq.n	8003a9e <__cvt+0x3e>
 8003a92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003a96:	d100      	bne.n	8003a9a <__cvt+0x3a>
 8003a98:	3601      	adds	r6, #1
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	e000      	b.n	8003aa0 <__cvt+0x40>
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	aa07      	add	r2, sp, #28
 8003aa2:	9204      	str	r2, [sp, #16]
 8003aa4:	aa06      	add	r2, sp, #24
 8003aa6:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003aaa:	e9cd 3600 	strd	r3, r6, [sp]
 8003aae:	4622      	mov	r2, r4
 8003ab0:	462b      	mov	r3, r5
 8003ab2:	f000 fe81 	bl	80047b8 <_dtoa_r>
 8003ab6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003aba:	4607      	mov	r7, r0
 8003abc:	d119      	bne.n	8003af2 <__cvt+0x92>
 8003abe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8003ac0:	07db      	lsls	r3, r3, #31
 8003ac2:	d50e      	bpl.n	8003ae2 <__cvt+0x82>
 8003ac4:	eb00 0906 	add.w	r9, r0, r6
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2300      	movs	r3, #0
 8003acc:	4620      	mov	r0, r4
 8003ace:	4629      	mov	r1, r5
 8003ad0:	f7fc ff6a 	bl	80009a8 <__aeabi_dcmpeq>
 8003ad4:	b108      	cbz	r0, 8003ada <__cvt+0x7a>
 8003ad6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003ada:	2230      	movs	r2, #48	@ 0x30
 8003adc:	9b07      	ldr	r3, [sp, #28]
 8003ade:	454b      	cmp	r3, r9
 8003ae0:	d31e      	bcc.n	8003b20 <__cvt+0xc0>
 8003ae2:	4638      	mov	r0, r7
 8003ae4:	9b07      	ldr	r3, [sp, #28]
 8003ae6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8003ae8:	1bdb      	subs	r3, r3, r7
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	b008      	add	sp, #32
 8003aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003af6:	eb00 0906 	add.w	r9, r0, r6
 8003afa:	d1e5      	bne.n	8003ac8 <__cvt+0x68>
 8003afc:	7803      	ldrb	r3, [r0, #0]
 8003afe:	2b30      	cmp	r3, #48	@ 0x30
 8003b00:	d10a      	bne.n	8003b18 <__cvt+0xb8>
 8003b02:	2200      	movs	r2, #0
 8003b04:	2300      	movs	r3, #0
 8003b06:	4620      	mov	r0, r4
 8003b08:	4629      	mov	r1, r5
 8003b0a:	f7fc ff4d 	bl	80009a8 <__aeabi_dcmpeq>
 8003b0e:	b918      	cbnz	r0, 8003b18 <__cvt+0xb8>
 8003b10:	f1c6 0601 	rsb	r6, r6, #1
 8003b14:	f8ca 6000 	str.w	r6, [sl]
 8003b18:	f8da 3000 	ldr.w	r3, [sl]
 8003b1c:	4499      	add	r9, r3
 8003b1e:	e7d3      	b.n	8003ac8 <__cvt+0x68>
 8003b20:	1c59      	adds	r1, r3, #1
 8003b22:	9107      	str	r1, [sp, #28]
 8003b24:	701a      	strb	r2, [r3, #0]
 8003b26:	e7d9      	b.n	8003adc <__cvt+0x7c>

08003b28 <__exponent>:
 8003b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b2a:	2900      	cmp	r1, #0
 8003b2c:	bfb6      	itet	lt
 8003b2e:	232d      	movlt	r3, #45	@ 0x2d
 8003b30:	232b      	movge	r3, #43	@ 0x2b
 8003b32:	4249      	neglt	r1, r1
 8003b34:	2909      	cmp	r1, #9
 8003b36:	7002      	strb	r2, [r0, #0]
 8003b38:	7043      	strb	r3, [r0, #1]
 8003b3a:	dd29      	ble.n	8003b90 <__exponent+0x68>
 8003b3c:	f10d 0307 	add.w	r3, sp, #7
 8003b40:	461d      	mov	r5, r3
 8003b42:	270a      	movs	r7, #10
 8003b44:	fbb1 f6f7 	udiv	r6, r1, r7
 8003b48:	461a      	mov	r2, r3
 8003b4a:	fb07 1416 	mls	r4, r7, r6, r1
 8003b4e:	3430      	adds	r4, #48	@ 0x30
 8003b50:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003b54:	460c      	mov	r4, r1
 8003b56:	2c63      	cmp	r4, #99	@ 0x63
 8003b58:	4631      	mov	r1, r6
 8003b5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8003b5e:	dcf1      	bgt.n	8003b44 <__exponent+0x1c>
 8003b60:	3130      	adds	r1, #48	@ 0x30
 8003b62:	1e94      	subs	r4, r2, #2
 8003b64:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003b68:	4623      	mov	r3, r4
 8003b6a:	1c41      	adds	r1, r0, #1
 8003b6c:	42ab      	cmp	r3, r5
 8003b6e:	d30a      	bcc.n	8003b86 <__exponent+0x5e>
 8003b70:	f10d 0309 	add.w	r3, sp, #9
 8003b74:	1a9b      	subs	r3, r3, r2
 8003b76:	42ac      	cmp	r4, r5
 8003b78:	bf88      	it	hi
 8003b7a:	2300      	movhi	r3, #0
 8003b7c:	3302      	adds	r3, #2
 8003b7e:	4403      	add	r3, r0
 8003b80:	1a18      	subs	r0, r3, r0
 8003b82:	b003      	add	sp, #12
 8003b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b86:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003b8a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003b8e:	e7ed      	b.n	8003b6c <__exponent+0x44>
 8003b90:	2330      	movs	r3, #48	@ 0x30
 8003b92:	3130      	adds	r1, #48	@ 0x30
 8003b94:	7083      	strb	r3, [r0, #2]
 8003b96:	70c1      	strb	r1, [r0, #3]
 8003b98:	1d03      	adds	r3, r0, #4
 8003b9a:	e7f1      	b.n	8003b80 <__exponent+0x58>

08003b9c <_printf_float>:
 8003b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba0:	b091      	sub	sp, #68	@ 0x44
 8003ba2:	460c      	mov	r4, r1
 8003ba4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8003ba8:	4616      	mov	r6, r2
 8003baa:	461f      	mov	r7, r3
 8003bac:	4605      	mov	r5, r0
 8003bae:	f000 fcf5 	bl	800459c <_localeconv_r>
 8003bb2:	6803      	ldr	r3, [r0, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	9308      	str	r3, [sp, #32]
 8003bb8:	f7fc faca 	bl	8000150 <strlen>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	930e      	str	r3, [sp, #56]	@ 0x38
 8003bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8003bc4:	9009      	str	r0, [sp, #36]	@ 0x24
 8003bc6:	3307      	adds	r3, #7
 8003bc8:	f023 0307 	bic.w	r3, r3, #7
 8003bcc:	f103 0208 	add.w	r2, r3, #8
 8003bd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003bd4:	f8d4 b000 	ldr.w	fp, [r4]
 8003bd8:	f8c8 2000 	str.w	r2, [r8]
 8003bdc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003be0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003be4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003be6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8003bea:	f04f 32ff 	mov.w	r2, #4294967295
 8003bee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003bf2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003bf6:	4b9c      	ldr	r3, [pc, #624]	@ (8003e68 <_printf_float+0x2cc>)
 8003bf8:	f7fc ff08 	bl	8000a0c <__aeabi_dcmpun>
 8003bfc:	bb70      	cbnz	r0, 8003c5c <_printf_float+0xc0>
 8003bfe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8003c02:	f04f 32ff 	mov.w	r2, #4294967295
 8003c06:	4b98      	ldr	r3, [pc, #608]	@ (8003e68 <_printf_float+0x2cc>)
 8003c08:	f7fc fee2 	bl	80009d0 <__aeabi_dcmple>
 8003c0c:	bb30      	cbnz	r0, 8003c5c <_printf_float+0xc0>
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2300      	movs	r3, #0
 8003c12:	4640      	mov	r0, r8
 8003c14:	4649      	mov	r1, r9
 8003c16:	f7fc fed1 	bl	80009bc <__aeabi_dcmplt>
 8003c1a:	b110      	cbz	r0, 8003c22 <_printf_float+0x86>
 8003c1c:	232d      	movs	r3, #45	@ 0x2d
 8003c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003c22:	4a92      	ldr	r2, [pc, #584]	@ (8003e6c <_printf_float+0x2d0>)
 8003c24:	4b92      	ldr	r3, [pc, #584]	@ (8003e70 <_printf_float+0x2d4>)
 8003c26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003c2a:	bf8c      	ite	hi
 8003c2c:	4690      	movhi	r8, r2
 8003c2e:	4698      	movls	r8, r3
 8003c30:	2303      	movs	r3, #3
 8003c32:	f04f 0900 	mov.w	r9, #0
 8003c36:	6123      	str	r3, [r4, #16]
 8003c38:	f02b 0304 	bic.w	r3, fp, #4
 8003c3c:	6023      	str	r3, [r4, #0]
 8003c3e:	4633      	mov	r3, r6
 8003c40:	4621      	mov	r1, r4
 8003c42:	4628      	mov	r0, r5
 8003c44:	9700      	str	r7, [sp, #0]
 8003c46:	aa0f      	add	r2, sp, #60	@ 0x3c
 8003c48:	f000 f9d4 	bl	8003ff4 <_printf_common>
 8003c4c:	3001      	adds	r0, #1
 8003c4e:	f040 8090 	bne.w	8003d72 <_printf_float+0x1d6>
 8003c52:	f04f 30ff 	mov.w	r0, #4294967295
 8003c56:	b011      	add	sp, #68	@ 0x44
 8003c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	4640      	mov	r0, r8
 8003c62:	4649      	mov	r1, r9
 8003c64:	f7fc fed2 	bl	8000a0c <__aeabi_dcmpun>
 8003c68:	b148      	cbz	r0, 8003c7e <_printf_float+0xe2>
 8003c6a:	464b      	mov	r3, r9
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	bfb8      	it	lt
 8003c70:	232d      	movlt	r3, #45	@ 0x2d
 8003c72:	4a80      	ldr	r2, [pc, #512]	@ (8003e74 <_printf_float+0x2d8>)
 8003c74:	bfb8      	it	lt
 8003c76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003c7a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e78 <_printf_float+0x2dc>)
 8003c7c:	e7d3      	b.n	8003c26 <_printf_float+0x8a>
 8003c7e:	6863      	ldr	r3, [r4, #4]
 8003c80:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	d13f      	bne.n	8003d08 <_printf_float+0x16c>
 8003c88:	2306      	movs	r3, #6
 8003c8a:	6063      	str	r3, [r4, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8003c92:	6023      	str	r3, [r4, #0]
 8003c94:	9206      	str	r2, [sp, #24]
 8003c96:	aa0e      	add	r2, sp, #56	@ 0x38
 8003c98:	e9cd a204 	strd	sl, r2, [sp, #16]
 8003c9c:	aa0d      	add	r2, sp, #52	@ 0x34
 8003c9e:	9203      	str	r2, [sp, #12]
 8003ca0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8003ca4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003ca8:	6863      	ldr	r3, [r4, #4]
 8003caa:	4642      	mov	r2, r8
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	4628      	mov	r0, r5
 8003cb0:	464b      	mov	r3, r9
 8003cb2:	910a      	str	r1, [sp, #40]	@ 0x28
 8003cb4:	f7ff fed4 	bl	8003a60 <__cvt>
 8003cb8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003cba:	4680      	mov	r8, r0
 8003cbc:	2947      	cmp	r1, #71	@ 0x47
 8003cbe:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8003cc0:	d128      	bne.n	8003d14 <_printf_float+0x178>
 8003cc2:	1cc8      	adds	r0, r1, #3
 8003cc4:	db02      	blt.n	8003ccc <_printf_float+0x130>
 8003cc6:	6863      	ldr	r3, [r4, #4]
 8003cc8:	4299      	cmp	r1, r3
 8003cca:	dd40      	ble.n	8003d4e <_printf_float+0x1b2>
 8003ccc:	f1aa 0a02 	sub.w	sl, sl, #2
 8003cd0:	fa5f fa8a 	uxtb.w	sl, sl
 8003cd4:	4652      	mov	r2, sl
 8003cd6:	3901      	subs	r1, #1
 8003cd8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003cdc:	910d      	str	r1, [sp, #52]	@ 0x34
 8003cde:	f7ff ff23 	bl	8003b28 <__exponent>
 8003ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003ce4:	4681      	mov	r9, r0
 8003ce6:	1813      	adds	r3, r2, r0
 8003ce8:	2a01      	cmp	r2, #1
 8003cea:	6123      	str	r3, [r4, #16]
 8003cec:	dc02      	bgt.n	8003cf4 <_printf_float+0x158>
 8003cee:	6822      	ldr	r2, [r4, #0]
 8003cf0:	07d2      	lsls	r2, r2, #31
 8003cf2:	d501      	bpl.n	8003cf8 <_printf_float+0x15c>
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	6123      	str	r3, [r4, #16]
 8003cf8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d09e      	beq.n	8003c3e <_printf_float+0xa2>
 8003d00:	232d      	movs	r3, #45	@ 0x2d
 8003d02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d06:	e79a      	b.n	8003c3e <_printf_float+0xa2>
 8003d08:	2947      	cmp	r1, #71	@ 0x47
 8003d0a:	d1bf      	bne.n	8003c8c <_printf_float+0xf0>
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1bd      	bne.n	8003c8c <_printf_float+0xf0>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e7ba      	b.n	8003c8a <_printf_float+0xee>
 8003d14:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d18:	d9dc      	bls.n	8003cd4 <_printf_float+0x138>
 8003d1a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003d1e:	d118      	bne.n	8003d52 <_printf_float+0x1b6>
 8003d20:	2900      	cmp	r1, #0
 8003d22:	6863      	ldr	r3, [r4, #4]
 8003d24:	dd0b      	ble.n	8003d3e <_printf_float+0x1a2>
 8003d26:	6121      	str	r1, [r4, #16]
 8003d28:	b913      	cbnz	r3, 8003d30 <_printf_float+0x194>
 8003d2a:	6822      	ldr	r2, [r4, #0]
 8003d2c:	07d0      	lsls	r0, r2, #31
 8003d2e:	d502      	bpl.n	8003d36 <_printf_float+0x19a>
 8003d30:	3301      	adds	r3, #1
 8003d32:	440b      	add	r3, r1
 8003d34:	6123      	str	r3, [r4, #16]
 8003d36:	f04f 0900 	mov.w	r9, #0
 8003d3a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003d3c:	e7dc      	b.n	8003cf8 <_printf_float+0x15c>
 8003d3e:	b913      	cbnz	r3, 8003d46 <_printf_float+0x1aa>
 8003d40:	6822      	ldr	r2, [r4, #0]
 8003d42:	07d2      	lsls	r2, r2, #31
 8003d44:	d501      	bpl.n	8003d4a <_printf_float+0x1ae>
 8003d46:	3302      	adds	r3, #2
 8003d48:	e7f4      	b.n	8003d34 <_printf_float+0x198>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e7f2      	b.n	8003d34 <_printf_float+0x198>
 8003d4e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003d52:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003d54:	4299      	cmp	r1, r3
 8003d56:	db05      	blt.n	8003d64 <_printf_float+0x1c8>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	6121      	str	r1, [r4, #16]
 8003d5c:	07d8      	lsls	r0, r3, #31
 8003d5e:	d5ea      	bpl.n	8003d36 <_printf_float+0x19a>
 8003d60:	1c4b      	adds	r3, r1, #1
 8003d62:	e7e7      	b.n	8003d34 <_printf_float+0x198>
 8003d64:	2900      	cmp	r1, #0
 8003d66:	bfcc      	ite	gt
 8003d68:	2201      	movgt	r2, #1
 8003d6a:	f1c1 0202 	rsble	r2, r1, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	e7e0      	b.n	8003d34 <_printf_float+0x198>
 8003d72:	6823      	ldr	r3, [r4, #0]
 8003d74:	055a      	lsls	r2, r3, #21
 8003d76:	d407      	bmi.n	8003d88 <_printf_float+0x1ec>
 8003d78:	6923      	ldr	r3, [r4, #16]
 8003d7a:	4642      	mov	r2, r8
 8003d7c:	4631      	mov	r1, r6
 8003d7e:	4628      	mov	r0, r5
 8003d80:	47b8      	blx	r7
 8003d82:	3001      	adds	r0, #1
 8003d84:	d12b      	bne.n	8003dde <_printf_float+0x242>
 8003d86:	e764      	b.n	8003c52 <_printf_float+0xb6>
 8003d88:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003d8c:	f240 80dc 	bls.w	8003f48 <_printf_float+0x3ac>
 8003d90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d94:	2200      	movs	r2, #0
 8003d96:	2300      	movs	r3, #0
 8003d98:	f7fc fe06 	bl	80009a8 <__aeabi_dcmpeq>
 8003d9c:	2800      	cmp	r0, #0
 8003d9e:	d033      	beq.n	8003e08 <_printf_float+0x26c>
 8003da0:	2301      	movs	r3, #1
 8003da2:	4631      	mov	r1, r6
 8003da4:	4628      	mov	r0, r5
 8003da6:	4a35      	ldr	r2, [pc, #212]	@ (8003e7c <_printf_float+0x2e0>)
 8003da8:	47b8      	blx	r7
 8003daa:	3001      	adds	r0, #1
 8003dac:	f43f af51 	beq.w	8003c52 <_printf_float+0xb6>
 8003db0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8003db4:	4543      	cmp	r3, r8
 8003db6:	db02      	blt.n	8003dbe <_printf_float+0x222>
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	07d8      	lsls	r0, r3, #31
 8003dbc:	d50f      	bpl.n	8003dde <_printf_float+0x242>
 8003dbe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003dc2:	4631      	mov	r1, r6
 8003dc4:	4628      	mov	r0, r5
 8003dc6:	47b8      	blx	r7
 8003dc8:	3001      	adds	r0, #1
 8003dca:	f43f af42 	beq.w	8003c52 <_printf_float+0xb6>
 8003dce:	f04f 0900 	mov.w	r9, #0
 8003dd2:	f108 38ff 	add.w	r8, r8, #4294967295
 8003dd6:	f104 0a1a 	add.w	sl, r4, #26
 8003dda:	45c8      	cmp	r8, r9
 8003ddc:	dc09      	bgt.n	8003df2 <_printf_float+0x256>
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	079b      	lsls	r3, r3, #30
 8003de2:	f100 8102 	bmi.w	8003fea <_printf_float+0x44e>
 8003de6:	68e0      	ldr	r0, [r4, #12]
 8003de8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8003dea:	4298      	cmp	r0, r3
 8003dec:	bfb8      	it	lt
 8003dee:	4618      	movlt	r0, r3
 8003df0:	e731      	b.n	8003c56 <_printf_float+0xba>
 8003df2:	2301      	movs	r3, #1
 8003df4:	4652      	mov	r2, sl
 8003df6:	4631      	mov	r1, r6
 8003df8:	4628      	mov	r0, r5
 8003dfa:	47b8      	blx	r7
 8003dfc:	3001      	adds	r0, #1
 8003dfe:	f43f af28 	beq.w	8003c52 <_printf_float+0xb6>
 8003e02:	f109 0901 	add.w	r9, r9, #1
 8003e06:	e7e8      	b.n	8003dda <_printf_float+0x23e>
 8003e08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dc38      	bgt.n	8003e80 <_printf_float+0x2e4>
 8003e0e:	2301      	movs	r3, #1
 8003e10:	4631      	mov	r1, r6
 8003e12:	4628      	mov	r0, r5
 8003e14:	4a19      	ldr	r2, [pc, #100]	@ (8003e7c <_printf_float+0x2e0>)
 8003e16:	47b8      	blx	r7
 8003e18:	3001      	adds	r0, #1
 8003e1a:	f43f af1a 	beq.w	8003c52 <_printf_float+0xb6>
 8003e1e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8003e22:	ea59 0303 	orrs.w	r3, r9, r3
 8003e26:	d102      	bne.n	8003e2e <_printf_float+0x292>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	07d9      	lsls	r1, r3, #31
 8003e2c:	d5d7      	bpl.n	8003dde <_printf_float+0x242>
 8003e2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003e32:	4631      	mov	r1, r6
 8003e34:	4628      	mov	r0, r5
 8003e36:	47b8      	blx	r7
 8003e38:	3001      	adds	r0, #1
 8003e3a:	f43f af0a 	beq.w	8003c52 <_printf_float+0xb6>
 8003e3e:	f04f 0a00 	mov.w	sl, #0
 8003e42:	f104 0b1a 	add.w	fp, r4, #26
 8003e46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e48:	425b      	negs	r3, r3
 8003e4a:	4553      	cmp	r3, sl
 8003e4c:	dc01      	bgt.n	8003e52 <_printf_float+0x2b6>
 8003e4e:	464b      	mov	r3, r9
 8003e50:	e793      	b.n	8003d7a <_printf_float+0x1de>
 8003e52:	2301      	movs	r3, #1
 8003e54:	465a      	mov	r2, fp
 8003e56:	4631      	mov	r1, r6
 8003e58:	4628      	mov	r0, r5
 8003e5a:	47b8      	blx	r7
 8003e5c:	3001      	adds	r0, #1
 8003e5e:	f43f aef8 	beq.w	8003c52 <_printf_float+0xb6>
 8003e62:	f10a 0a01 	add.w	sl, sl, #1
 8003e66:	e7ee      	b.n	8003e46 <_printf_float+0x2aa>
 8003e68:	7fefffff 	.word	0x7fefffff
 8003e6c:	080067c2 	.word	0x080067c2
 8003e70:	080067be 	.word	0x080067be
 8003e74:	080067ca 	.word	0x080067ca
 8003e78:	080067c6 	.word	0x080067c6
 8003e7c:	080067ce 	.word	0x080067ce
 8003e80:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003e82:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003e86:	4553      	cmp	r3, sl
 8003e88:	bfa8      	it	ge
 8003e8a:	4653      	movge	r3, sl
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	4699      	mov	r9, r3
 8003e90:	dc36      	bgt.n	8003f00 <_printf_float+0x364>
 8003e92:	f04f 0b00 	mov.w	fp, #0
 8003e96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003e9a:	f104 021a 	add.w	r2, r4, #26
 8003e9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ea0:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ea2:	eba3 0309 	sub.w	r3, r3, r9
 8003ea6:	455b      	cmp	r3, fp
 8003ea8:	dc31      	bgt.n	8003f0e <_printf_float+0x372>
 8003eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eac:	459a      	cmp	sl, r3
 8003eae:	dc3a      	bgt.n	8003f26 <_printf_float+0x38a>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	07da      	lsls	r2, r3, #31
 8003eb4:	d437      	bmi.n	8003f26 <_printf_float+0x38a>
 8003eb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eb8:	ebaa 0903 	sub.w	r9, sl, r3
 8003ebc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003ebe:	ebaa 0303 	sub.w	r3, sl, r3
 8003ec2:	4599      	cmp	r9, r3
 8003ec4:	bfa8      	it	ge
 8003ec6:	4699      	movge	r9, r3
 8003ec8:	f1b9 0f00 	cmp.w	r9, #0
 8003ecc:	dc33      	bgt.n	8003f36 <_printf_float+0x39a>
 8003ece:	f04f 0800 	mov.w	r8, #0
 8003ed2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003ed6:	f104 0b1a 	add.w	fp, r4, #26
 8003eda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003edc:	ebaa 0303 	sub.w	r3, sl, r3
 8003ee0:	eba3 0309 	sub.w	r3, r3, r9
 8003ee4:	4543      	cmp	r3, r8
 8003ee6:	f77f af7a 	ble.w	8003dde <_printf_float+0x242>
 8003eea:	2301      	movs	r3, #1
 8003eec:	465a      	mov	r2, fp
 8003eee:	4631      	mov	r1, r6
 8003ef0:	4628      	mov	r0, r5
 8003ef2:	47b8      	blx	r7
 8003ef4:	3001      	adds	r0, #1
 8003ef6:	f43f aeac 	beq.w	8003c52 <_printf_float+0xb6>
 8003efa:	f108 0801 	add.w	r8, r8, #1
 8003efe:	e7ec      	b.n	8003eda <_printf_float+0x33e>
 8003f00:	4642      	mov	r2, r8
 8003f02:	4631      	mov	r1, r6
 8003f04:	4628      	mov	r0, r5
 8003f06:	47b8      	blx	r7
 8003f08:	3001      	adds	r0, #1
 8003f0a:	d1c2      	bne.n	8003e92 <_printf_float+0x2f6>
 8003f0c:	e6a1      	b.n	8003c52 <_printf_float+0xb6>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	4631      	mov	r1, r6
 8003f12:	4628      	mov	r0, r5
 8003f14:	920a      	str	r2, [sp, #40]	@ 0x28
 8003f16:	47b8      	blx	r7
 8003f18:	3001      	adds	r0, #1
 8003f1a:	f43f ae9a 	beq.w	8003c52 <_printf_float+0xb6>
 8003f1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f20:	f10b 0b01 	add.w	fp, fp, #1
 8003f24:	e7bb      	b.n	8003e9e <_printf_float+0x302>
 8003f26:	4631      	mov	r1, r6
 8003f28:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f2c:	4628      	mov	r0, r5
 8003f2e:	47b8      	blx	r7
 8003f30:	3001      	adds	r0, #1
 8003f32:	d1c0      	bne.n	8003eb6 <_printf_float+0x31a>
 8003f34:	e68d      	b.n	8003c52 <_printf_float+0xb6>
 8003f36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003f38:	464b      	mov	r3, r9
 8003f3a:	4631      	mov	r1, r6
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	4442      	add	r2, r8
 8003f40:	47b8      	blx	r7
 8003f42:	3001      	adds	r0, #1
 8003f44:	d1c3      	bne.n	8003ece <_printf_float+0x332>
 8003f46:	e684      	b.n	8003c52 <_printf_float+0xb6>
 8003f48:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8003f4c:	f1ba 0f01 	cmp.w	sl, #1
 8003f50:	dc01      	bgt.n	8003f56 <_printf_float+0x3ba>
 8003f52:	07db      	lsls	r3, r3, #31
 8003f54:	d536      	bpl.n	8003fc4 <_printf_float+0x428>
 8003f56:	2301      	movs	r3, #1
 8003f58:	4642      	mov	r2, r8
 8003f5a:	4631      	mov	r1, r6
 8003f5c:	4628      	mov	r0, r5
 8003f5e:	47b8      	blx	r7
 8003f60:	3001      	adds	r0, #1
 8003f62:	f43f ae76 	beq.w	8003c52 <_printf_float+0xb6>
 8003f66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8003f6a:	4631      	mov	r1, r6
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	47b8      	blx	r7
 8003f70:	3001      	adds	r0, #1
 8003f72:	f43f ae6e 	beq.w	8003c52 <_printf_float+0xb6>
 8003f76:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003f82:	f7fc fd11 	bl	80009a8 <__aeabi_dcmpeq>
 8003f86:	b9c0      	cbnz	r0, 8003fba <_printf_float+0x41e>
 8003f88:	4653      	mov	r3, sl
 8003f8a:	f108 0201 	add.w	r2, r8, #1
 8003f8e:	4631      	mov	r1, r6
 8003f90:	4628      	mov	r0, r5
 8003f92:	47b8      	blx	r7
 8003f94:	3001      	adds	r0, #1
 8003f96:	d10c      	bne.n	8003fb2 <_printf_float+0x416>
 8003f98:	e65b      	b.n	8003c52 <_printf_float+0xb6>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	465a      	mov	r2, fp
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b8      	blx	r7
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f43f ae54 	beq.w	8003c52 <_printf_float+0xb6>
 8003faa:	f108 0801 	add.w	r8, r8, #1
 8003fae:	45d0      	cmp	r8, sl
 8003fb0:	dbf3      	blt.n	8003f9a <_printf_float+0x3fe>
 8003fb2:	464b      	mov	r3, r9
 8003fb4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003fb8:	e6e0      	b.n	8003d7c <_printf_float+0x1e0>
 8003fba:	f04f 0800 	mov.w	r8, #0
 8003fbe:	f104 0b1a 	add.w	fp, r4, #26
 8003fc2:	e7f4      	b.n	8003fae <_printf_float+0x412>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	4642      	mov	r2, r8
 8003fc8:	e7e1      	b.n	8003f8e <_printf_float+0x3f2>
 8003fca:	2301      	movs	r3, #1
 8003fcc:	464a      	mov	r2, r9
 8003fce:	4631      	mov	r1, r6
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	47b8      	blx	r7
 8003fd4:	3001      	adds	r0, #1
 8003fd6:	f43f ae3c 	beq.w	8003c52 <_printf_float+0xb6>
 8003fda:	f108 0801 	add.w	r8, r8, #1
 8003fde:	68e3      	ldr	r3, [r4, #12]
 8003fe0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8003fe2:	1a5b      	subs	r3, r3, r1
 8003fe4:	4543      	cmp	r3, r8
 8003fe6:	dcf0      	bgt.n	8003fca <_printf_float+0x42e>
 8003fe8:	e6fd      	b.n	8003de6 <_printf_float+0x24a>
 8003fea:	f04f 0800 	mov.w	r8, #0
 8003fee:	f104 0919 	add.w	r9, r4, #25
 8003ff2:	e7f4      	b.n	8003fde <_printf_float+0x442>

08003ff4 <_printf_common>:
 8003ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff8:	4616      	mov	r6, r2
 8003ffa:	4698      	mov	r8, r3
 8003ffc:	688a      	ldr	r2, [r1, #8]
 8003ffe:	690b      	ldr	r3, [r1, #16]
 8004000:	4607      	mov	r7, r0
 8004002:	4293      	cmp	r3, r2
 8004004:	bfb8      	it	lt
 8004006:	4613      	movlt	r3, r2
 8004008:	6033      	str	r3, [r6, #0]
 800400a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004014:	b10a      	cbz	r2, 800401a <_printf_common+0x26>
 8004016:	3301      	adds	r3, #1
 8004018:	6033      	str	r3, [r6, #0]
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	0699      	lsls	r1, r3, #26
 800401e:	bf42      	ittt	mi
 8004020:	6833      	ldrmi	r3, [r6, #0]
 8004022:	3302      	addmi	r3, #2
 8004024:	6033      	strmi	r3, [r6, #0]
 8004026:	6825      	ldr	r5, [r4, #0]
 8004028:	f015 0506 	ands.w	r5, r5, #6
 800402c:	d106      	bne.n	800403c <_printf_common+0x48>
 800402e:	f104 0a19 	add.w	sl, r4, #25
 8004032:	68e3      	ldr	r3, [r4, #12]
 8004034:	6832      	ldr	r2, [r6, #0]
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	42ab      	cmp	r3, r5
 800403a:	dc2b      	bgt.n	8004094 <_printf_common+0xa0>
 800403c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004040:	6822      	ldr	r2, [r4, #0]
 8004042:	3b00      	subs	r3, #0
 8004044:	bf18      	it	ne
 8004046:	2301      	movne	r3, #1
 8004048:	0692      	lsls	r2, r2, #26
 800404a:	d430      	bmi.n	80040ae <_printf_common+0xba>
 800404c:	4641      	mov	r1, r8
 800404e:	4638      	mov	r0, r7
 8004050:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004054:	47c8      	blx	r9
 8004056:	3001      	adds	r0, #1
 8004058:	d023      	beq.n	80040a2 <_printf_common+0xae>
 800405a:	6823      	ldr	r3, [r4, #0]
 800405c:	6922      	ldr	r2, [r4, #16]
 800405e:	f003 0306 	and.w	r3, r3, #6
 8004062:	2b04      	cmp	r3, #4
 8004064:	bf14      	ite	ne
 8004066:	2500      	movne	r5, #0
 8004068:	6833      	ldreq	r3, [r6, #0]
 800406a:	f04f 0600 	mov.w	r6, #0
 800406e:	bf08      	it	eq
 8004070:	68e5      	ldreq	r5, [r4, #12]
 8004072:	f104 041a 	add.w	r4, r4, #26
 8004076:	bf08      	it	eq
 8004078:	1aed      	subeq	r5, r5, r3
 800407a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800407e:	bf08      	it	eq
 8004080:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004084:	4293      	cmp	r3, r2
 8004086:	bfc4      	itt	gt
 8004088:	1a9b      	subgt	r3, r3, r2
 800408a:	18ed      	addgt	r5, r5, r3
 800408c:	42b5      	cmp	r5, r6
 800408e:	d11a      	bne.n	80040c6 <_printf_common+0xd2>
 8004090:	2000      	movs	r0, #0
 8004092:	e008      	b.n	80040a6 <_printf_common+0xb2>
 8004094:	2301      	movs	r3, #1
 8004096:	4652      	mov	r2, sl
 8004098:	4641      	mov	r1, r8
 800409a:	4638      	mov	r0, r7
 800409c:	47c8      	blx	r9
 800409e:	3001      	adds	r0, #1
 80040a0:	d103      	bne.n	80040aa <_printf_common+0xb6>
 80040a2:	f04f 30ff 	mov.w	r0, #4294967295
 80040a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040aa:	3501      	adds	r5, #1
 80040ac:	e7c1      	b.n	8004032 <_printf_common+0x3e>
 80040ae:	2030      	movs	r0, #48	@ 0x30
 80040b0:	18e1      	adds	r1, r4, r3
 80040b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040bc:	4422      	add	r2, r4
 80040be:	3302      	adds	r3, #2
 80040c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040c4:	e7c2      	b.n	800404c <_printf_common+0x58>
 80040c6:	2301      	movs	r3, #1
 80040c8:	4622      	mov	r2, r4
 80040ca:	4641      	mov	r1, r8
 80040cc:	4638      	mov	r0, r7
 80040ce:	47c8      	blx	r9
 80040d0:	3001      	adds	r0, #1
 80040d2:	d0e6      	beq.n	80040a2 <_printf_common+0xae>
 80040d4:	3601      	adds	r6, #1
 80040d6:	e7d9      	b.n	800408c <_printf_common+0x98>

080040d8 <_printf_i>:
 80040d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040dc:	7e0f      	ldrb	r7, [r1, #24]
 80040de:	4691      	mov	r9, r2
 80040e0:	2f78      	cmp	r7, #120	@ 0x78
 80040e2:	4680      	mov	r8, r0
 80040e4:	460c      	mov	r4, r1
 80040e6:	469a      	mov	sl, r3
 80040e8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040ee:	d807      	bhi.n	8004100 <_printf_i+0x28>
 80040f0:	2f62      	cmp	r7, #98	@ 0x62
 80040f2:	d80a      	bhi.n	800410a <_printf_i+0x32>
 80040f4:	2f00      	cmp	r7, #0
 80040f6:	f000 80d1 	beq.w	800429c <_printf_i+0x1c4>
 80040fa:	2f58      	cmp	r7, #88	@ 0x58
 80040fc:	f000 80b8 	beq.w	8004270 <_printf_i+0x198>
 8004100:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004104:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004108:	e03a      	b.n	8004180 <_printf_i+0xa8>
 800410a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800410e:	2b15      	cmp	r3, #21
 8004110:	d8f6      	bhi.n	8004100 <_printf_i+0x28>
 8004112:	a101      	add	r1, pc, #4	@ (adr r1, 8004118 <_printf_i+0x40>)
 8004114:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004118:	08004171 	.word	0x08004171
 800411c:	08004185 	.word	0x08004185
 8004120:	08004101 	.word	0x08004101
 8004124:	08004101 	.word	0x08004101
 8004128:	08004101 	.word	0x08004101
 800412c:	08004101 	.word	0x08004101
 8004130:	08004185 	.word	0x08004185
 8004134:	08004101 	.word	0x08004101
 8004138:	08004101 	.word	0x08004101
 800413c:	08004101 	.word	0x08004101
 8004140:	08004101 	.word	0x08004101
 8004144:	08004283 	.word	0x08004283
 8004148:	080041af 	.word	0x080041af
 800414c:	0800423d 	.word	0x0800423d
 8004150:	08004101 	.word	0x08004101
 8004154:	08004101 	.word	0x08004101
 8004158:	080042a5 	.word	0x080042a5
 800415c:	08004101 	.word	0x08004101
 8004160:	080041af 	.word	0x080041af
 8004164:	08004101 	.word	0x08004101
 8004168:	08004101 	.word	0x08004101
 800416c:	08004245 	.word	0x08004245
 8004170:	6833      	ldr	r3, [r6, #0]
 8004172:	1d1a      	adds	r2, r3, #4
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6032      	str	r2, [r6, #0]
 8004178:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800417c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004180:	2301      	movs	r3, #1
 8004182:	e09c      	b.n	80042be <_printf_i+0x1e6>
 8004184:	6833      	ldr	r3, [r6, #0]
 8004186:	6820      	ldr	r0, [r4, #0]
 8004188:	1d19      	adds	r1, r3, #4
 800418a:	6031      	str	r1, [r6, #0]
 800418c:	0606      	lsls	r6, r0, #24
 800418e:	d501      	bpl.n	8004194 <_printf_i+0xbc>
 8004190:	681d      	ldr	r5, [r3, #0]
 8004192:	e003      	b.n	800419c <_printf_i+0xc4>
 8004194:	0645      	lsls	r5, r0, #25
 8004196:	d5fb      	bpl.n	8004190 <_printf_i+0xb8>
 8004198:	f9b3 5000 	ldrsh.w	r5, [r3]
 800419c:	2d00      	cmp	r5, #0
 800419e:	da03      	bge.n	80041a8 <_printf_i+0xd0>
 80041a0:	232d      	movs	r3, #45	@ 0x2d
 80041a2:	426d      	negs	r5, r5
 80041a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041a8:	230a      	movs	r3, #10
 80041aa:	4858      	ldr	r0, [pc, #352]	@ (800430c <_printf_i+0x234>)
 80041ac:	e011      	b.n	80041d2 <_printf_i+0xfa>
 80041ae:	6821      	ldr	r1, [r4, #0]
 80041b0:	6833      	ldr	r3, [r6, #0]
 80041b2:	0608      	lsls	r0, r1, #24
 80041b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80041b8:	d402      	bmi.n	80041c0 <_printf_i+0xe8>
 80041ba:	0649      	lsls	r1, r1, #25
 80041bc:	bf48      	it	mi
 80041be:	b2ad      	uxthmi	r5, r5
 80041c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80041c2:	6033      	str	r3, [r6, #0]
 80041c4:	bf14      	ite	ne
 80041c6:	230a      	movne	r3, #10
 80041c8:	2308      	moveq	r3, #8
 80041ca:	4850      	ldr	r0, [pc, #320]	@ (800430c <_printf_i+0x234>)
 80041cc:	2100      	movs	r1, #0
 80041ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041d2:	6866      	ldr	r6, [r4, #4]
 80041d4:	2e00      	cmp	r6, #0
 80041d6:	60a6      	str	r6, [r4, #8]
 80041d8:	db05      	blt.n	80041e6 <_printf_i+0x10e>
 80041da:	6821      	ldr	r1, [r4, #0]
 80041dc:	432e      	orrs	r6, r5
 80041de:	f021 0104 	bic.w	r1, r1, #4
 80041e2:	6021      	str	r1, [r4, #0]
 80041e4:	d04b      	beq.n	800427e <_printf_i+0x1a6>
 80041e6:	4616      	mov	r6, r2
 80041e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80041ec:	fb03 5711 	mls	r7, r3, r1, r5
 80041f0:	5dc7      	ldrb	r7, [r0, r7]
 80041f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041f6:	462f      	mov	r7, r5
 80041f8:	42bb      	cmp	r3, r7
 80041fa:	460d      	mov	r5, r1
 80041fc:	d9f4      	bls.n	80041e8 <_printf_i+0x110>
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d10b      	bne.n	800421a <_printf_i+0x142>
 8004202:	6823      	ldr	r3, [r4, #0]
 8004204:	07df      	lsls	r7, r3, #31
 8004206:	d508      	bpl.n	800421a <_printf_i+0x142>
 8004208:	6923      	ldr	r3, [r4, #16]
 800420a:	6861      	ldr	r1, [r4, #4]
 800420c:	4299      	cmp	r1, r3
 800420e:	bfde      	ittt	le
 8004210:	2330      	movle	r3, #48	@ 0x30
 8004212:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004216:	f106 36ff 	addle.w	r6, r6, #4294967295
 800421a:	1b92      	subs	r2, r2, r6
 800421c:	6122      	str	r2, [r4, #16]
 800421e:	464b      	mov	r3, r9
 8004220:	4621      	mov	r1, r4
 8004222:	4640      	mov	r0, r8
 8004224:	f8cd a000 	str.w	sl, [sp]
 8004228:	aa03      	add	r2, sp, #12
 800422a:	f7ff fee3 	bl	8003ff4 <_printf_common>
 800422e:	3001      	adds	r0, #1
 8004230:	d14a      	bne.n	80042c8 <_printf_i+0x1f0>
 8004232:	f04f 30ff 	mov.w	r0, #4294967295
 8004236:	b004      	add	sp, #16
 8004238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	f043 0320 	orr.w	r3, r3, #32
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	2778      	movs	r7, #120	@ 0x78
 8004246:	4832      	ldr	r0, [pc, #200]	@ (8004310 <_printf_i+0x238>)
 8004248:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	6831      	ldr	r1, [r6, #0]
 8004250:	061f      	lsls	r7, r3, #24
 8004252:	f851 5b04 	ldr.w	r5, [r1], #4
 8004256:	d402      	bmi.n	800425e <_printf_i+0x186>
 8004258:	065f      	lsls	r7, r3, #25
 800425a:	bf48      	it	mi
 800425c:	b2ad      	uxthmi	r5, r5
 800425e:	6031      	str	r1, [r6, #0]
 8004260:	07d9      	lsls	r1, r3, #31
 8004262:	bf44      	itt	mi
 8004264:	f043 0320 	orrmi.w	r3, r3, #32
 8004268:	6023      	strmi	r3, [r4, #0]
 800426a:	b11d      	cbz	r5, 8004274 <_printf_i+0x19c>
 800426c:	2310      	movs	r3, #16
 800426e:	e7ad      	b.n	80041cc <_printf_i+0xf4>
 8004270:	4826      	ldr	r0, [pc, #152]	@ (800430c <_printf_i+0x234>)
 8004272:	e7e9      	b.n	8004248 <_printf_i+0x170>
 8004274:	6823      	ldr	r3, [r4, #0]
 8004276:	f023 0320 	bic.w	r3, r3, #32
 800427a:	6023      	str	r3, [r4, #0]
 800427c:	e7f6      	b.n	800426c <_printf_i+0x194>
 800427e:	4616      	mov	r6, r2
 8004280:	e7bd      	b.n	80041fe <_printf_i+0x126>
 8004282:	6833      	ldr	r3, [r6, #0]
 8004284:	6825      	ldr	r5, [r4, #0]
 8004286:	1d18      	adds	r0, r3, #4
 8004288:	6961      	ldr	r1, [r4, #20]
 800428a:	6030      	str	r0, [r6, #0]
 800428c:	062e      	lsls	r6, r5, #24
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	d501      	bpl.n	8004296 <_printf_i+0x1be>
 8004292:	6019      	str	r1, [r3, #0]
 8004294:	e002      	b.n	800429c <_printf_i+0x1c4>
 8004296:	0668      	lsls	r0, r5, #25
 8004298:	d5fb      	bpl.n	8004292 <_printf_i+0x1ba>
 800429a:	8019      	strh	r1, [r3, #0]
 800429c:	2300      	movs	r3, #0
 800429e:	4616      	mov	r6, r2
 80042a0:	6123      	str	r3, [r4, #16]
 80042a2:	e7bc      	b.n	800421e <_printf_i+0x146>
 80042a4:	6833      	ldr	r3, [r6, #0]
 80042a6:	2100      	movs	r1, #0
 80042a8:	1d1a      	adds	r2, r3, #4
 80042aa:	6032      	str	r2, [r6, #0]
 80042ac:	681e      	ldr	r6, [r3, #0]
 80042ae:	6862      	ldr	r2, [r4, #4]
 80042b0:	4630      	mov	r0, r6
 80042b2:	f000 f9ea 	bl	800468a <memchr>
 80042b6:	b108      	cbz	r0, 80042bc <_printf_i+0x1e4>
 80042b8:	1b80      	subs	r0, r0, r6
 80042ba:	6060      	str	r0, [r4, #4]
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	6123      	str	r3, [r4, #16]
 80042c0:	2300      	movs	r3, #0
 80042c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042c6:	e7aa      	b.n	800421e <_printf_i+0x146>
 80042c8:	4632      	mov	r2, r6
 80042ca:	4649      	mov	r1, r9
 80042cc:	4640      	mov	r0, r8
 80042ce:	6923      	ldr	r3, [r4, #16]
 80042d0:	47d0      	blx	sl
 80042d2:	3001      	adds	r0, #1
 80042d4:	d0ad      	beq.n	8004232 <_printf_i+0x15a>
 80042d6:	6823      	ldr	r3, [r4, #0]
 80042d8:	079b      	lsls	r3, r3, #30
 80042da:	d413      	bmi.n	8004304 <_printf_i+0x22c>
 80042dc:	68e0      	ldr	r0, [r4, #12]
 80042de:	9b03      	ldr	r3, [sp, #12]
 80042e0:	4298      	cmp	r0, r3
 80042e2:	bfb8      	it	lt
 80042e4:	4618      	movlt	r0, r3
 80042e6:	e7a6      	b.n	8004236 <_printf_i+0x15e>
 80042e8:	2301      	movs	r3, #1
 80042ea:	4632      	mov	r2, r6
 80042ec:	4649      	mov	r1, r9
 80042ee:	4640      	mov	r0, r8
 80042f0:	47d0      	blx	sl
 80042f2:	3001      	adds	r0, #1
 80042f4:	d09d      	beq.n	8004232 <_printf_i+0x15a>
 80042f6:	3501      	adds	r5, #1
 80042f8:	68e3      	ldr	r3, [r4, #12]
 80042fa:	9903      	ldr	r1, [sp, #12]
 80042fc:	1a5b      	subs	r3, r3, r1
 80042fe:	42ab      	cmp	r3, r5
 8004300:	dcf2      	bgt.n	80042e8 <_printf_i+0x210>
 8004302:	e7eb      	b.n	80042dc <_printf_i+0x204>
 8004304:	2500      	movs	r5, #0
 8004306:	f104 0619 	add.w	r6, r4, #25
 800430a:	e7f5      	b.n	80042f8 <_printf_i+0x220>
 800430c:	080067d0 	.word	0x080067d0
 8004310:	080067e1 	.word	0x080067e1

08004314 <std>:
 8004314:	2300      	movs	r3, #0
 8004316:	b510      	push	{r4, lr}
 8004318:	4604      	mov	r4, r0
 800431a:	e9c0 3300 	strd	r3, r3, [r0]
 800431e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004322:	6083      	str	r3, [r0, #8]
 8004324:	8181      	strh	r1, [r0, #12]
 8004326:	6643      	str	r3, [r0, #100]	@ 0x64
 8004328:	81c2      	strh	r2, [r0, #14]
 800432a:	6183      	str	r3, [r0, #24]
 800432c:	4619      	mov	r1, r3
 800432e:	2208      	movs	r2, #8
 8004330:	305c      	adds	r0, #92	@ 0x5c
 8004332:	f000 f92a 	bl	800458a <memset>
 8004336:	4b0d      	ldr	r3, [pc, #52]	@ (800436c <std+0x58>)
 8004338:	6224      	str	r4, [r4, #32]
 800433a:	6263      	str	r3, [r4, #36]	@ 0x24
 800433c:	4b0c      	ldr	r3, [pc, #48]	@ (8004370 <std+0x5c>)
 800433e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004340:	4b0c      	ldr	r3, [pc, #48]	@ (8004374 <std+0x60>)
 8004342:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004344:	4b0c      	ldr	r3, [pc, #48]	@ (8004378 <std+0x64>)
 8004346:	6323      	str	r3, [r4, #48]	@ 0x30
 8004348:	4b0c      	ldr	r3, [pc, #48]	@ (800437c <std+0x68>)
 800434a:	429c      	cmp	r4, r3
 800434c:	d006      	beq.n	800435c <std+0x48>
 800434e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004352:	4294      	cmp	r4, r2
 8004354:	d002      	beq.n	800435c <std+0x48>
 8004356:	33d0      	adds	r3, #208	@ 0xd0
 8004358:	429c      	cmp	r4, r3
 800435a:	d105      	bne.n	8004368 <std+0x54>
 800435c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004364:	f000 b98e 	b.w	8004684 <__retarget_lock_init_recursive>
 8004368:	bd10      	pop	{r4, pc}
 800436a:	bf00      	nop
 800436c:	08004505 	.word	0x08004505
 8004370:	08004527 	.word	0x08004527
 8004374:	0800455f 	.word	0x0800455f
 8004378:	08004583 	.word	0x08004583
 800437c:	20000298 	.word	0x20000298

08004380 <stdio_exit_handler>:
 8004380:	4a02      	ldr	r2, [pc, #8]	@ (800438c <stdio_exit_handler+0xc>)
 8004382:	4903      	ldr	r1, [pc, #12]	@ (8004390 <stdio_exit_handler+0x10>)
 8004384:	4803      	ldr	r0, [pc, #12]	@ (8004394 <stdio_exit_handler+0x14>)
 8004386:	f000 b869 	b.w	800445c <_fwalk_sglue>
 800438a:	bf00      	nop
 800438c:	20000010 	.word	0x20000010
 8004390:	08006001 	.word	0x08006001
 8004394:	20000020 	.word	0x20000020

08004398 <cleanup_stdio>:
 8004398:	6841      	ldr	r1, [r0, #4]
 800439a:	4b0c      	ldr	r3, [pc, #48]	@ (80043cc <cleanup_stdio+0x34>)
 800439c:	b510      	push	{r4, lr}
 800439e:	4299      	cmp	r1, r3
 80043a0:	4604      	mov	r4, r0
 80043a2:	d001      	beq.n	80043a8 <cleanup_stdio+0x10>
 80043a4:	f001 fe2c 	bl	8006000 <_fflush_r>
 80043a8:	68a1      	ldr	r1, [r4, #8]
 80043aa:	4b09      	ldr	r3, [pc, #36]	@ (80043d0 <cleanup_stdio+0x38>)
 80043ac:	4299      	cmp	r1, r3
 80043ae:	d002      	beq.n	80043b6 <cleanup_stdio+0x1e>
 80043b0:	4620      	mov	r0, r4
 80043b2:	f001 fe25 	bl	8006000 <_fflush_r>
 80043b6:	68e1      	ldr	r1, [r4, #12]
 80043b8:	4b06      	ldr	r3, [pc, #24]	@ (80043d4 <cleanup_stdio+0x3c>)
 80043ba:	4299      	cmp	r1, r3
 80043bc:	d004      	beq.n	80043c8 <cleanup_stdio+0x30>
 80043be:	4620      	mov	r0, r4
 80043c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043c4:	f001 be1c 	b.w	8006000 <_fflush_r>
 80043c8:	bd10      	pop	{r4, pc}
 80043ca:	bf00      	nop
 80043cc:	20000298 	.word	0x20000298
 80043d0:	20000300 	.word	0x20000300
 80043d4:	20000368 	.word	0x20000368

080043d8 <global_stdio_init.part.0>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	4b0b      	ldr	r3, [pc, #44]	@ (8004408 <global_stdio_init.part.0+0x30>)
 80043dc:	4c0b      	ldr	r4, [pc, #44]	@ (800440c <global_stdio_init.part.0+0x34>)
 80043de:	4a0c      	ldr	r2, [pc, #48]	@ (8004410 <global_stdio_init.part.0+0x38>)
 80043e0:	4620      	mov	r0, r4
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	2104      	movs	r1, #4
 80043e6:	2200      	movs	r2, #0
 80043e8:	f7ff ff94 	bl	8004314 <std>
 80043ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80043f0:	2201      	movs	r2, #1
 80043f2:	2109      	movs	r1, #9
 80043f4:	f7ff ff8e 	bl	8004314 <std>
 80043f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80043fc:	2202      	movs	r2, #2
 80043fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004402:	2112      	movs	r1, #18
 8004404:	f7ff bf86 	b.w	8004314 <std>
 8004408:	200003d0 	.word	0x200003d0
 800440c:	20000298 	.word	0x20000298
 8004410:	08004381 	.word	0x08004381

08004414 <__sfp_lock_acquire>:
 8004414:	4801      	ldr	r0, [pc, #4]	@ (800441c <__sfp_lock_acquire+0x8>)
 8004416:	f000 b936 	b.w	8004686 <__retarget_lock_acquire_recursive>
 800441a:	bf00      	nop
 800441c:	200003d9 	.word	0x200003d9

08004420 <__sfp_lock_release>:
 8004420:	4801      	ldr	r0, [pc, #4]	@ (8004428 <__sfp_lock_release+0x8>)
 8004422:	f000 b931 	b.w	8004688 <__retarget_lock_release_recursive>
 8004426:	bf00      	nop
 8004428:	200003d9 	.word	0x200003d9

0800442c <__sinit>:
 800442c:	b510      	push	{r4, lr}
 800442e:	4604      	mov	r4, r0
 8004430:	f7ff fff0 	bl	8004414 <__sfp_lock_acquire>
 8004434:	6a23      	ldr	r3, [r4, #32]
 8004436:	b11b      	cbz	r3, 8004440 <__sinit+0x14>
 8004438:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800443c:	f7ff bff0 	b.w	8004420 <__sfp_lock_release>
 8004440:	4b04      	ldr	r3, [pc, #16]	@ (8004454 <__sinit+0x28>)
 8004442:	6223      	str	r3, [r4, #32]
 8004444:	4b04      	ldr	r3, [pc, #16]	@ (8004458 <__sinit+0x2c>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1f5      	bne.n	8004438 <__sinit+0xc>
 800444c:	f7ff ffc4 	bl	80043d8 <global_stdio_init.part.0>
 8004450:	e7f2      	b.n	8004438 <__sinit+0xc>
 8004452:	bf00      	nop
 8004454:	08004399 	.word	0x08004399
 8004458:	200003d0 	.word	0x200003d0

0800445c <_fwalk_sglue>:
 800445c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004460:	4607      	mov	r7, r0
 8004462:	4688      	mov	r8, r1
 8004464:	4614      	mov	r4, r2
 8004466:	2600      	movs	r6, #0
 8004468:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800446c:	f1b9 0901 	subs.w	r9, r9, #1
 8004470:	d505      	bpl.n	800447e <_fwalk_sglue+0x22>
 8004472:	6824      	ldr	r4, [r4, #0]
 8004474:	2c00      	cmp	r4, #0
 8004476:	d1f7      	bne.n	8004468 <_fwalk_sglue+0xc>
 8004478:	4630      	mov	r0, r6
 800447a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800447e:	89ab      	ldrh	r3, [r5, #12]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d907      	bls.n	8004494 <_fwalk_sglue+0x38>
 8004484:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004488:	3301      	adds	r3, #1
 800448a:	d003      	beq.n	8004494 <_fwalk_sglue+0x38>
 800448c:	4629      	mov	r1, r5
 800448e:	4638      	mov	r0, r7
 8004490:	47c0      	blx	r8
 8004492:	4306      	orrs	r6, r0
 8004494:	3568      	adds	r5, #104	@ 0x68
 8004496:	e7e9      	b.n	800446c <_fwalk_sglue+0x10>

08004498 <sniprintf>:
 8004498:	b40c      	push	{r2, r3}
 800449a:	b530      	push	{r4, r5, lr}
 800449c:	4b18      	ldr	r3, [pc, #96]	@ (8004500 <sniprintf+0x68>)
 800449e:	1e0c      	subs	r4, r1, #0
 80044a0:	681d      	ldr	r5, [r3, #0]
 80044a2:	b09d      	sub	sp, #116	@ 0x74
 80044a4:	da08      	bge.n	80044b8 <sniprintf+0x20>
 80044a6:	238b      	movs	r3, #139	@ 0x8b
 80044a8:	f04f 30ff 	mov.w	r0, #4294967295
 80044ac:	602b      	str	r3, [r5, #0]
 80044ae:	b01d      	add	sp, #116	@ 0x74
 80044b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044b4:	b002      	add	sp, #8
 80044b6:	4770      	bx	lr
 80044b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044c0:	f04f 0300 	mov.w	r3, #0
 80044c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80044c6:	bf0c      	ite	eq
 80044c8:	4623      	moveq	r3, r4
 80044ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044ce:	9304      	str	r3, [sp, #16]
 80044d0:	9307      	str	r3, [sp, #28]
 80044d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044d6:	9002      	str	r0, [sp, #8]
 80044d8:	9006      	str	r0, [sp, #24]
 80044da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044de:	4628      	mov	r0, r5
 80044e0:	ab21      	add	r3, sp, #132	@ 0x84
 80044e2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80044e4:	a902      	add	r1, sp, #8
 80044e6:	9301      	str	r3, [sp, #4]
 80044e8:	f001 fc0e 	bl	8005d08 <_svfiprintf_r>
 80044ec:	1c43      	adds	r3, r0, #1
 80044ee:	bfbc      	itt	lt
 80044f0:	238b      	movlt	r3, #139	@ 0x8b
 80044f2:	602b      	strlt	r3, [r5, #0]
 80044f4:	2c00      	cmp	r4, #0
 80044f6:	d0da      	beq.n	80044ae <sniprintf+0x16>
 80044f8:	2200      	movs	r2, #0
 80044fa:	9b02      	ldr	r3, [sp, #8]
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e7d6      	b.n	80044ae <sniprintf+0x16>
 8004500:	2000001c 	.word	0x2000001c

08004504 <__sread>:
 8004504:	b510      	push	{r4, lr}
 8004506:	460c      	mov	r4, r1
 8004508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800450c:	f000 f86c 	bl	80045e8 <_read_r>
 8004510:	2800      	cmp	r0, #0
 8004512:	bfab      	itete	ge
 8004514:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004516:	89a3      	ldrhlt	r3, [r4, #12]
 8004518:	181b      	addge	r3, r3, r0
 800451a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800451e:	bfac      	ite	ge
 8004520:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004522:	81a3      	strhlt	r3, [r4, #12]
 8004524:	bd10      	pop	{r4, pc}

08004526 <__swrite>:
 8004526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800452a:	461f      	mov	r7, r3
 800452c:	898b      	ldrh	r3, [r1, #12]
 800452e:	4605      	mov	r5, r0
 8004530:	05db      	lsls	r3, r3, #23
 8004532:	460c      	mov	r4, r1
 8004534:	4616      	mov	r6, r2
 8004536:	d505      	bpl.n	8004544 <__swrite+0x1e>
 8004538:	2302      	movs	r3, #2
 800453a:	2200      	movs	r2, #0
 800453c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004540:	f000 f840 	bl	80045c4 <_lseek_r>
 8004544:	89a3      	ldrh	r3, [r4, #12]
 8004546:	4632      	mov	r2, r6
 8004548:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800454c:	81a3      	strh	r3, [r4, #12]
 800454e:	4628      	mov	r0, r5
 8004550:	463b      	mov	r3, r7
 8004552:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004556:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800455a:	f000 b857 	b.w	800460c <_write_r>

0800455e <__sseek>:
 800455e:	b510      	push	{r4, lr}
 8004560:	460c      	mov	r4, r1
 8004562:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004566:	f000 f82d 	bl	80045c4 <_lseek_r>
 800456a:	1c43      	adds	r3, r0, #1
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	bf15      	itete	ne
 8004570:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004572:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004576:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800457a:	81a3      	strheq	r3, [r4, #12]
 800457c:	bf18      	it	ne
 800457e:	81a3      	strhne	r3, [r4, #12]
 8004580:	bd10      	pop	{r4, pc}

08004582 <__sclose>:
 8004582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004586:	f000 b80d 	b.w	80045a4 <_close_r>

0800458a <memset>:
 800458a:	4603      	mov	r3, r0
 800458c:	4402      	add	r2, r0
 800458e:	4293      	cmp	r3, r2
 8004590:	d100      	bne.n	8004594 <memset+0xa>
 8004592:	4770      	bx	lr
 8004594:	f803 1b01 	strb.w	r1, [r3], #1
 8004598:	e7f9      	b.n	800458e <memset+0x4>
	...

0800459c <_localeconv_r>:
 800459c:	4800      	ldr	r0, [pc, #0]	@ (80045a0 <_localeconv_r+0x4>)
 800459e:	4770      	bx	lr
 80045a0:	2000015c 	.word	0x2000015c

080045a4 <_close_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	2300      	movs	r3, #0
 80045a8:	4d05      	ldr	r5, [pc, #20]	@ (80045c0 <_close_r+0x1c>)
 80045aa:	4604      	mov	r4, r0
 80045ac:	4608      	mov	r0, r1
 80045ae:	602b      	str	r3, [r5, #0]
 80045b0:	f7fd fa11 	bl	80019d6 <_close>
 80045b4:	1c43      	adds	r3, r0, #1
 80045b6:	d102      	bne.n	80045be <_close_r+0x1a>
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	b103      	cbz	r3, 80045be <_close_r+0x1a>
 80045bc:	6023      	str	r3, [r4, #0]
 80045be:	bd38      	pop	{r3, r4, r5, pc}
 80045c0:	200003d4 	.word	0x200003d4

080045c4 <_lseek_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	4604      	mov	r4, r0
 80045c8:	4608      	mov	r0, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	2200      	movs	r2, #0
 80045ce:	4d05      	ldr	r5, [pc, #20]	@ (80045e4 <_lseek_r+0x20>)
 80045d0:	602a      	str	r2, [r5, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f7fd fa23 	bl	8001a1e <_lseek>
 80045d8:	1c43      	adds	r3, r0, #1
 80045da:	d102      	bne.n	80045e2 <_lseek_r+0x1e>
 80045dc:	682b      	ldr	r3, [r5, #0]
 80045de:	b103      	cbz	r3, 80045e2 <_lseek_r+0x1e>
 80045e0:	6023      	str	r3, [r4, #0]
 80045e2:	bd38      	pop	{r3, r4, r5, pc}
 80045e4:	200003d4 	.word	0x200003d4

080045e8 <_read_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	4611      	mov	r1, r2
 80045f0:	2200      	movs	r2, #0
 80045f2:	4d05      	ldr	r5, [pc, #20]	@ (8004608 <_read_r+0x20>)
 80045f4:	602a      	str	r2, [r5, #0]
 80045f6:	461a      	mov	r2, r3
 80045f8:	f7fd f9b4 	bl	8001964 <_read>
 80045fc:	1c43      	adds	r3, r0, #1
 80045fe:	d102      	bne.n	8004606 <_read_r+0x1e>
 8004600:	682b      	ldr	r3, [r5, #0]
 8004602:	b103      	cbz	r3, 8004606 <_read_r+0x1e>
 8004604:	6023      	str	r3, [r4, #0]
 8004606:	bd38      	pop	{r3, r4, r5, pc}
 8004608:	200003d4 	.word	0x200003d4

0800460c <_write_r>:
 800460c:	b538      	push	{r3, r4, r5, lr}
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	4611      	mov	r1, r2
 8004614:	2200      	movs	r2, #0
 8004616:	4d05      	ldr	r5, [pc, #20]	@ (800462c <_write_r+0x20>)
 8004618:	602a      	str	r2, [r5, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	f7fd f9bf 	bl	800199e <_write>
 8004620:	1c43      	adds	r3, r0, #1
 8004622:	d102      	bne.n	800462a <_write_r+0x1e>
 8004624:	682b      	ldr	r3, [r5, #0]
 8004626:	b103      	cbz	r3, 800462a <_write_r+0x1e>
 8004628:	6023      	str	r3, [r4, #0]
 800462a:	bd38      	pop	{r3, r4, r5, pc}
 800462c:	200003d4 	.word	0x200003d4

08004630 <__errno>:
 8004630:	4b01      	ldr	r3, [pc, #4]	@ (8004638 <__errno+0x8>)
 8004632:	6818      	ldr	r0, [r3, #0]
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2000001c 	.word	0x2000001c

0800463c <__libc_init_array>:
 800463c:	b570      	push	{r4, r5, r6, lr}
 800463e:	2600      	movs	r6, #0
 8004640:	4d0c      	ldr	r5, [pc, #48]	@ (8004674 <__libc_init_array+0x38>)
 8004642:	4c0d      	ldr	r4, [pc, #52]	@ (8004678 <__libc_init_array+0x3c>)
 8004644:	1b64      	subs	r4, r4, r5
 8004646:	10a4      	asrs	r4, r4, #2
 8004648:	42a6      	cmp	r6, r4
 800464a:	d109      	bne.n	8004660 <__libc_init_array+0x24>
 800464c:	f002 f874 	bl	8006738 <_init>
 8004650:	2600      	movs	r6, #0
 8004652:	4d0a      	ldr	r5, [pc, #40]	@ (800467c <__libc_init_array+0x40>)
 8004654:	4c0a      	ldr	r4, [pc, #40]	@ (8004680 <__libc_init_array+0x44>)
 8004656:	1b64      	subs	r4, r4, r5
 8004658:	10a4      	asrs	r4, r4, #2
 800465a:	42a6      	cmp	r6, r4
 800465c:	d105      	bne.n	800466a <__libc_init_array+0x2e>
 800465e:	bd70      	pop	{r4, r5, r6, pc}
 8004660:	f855 3b04 	ldr.w	r3, [r5], #4
 8004664:	4798      	blx	r3
 8004666:	3601      	adds	r6, #1
 8004668:	e7ee      	b.n	8004648 <__libc_init_array+0xc>
 800466a:	f855 3b04 	ldr.w	r3, [r5], #4
 800466e:	4798      	blx	r3
 8004670:	3601      	adds	r6, #1
 8004672:	e7f2      	b.n	800465a <__libc_init_array+0x1e>
 8004674:	08006b3c 	.word	0x08006b3c
 8004678:	08006b3c 	.word	0x08006b3c
 800467c:	08006b3c 	.word	0x08006b3c
 8004680:	08006b40 	.word	0x08006b40

08004684 <__retarget_lock_init_recursive>:
 8004684:	4770      	bx	lr

08004686 <__retarget_lock_acquire_recursive>:
 8004686:	4770      	bx	lr

08004688 <__retarget_lock_release_recursive>:
 8004688:	4770      	bx	lr

0800468a <memchr>:
 800468a:	4603      	mov	r3, r0
 800468c:	b510      	push	{r4, lr}
 800468e:	b2c9      	uxtb	r1, r1
 8004690:	4402      	add	r2, r0
 8004692:	4293      	cmp	r3, r2
 8004694:	4618      	mov	r0, r3
 8004696:	d101      	bne.n	800469c <memchr+0x12>
 8004698:	2000      	movs	r0, #0
 800469a:	e003      	b.n	80046a4 <memchr+0x1a>
 800469c:	7804      	ldrb	r4, [r0, #0]
 800469e:	3301      	adds	r3, #1
 80046a0:	428c      	cmp	r4, r1
 80046a2:	d1f6      	bne.n	8004692 <memchr+0x8>
 80046a4:	bd10      	pop	{r4, pc}

080046a6 <quorem>:
 80046a6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046aa:	6903      	ldr	r3, [r0, #16]
 80046ac:	690c      	ldr	r4, [r1, #16]
 80046ae:	4607      	mov	r7, r0
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	db7e      	blt.n	80047b2 <quorem+0x10c>
 80046b4:	3c01      	subs	r4, #1
 80046b6:	00a3      	lsls	r3, r4, #2
 80046b8:	f100 0514 	add.w	r5, r0, #20
 80046bc:	f101 0814 	add.w	r8, r1, #20
 80046c0:	9300      	str	r3, [sp, #0]
 80046c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80046c6:	9301      	str	r3, [sp, #4]
 80046c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80046cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046d0:	3301      	adds	r3, #1
 80046d2:	429a      	cmp	r2, r3
 80046d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80046d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80046dc:	d32e      	bcc.n	800473c <quorem+0x96>
 80046de:	f04f 0a00 	mov.w	sl, #0
 80046e2:	46c4      	mov	ip, r8
 80046e4:	46ae      	mov	lr, r5
 80046e6:	46d3      	mov	fp, sl
 80046e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80046ec:	b298      	uxth	r0, r3
 80046ee:	fb06 a000 	mla	r0, r6, r0, sl
 80046f2:	0c1b      	lsrs	r3, r3, #16
 80046f4:	0c02      	lsrs	r2, r0, #16
 80046f6:	fb06 2303 	mla	r3, r6, r3, r2
 80046fa:	f8de 2000 	ldr.w	r2, [lr]
 80046fe:	b280      	uxth	r0, r0
 8004700:	b292      	uxth	r2, r2
 8004702:	1a12      	subs	r2, r2, r0
 8004704:	445a      	add	r2, fp
 8004706:	f8de 0000 	ldr.w	r0, [lr]
 800470a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800470e:	b29b      	uxth	r3, r3
 8004710:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004714:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004718:	b292      	uxth	r2, r2
 800471a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800471e:	45e1      	cmp	r9, ip
 8004720:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004724:	f84e 2b04 	str.w	r2, [lr], #4
 8004728:	d2de      	bcs.n	80046e8 <quorem+0x42>
 800472a:	9b00      	ldr	r3, [sp, #0]
 800472c:	58eb      	ldr	r3, [r5, r3]
 800472e:	b92b      	cbnz	r3, 800473c <quorem+0x96>
 8004730:	9b01      	ldr	r3, [sp, #4]
 8004732:	3b04      	subs	r3, #4
 8004734:	429d      	cmp	r5, r3
 8004736:	461a      	mov	r2, r3
 8004738:	d32f      	bcc.n	800479a <quorem+0xf4>
 800473a:	613c      	str	r4, [r7, #16]
 800473c:	4638      	mov	r0, r7
 800473e:	f001 f97f 	bl	8005a40 <__mcmp>
 8004742:	2800      	cmp	r0, #0
 8004744:	db25      	blt.n	8004792 <quorem+0xec>
 8004746:	4629      	mov	r1, r5
 8004748:	2000      	movs	r0, #0
 800474a:	f858 2b04 	ldr.w	r2, [r8], #4
 800474e:	f8d1 c000 	ldr.w	ip, [r1]
 8004752:	fa1f fe82 	uxth.w	lr, r2
 8004756:	fa1f f38c 	uxth.w	r3, ip
 800475a:	eba3 030e 	sub.w	r3, r3, lr
 800475e:	4403      	add	r3, r0
 8004760:	0c12      	lsrs	r2, r2, #16
 8004762:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004766:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800476a:	b29b      	uxth	r3, r3
 800476c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004770:	45c1      	cmp	r9, r8
 8004772:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004776:	f841 3b04 	str.w	r3, [r1], #4
 800477a:	d2e6      	bcs.n	800474a <quorem+0xa4>
 800477c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004784:	b922      	cbnz	r2, 8004790 <quorem+0xea>
 8004786:	3b04      	subs	r3, #4
 8004788:	429d      	cmp	r5, r3
 800478a:	461a      	mov	r2, r3
 800478c:	d30b      	bcc.n	80047a6 <quorem+0x100>
 800478e:	613c      	str	r4, [r7, #16]
 8004790:	3601      	adds	r6, #1
 8004792:	4630      	mov	r0, r6
 8004794:	b003      	add	sp, #12
 8004796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800479a:	6812      	ldr	r2, [r2, #0]
 800479c:	3b04      	subs	r3, #4
 800479e:	2a00      	cmp	r2, #0
 80047a0:	d1cb      	bne.n	800473a <quorem+0x94>
 80047a2:	3c01      	subs	r4, #1
 80047a4:	e7c6      	b.n	8004734 <quorem+0x8e>
 80047a6:	6812      	ldr	r2, [r2, #0]
 80047a8:	3b04      	subs	r3, #4
 80047aa:	2a00      	cmp	r2, #0
 80047ac:	d1ef      	bne.n	800478e <quorem+0xe8>
 80047ae:	3c01      	subs	r4, #1
 80047b0:	e7ea      	b.n	8004788 <quorem+0xe2>
 80047b2:	2000      	movs	r0, #0
 80047b4:	e7ee      	b.n	8004794 <quorem+0xee>
	...

080047b8 <_dtoa_r>:
 80047b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047bc:	4614      	mov	r4, r2
 80047be:	461d      	mov	r5, r3
 80047c0:	69c7      	ldr	r7, [r0, #28]
 80047c2:	b097      	sub	sp, #92	@ 0x5c
 80047c4:	4681      	mov	r9, r0
 80047c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80047ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80047cc:	b97f      	cbnz	r7, 80047ee <_dtoa_r+0x36>
 80047ce:	2010      	movs	r0, #16
 80047d0:	f000 fe0e 	bl	80053f0 <malloc>
 80047d4:	4602      	mov	r2, r0
 80047d6:	f8c9 001c 	str.w	r0, [r9, #28]
 80047da:	b920      	cbnz	r0, 80047e6 <_dtoa_r+0x2e>
 80047dc:	21ef      	movs	r1, #239	@ 0xef
 80047de:	4bac      	ldr	r3, [pc, #688]	@ (8004a90 <_dtoa_r+0x2d8>)
 80047e0:	48ac      	ldr	r0, [pc, #688]	@ (8004a94 <_dtoa_r+0x2dc>)
 80047e2:	f001 fc6d 	bl	80060c0 <__assert_func>
 80047e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80047ea:	6007      	str	r7, [r0, #0]
 80047ec:	60c7      	str	r7, [r0, #12]
 80047ee:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80047f2:	6819      	ldr	r1, [r3, #0]
 80047f4:	b159      	cbz	r1, 800480e <_dtoa_r+0x56>
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	2301      	movs	r3, #1
 80047fa:	4093      	lsls	r3, r2
 80047fc:	604a      	str	r2, [r1, #4]
 80047fe:	608b      	str	r3, [r1, #8]
 8004800:	4648      	mov	r0, r9
 8004802:	f000 feeb 	bl	80055dc <_Bfree>
 8004806:	2200      	movs	r2, #0
 8004808:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	1e2b      	subs	r3, r5, #0
 8004810:	bfaf      	iteee	ge
 8004812:	2300      	movge	r3, #0
 8004814:	2201      	movlt	r2, #1
 8004816:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800481a:	9307      	strlt	r3, [sp, #28]
 800481c:	bfa8      	it	ge
 800481e:	6033      	strge	r3, [r6, #0]
 8004820:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8004824:	4b9c      	ldr	r3, [pc, #624]	@ (8004a98 <_dtoa_r+0x2e0>)
 8004826:	bfb8      	it	lt
 8004828:	6032      	strlt	r2, [r6, #0]
 800482a:	ea33 0308 	bics.w	r3, r3, r8
 800482e:	d112      	bne.n	8004856 <_dtoa_r+0x9e>
 8004830:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004834:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004836:	6013      	str	r3, [r2, #0]
 8004838:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800483c:	4323      	orrs	r3, r4
 800483e:	f000 855e 	beq.w	80052fe <_dtoa_r+0xb46>
 8004842:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004844:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8004a9c <_dtoa_r+0x2e4>
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 8560 	beq.w	800530e <_dtoa_r+0xb56>
 800484e:	f10a 0303 	add.w	r3, sl, #3
 8004852:	f000 bd5a 	b.w	800530a <_dtoa_r+0xb52>
 8004856:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800485a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800485e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004862:	2200      	movs	r2, #0
 8004864:	2300      	movs	r3, #0
 8004866:	f7fc f89f 	bl	80009a8 <__aeabi_dcmpeq>
 800486a:	4607      	mov	r7, r0
 800486c:	b158      	cbz	r0, 8004886 <_dtoa_r+0xce>
 800486e:	2301      	movs	r3, #1
 8004870:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004876:	b113      	cbz	r3, 800487e <_dtoa_r+0xc6>
 8004878:	4b89      	ldr	r3, [pc, #548]	@ (8004aa0 <_dtoa_r+0x2e8>)
 800487a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8004aa4 <_dtoa_r+0x2ec>
 8004882:	f000 bd44 	b.w	800530e <_dtoa_r+0xb56>
 8004886:	ab14      	add	r3, sp, #80	@ 0x50
 8004888:	9301      	str	r3, [sp, #4]
 800488a:	ab15      	add	r3, sp, #84	@ 0x54
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	4648      	mov	r0, r9
 8004890:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004894:	f001 f984 	bl	8005ba0 <__d2b>
 8004898:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800489c:	9003      	str	r0, [sp, #12]
 800489e:	2e00      	cmp	r6, #0
 80048a0:	d078      	beq.n	8004994 <_dtoa_r+0x1dc>
 80048a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80048a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80048ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80048b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80048b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80048ba:	4619      	mov	r1, r3
 80048bc:	2200      	movs	r2, #0
 80048be:	4b7a      	ldr	r3, [pc, #488]	@ (8004aa8 <_dtoa_r+0x2f0>)
 80048c0:	f7fb fc52 	bl	8000168 <__aeabi_dsub>
 80048c4:	a36c      	add	r3, pc, #432	@ (adr r3, 8004a78 <_dtoa_r+0x2c0>)
 80048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ca:	f7fb fe05 	bl	80004d8 <__aeabi_dmul>
 80048ce:	a36c      	add	r3, pc, #432	@ (adr r3, 8004a80 <_dtoa_r+0x2c8>)
 80048d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d4:	f7fb fc4a 	bl	800016c <__adddf3>
 80048d8:	4604      	mov	r4, r0
 80048da:	4630      	mov	r0, r6
 80048dc:	460d      	mov	r5, r1
 80048de:	f7fb fd91 	bl	8000404 <__aeabi_i2d>
 80048e2:	a369      	add	r3, pc, #420	@ (adr r3, 8004a88 <_dtoa_r+0x2d0>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fdf6 	bl	80004d8 <__aeabi_dmul>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4620      	mov	r0, r4
 80048f2:	4629      	mov	r1, r5
 80048f4:	f7fb fc3a 	bl	800016c <__adddf3>
 80048f8:	4604      	mov	r4, r0
 80048fa:	460d      	mov	r5, r1
 80048fc:	f7fc f89c 	bl	8000a38 <__aeabi_d2iz>
 8004900:	2200      	movs	r2, #0
 8004902:	4607      	mov	r7, r0
 8004904:	2300      	movs	r3, #0
 8004906:	4620      	mov	r0, r4
 8004908:	4629      	mov	r1, r5
 800490a:	f7fc f857 	bl	80009bc <__aeabi_dcmplt>
 800490e:	b140      	cbz	r0, 8004922 <_dtoa_r+0x16a>
 8004910:	4638      	mov	r0, r7
 8004912:	f7fb fd77 	bl	8000404 <__aeabi_i2d>
 8004916:	4622      	mov	r2, r4
 8004918:	462b      	mov	r3, r5
 800491a:	f7fc f845 	bl	80009a8 <__aeabi_dcmpeq>
 800491e:	b900      	cbnz	r0, 8004922 <_dtoa_r+0x16a>
 8004920:	3f01      	subs	r7, #1
 8004922:	2f16      	cmp	r7, #22
 8004924:	d854      	bhi.n	80049d0 <_dtoa_r+0x218>
 8004926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800492a:	4b60      	ldr	r3, [pc, #384]	@ (8004aac <_dtoa_r+0x2f4>)
 800492c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	f7fc f842 	bl	80009bc <__aeabi_dcmplt>
 8004938:	2800      	cmp	r0, #0
 800493a:	d04b      	beq.n	80049d4 <_dtoa_r+0x21c>
 800493c:	2300      	movs	r3, #0
 800493e:	3f01      	subs	r7, #1
 8004940:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004942:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004944:	1b9b      	subs	r3, r3, r6
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	bf49      	itett	mi
 800494a:	f1c3 0301 	rsbmi	r3, r3, #1
 800494e:	2300      	movpl	r3, #0
 8004950:	9304      	strmi	r3, [sp, #16]
 8004952:	2300      	movmi	r3, #0
 8004954:	9209      	str	r2, [sp, #36]	@ 0x24
 8004956:	bf54      	ite	pl
 8004958:	9304      	strpl	r3, [sp, #16]
 800495a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800495c:	2f00      	cmp	r7, #0
 800495e:	db3b      	blt.n	80049d8 <_dtoa_r+0x220>
 8004960:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004962:	970e      	str	r7, [sp, #56]	@ 0x38
 8004964:	443b      	add	r3, r7
 8004966:	9309      	str	r3, [sp, #36]	@ 0x24
 8004968:	2300      	movs	r3, #0
 800496a:	930a      	str	r3, [sp, #40]	@ 0x28
 800496c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800496e:	2b09      	cmp	r3, #9
 8004970:	d865      	bhi.n	8004a3e <_dtoa_r+0x286>
 8004972:	2b05      	cmp	r3, #5
 8004974:	bfc4      	itt	gt
 8004976:	3b04      	subgt	r3, #4
 8004978:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800497a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800497c:	bfc8      	it	gt
 800497e:	2400      	movgt	r4, #0
 8004980:	f1a3 0302 	sub.w	r3, r3, #2
 8004984:	bfd8      	it	le
 8004986:	2401      	movle	r4, #1
 8004988:	2b03      	cmp	r3, #3
 800498a:	d864      	bhi.n	8004a56 <_dtoa_r+0x29e>
 800498c:	e8df f003 	tbb	[pc, r3]
 8004990:	2c385553 	.word	0x2c385553
 8004994:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004998:	441e      	add	r6, r3
 800499a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800499e:	2b20      	cmp	r3, #32
 80049a0:	bfc1      	itttt	gt
 80049a2:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80049a6:	fa08 f803 	lslgt.w	r8, r8, r3
 80049aa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80049ae:	fa24 f303 	lsrgt.w	r3, r4, r3
 80049b2:	bfd6      	itet	le
 80049b4:	f1c3 0320 	rsble	r3, r3, #32
 80049b8:	ea48 0003 	orrgt.w	r0, r8, r3
 80049bc:	fa04 f003 	lslle.w	r0, r4, r3
 80049c0:	f7fb fd10 	bl	80003e4 <__aeabi_ui2d>
 80049c4:	2201      	movs	r2, #1
 80049c6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80049ca:	3e01      	subs	r6, #1
 80049cc:	9212      	str	r2, [sp, #72]	@ 0x48
 80049ce:	e774      	b.n	80048ba <_dtoa_r+0x102>
 80049d0:	2301      	movs	r3, #1
 80049d2:	e7b5      	b.n	8004940 <_dtoa_r+0x188>
 80049d4:	900f      	str	r0, [sp, #60]	@ 0x3c
 80049d6:	e7b4      	b.n	8004942 <_dtoa_r+0x18a>
 80049d8:	9b04      	ldr	r3, [sp, #16]
 80049da:	1bdb      	subs	r3, r3, r7
 80049dc:	9304      	str	r3, [sp, #16]
 80049de:	427b      	negs	r3, r7
 80049e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80049e2:	2300      	movs	r3, #0
 80049e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80049e6:	e7c1      	b.n	800496c <_dtoa_r+0x1b4>
 80049e8:	2301      	movs	r3, #1
 80049ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80049ec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80049ee:	eb07 0b03 	add.w	fp, r7, r3
 80049f2:	f10b 0301 	add.w	r3, fp, #1
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	9308      	str	r3, [sp, #32]
 80049fa:	bfb8      	it	lt
 80049fc:	2301      	movlt	r3, #1
 80049fe:	e006      	b.n	8004a0e <_dtoa_r+0x256>
 8004a00:	2301      	movs	r3, #1
 8004a02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a04:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	dd28      	ble.n	8004a5c <_dtoa_r+0x2a4>
 8004a0a:	469b      	mov	fp, r3
 8004a0c:	9308      	str	r3, [sp, #32]
 8004a0e:	2100      	movs	r1, #0
 8004a10:	2204      	movs	r2, #4
 8004a12:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004a16:	f102 0514 	add.w	r5, r2, #20
 8004a1a:	429d      	cmp	r5, r3
 8004a1c:	d926      	bls.n	8004a6c <_dtoa_r+0x2b4>
 8004a1e:	6041      	str	r1, [r0, #4]
 8004a20:	4648      	mov	r0, r9
 8004a22:	f000 fd9b 	bl	800555c <_Balloc>
 8004a26:	4682      	mov	sl, r0
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d143      	bne.n	8004ab4 <_dtoa_r+0x2fc>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f240 11af 	movw	r1, #431	@ 0x1af
 8004a32:	4b1f      	ldr	r3, [pc, #124]	@ (8004ab0 <_dtoa_r+0x2f8>)
 8004a34:	e6d4      	b.n	80047e0 <_dtoa_r+0x28>
 8004a36:	2300      	movs	r3, #0
 8004a38:	e7e3      	b.n	8004a02 <_dtoa_r+0x24a>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e7d5      	b.n	80049ea <_dtoa_r+0x232>
 8004a3e:	2401      	movs	r4, #1
 8004a40:	2300      	movs	r3, #0
 8004a42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8004a44:	9320      	str	r3, [sp, #128]	@ 0x80
 8004a46:	f04f 3bff 	mov.w	fp, #4294967295
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	2312      	movs	r3, #18
 8004a4e:	f8cd b020 	str.w	fp, [sp, #32]
 8004a52:	9221      	str	r2, [sp, #132]	@ 0x84
 8004a54:	e7db      	b.n	8004a0e <_dtoa_r+0x256>
 8004a56:	2301      	movs	r3, #1
 8004a58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a5a:	e7f4      	b.n	8004a46 <_dtoa_r+0x28e>
 8004a5c:	f04f 0b01 	mov.w	fp, #1
 8004a60:	465b      	mov	r3, fp
 8004a62:	f8cd b020 	str.w	fp, [sp, #32]
 8004a66:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8004a6a:	e7d0      	b.n	8004a0e <_dtoa_r+0x256>
 8004a6c:	3101      	adds	r1, #1
 8004a6e:	0052      	lsls	r2, r2, #1
 8004a70:	e7d1      	b.n	8004a16 <_dtoa_r+0x25e>
 8004a72:	bf00      	nop
 8004a74:	f3af 8000 	nop.w
 8004a78:	636f4361 	.word	0x636f4361
 8004a7c:	3fd287a7 	.word	0x3fd287a7
 8004a80:	8b60c8b3 	.word	0x8b60c8b3
 8004a84:	3fc68a28 	.word	0x3fc68a28
 8004a88:	509f79fb 	.word	0x509f79fb
 8004a8c:	3fd34413 	.word	0x3fd34413
 8004a90:	080067ff 	.word	0x080067ff
 8004a94:	08006816 	.word	0x08006816
 8004a98:	7ff00000 	.word	0x7ff00000
 8004a9c:	080067fb 	.word	0x080067fb
 8004aa0:	080067cf 	.word	0x080067cf
 8004aa4:	080067ce 	.word	0x080067ce
 8004aa8:	3ff80000 	.word	0x3ff80000
 8004aac:	08006968 	.word	0x08006968
 8004ab0:	0800686e 	.word	0x0800686e
 8004ab4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004ab8:	6018      	str	r0, [r3, #0]
 8004aba:	9b08      	ldr	r3, [sp, #32]
 8004abc:	2b0e      	cmp	r3, #14
 8004abe:	f200 80a1 	bhi.w	8004c04 <_dtoa_r+0x44c>
 8004ac2:	2c00      	cmp	r4, #0
 8004ac4:	f000 809e 	beq.w	8004c04 <_dtoa_r+0x44c>
 8004ac8:	2f00      	cmp	r7, #0
 8004aca:	dd33      	ble.n	8004b34 <_dtoa_r+0x37c>
 8004acc:	4b9c      	ldr	r3, [pc, #624]	@ (8004d40 <_dtoa_r+0x588>)
 8004ace:	f007 020f 	and.w	r2, r7, #15
 8004ad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ad6:	05f8      	lsls	r0, r7, #23
 8004ad8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004adc:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8004ae0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004ae4:	d516      	bpl.n	8004b14 <_dtoa_r+0x35c>
 8004ae6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004aea:	4b96      	ldr	r3, [pc, #600]	@ (8004d44 <_dtoa_r+0x58c>)
 8004aec:	2603      	movs	r6, #3
 8004aee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004af2:	f7fb fe1b 	bl	800072c <__aeabi_ddiv>
 8004af6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004afa:	f004 040f 	and.w	r4, r4, #15
 8004afe:	4d91      	ldr	r5, [pc, #580]	@ (8004d44 <_dtoa_r+0x58c>)
 8004b00:	b954      	cbnz	r4, 8004b18 <_dtoa_r+0x360>
 8004b02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004b06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b0a:	f7fb fe0f 	bl	800072c <__aeabi_ddiv>
 8004b0e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b12:	e028      	b.n	8004b66 <_dtoa_r+0x3ae>
 8004b14:	2602      	movs	r6, #2
 8004b16:	e7f2      	b.n	8004afe <_dtoa_r+0x346>
 8004b18:	07e1      	lsls	r1, r4, #31
 8004b1a:	d508      	bpl.n	8004b2e <_dtoa_r+0x376>
 8004b1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004b20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b24:	f7fb fcd8 	bl	80004d8 <__aeabi_dmul>
 8004b28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004b2c:	3601      	adds	r6, #1
 8004b2e:	1064      	asrs	r4, r4, #1
 8004b30:	3508      	adds	r5, #8
 8004b32:	e7e5      	b.n	8004b00 <_dtoa_r+0x348>
 8004b34:	f000 80af 	beq.w	8004c96 <_dtoa_r+0x4de>
 8004b38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004b3c:	427c      	negs	r4, r7
 8004b3e:	4b80      	ldr	r3, [pc, #512]	@ (8004d40 <_dtoa_r+0x588>)
 8004b40:	f004 020f 	and.w	r2, r4, #15
 8004b44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4c:	f7fb fcc4 	bl	80004d8 <__aeabi_dmul>
 8004b50:	2602      	movs	r6, #2
 8004b52:	2300      	movs	r3, #0
 8004b54:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b58:	4d7a      	ldr	r5, [pc, #488]	@ (8004d44 <_dtoa_r+0x58c>)
 8004b5a:	1124      	asrs	r4, r4, #4
 8004b5c:	2c00      	cmp	r4, #0
 8004b5e:	f040 808f 	bne.w	8004c80 <_dtoa_r+0x4c8>
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1d3      	bne.n	8004b0e <_dtoa_r+0x356>
 8004b66:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004b6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8094 	beq.w	8004c9a <_dtoa_r+0x4e2>
 8004b72:	2200      	movs	r2, #0
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	4b73      	ldr	r3, [pc, #460]	@ (8004d48 <_dtoa_r+0x590>)
 8004b7a:	f7fb ff1f 	bl	80009bc <__aeabi_dcmplt>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	f000 808b 	beq.w	8004c9a <_dtoa_r+0x4e2>
 8004b84:	9b08      	ldr	r3, [sp, #32]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 8087 	beq.w	8004c9a <_dtoa_r+0x4e2>
 8004b8c:	f1bb 0f00 	cmp.w	fp, #0
 8004b90:	dd34      	ble.n	8004bfc <_dtoa_r+0x444>
 8004b92:	4620      	mov	r0, r4
 8004b94:	2200      	movs	r2, #0
 8004b96:	4629      	mov	r1, r5
 8004b98:	4b6c      	ldr	r3, [pc, #432]	@ (8004d4c <_dtoa_r+0x594>)
 8004b9a:	f7fb fc9d 	bl	80004d8 <__aeabi_dmul>
 8004b9e:	465c      	mov	r4, fp
 8004ba0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004ba4:	f107 38ff 	add.w	r8, r7, #4294967295
 8004ba8:	3601      	adds	r6, #1
 8004baa:	4630      	mov	r0, r6
 8004bac:	f7fb fc2a 	bl	8000404 <__aeabi_i2d>
 8004bb0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bb4:	f7fb fc90 	bl	80004d8 <__aeabi_dmul>
 8004bb8:	2200      	movs	r2, #0
 8004bba:	4b65      	ldr	r3, [pc, #404]	@ (8004d50 <_dtoa_r+0x598>)
 8004bbc:	f7fb fad6 	bl	800016c <__adddf3>
 8004bc0:	4605      	mov	r5, r0
 8004bc2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004bc6:	2c00      	cmp	r4, #0
 8004bc8:	d16a      	bne.n	8004ca0 <_dtoa_r+0x4e8>
 8004bca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	4b60      	ldr	r3, [pc, #384]	@ (8004d54 <_dtoa_r+0x59c>)
 8004bd2:	f7fb fac9 	bl	8000168 <__aeabi_dsub>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004bde:	462a      	mov	r2, r5
 8004be0:	4633      	mov	r3, r6
 8004be2:	f7fb ff09 	bl	80009f8 <__aeabi_dcmpgt>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	f040 8298 	bne.w	800511c <_dtoa_r+0x964>
 8004bec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bf0:	462a      	mov	r2, r5
 8004bf2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004bf6:	f7fb fee1 	bl	80009bc <__aeabi_dcmplt>
 8004bfa:	bb38      	cbnz	r0, 8004c4c <_dtoa_r+0x494>
 8004bfc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8004c00:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004c04:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f2c0 8157 	blt.w	8004eba <_dtoa_r+0x702>
 8004c0c:	2f0e      	cmp	r7, #14
 8004c0e:	f300 8154 	bgt.w	8004eba <_dtoa_r+0x702>
 8004c12:	4b4b      	ldr	r3, [pc, #300]	@ (8004d40 <_dtoa_r+0x588>)
 8004c14:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004c18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004c20:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f280 80e5 	bge.w	8004df2 <_dtoa_r+0x63a>
 8004c28:	9b08      	ldr	r3, [sp, #32]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f300 80e1 	bgt.w	8004df2 <_dtoa_r+0x63a>
 8004c30:	d10c      	bne.n	8004c4c <_dtoa_r+0x494>
 8004c32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c36:	2200      	movs	r2, #0
 8004c38:	4b46      	ldr	r3, [pc, #280]	@ (8004d54 <_dtoa_r+0x59c>)
 8004c3a:	f7fb fc4d 	bl	80004d8 <__aeabi_dmul>
 8004c3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c42:	f7fb fecf 	bl	80009e4 <__aeabi_dcmpge>
 8004c46:	2800      	cmp	r0, #0
 8004c48:	f000 8266 	beq.w	8005118 <_dtoa_r+0x960>
 8004c4c:	2400      	movs	r4, #0
 8004c4e:	4625      	mov	r5, r4
 8004c50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c52:	4656      	mov	r6, sl
 8004c54:	ea6f 0803 	mvn.w	r8, r3
 8004c58:	2700      	movs	r7, #0
 8004c5a:	4621      	mov	r1, r4
 8004c5c:	4648      	mov	r0, r9
 8004c5e:	f000 fcbd 	bl	80055dc <_Bfree>
 8004c62:	2d00      	cmp	r5, #0
 8004c64:	f000 80bd 	beq.w	8004de2 <_dtoa_r+0x62a>
 8004c68:	b12f      	cbz	r7, 8004c76 <_dtoa_r+0x4be>
 8004c6a:	42af      	cmp	r7, r5
 8004c6c:	d003      	beq.n	8004c76 <_dtoa_r+0x4be>
 8004c6e:	4639      	mov	r1, r7
 8004c70:	4648      	mov	r0, r9
 8004c72:	f000 fcb3 	bl	80055dc <_Bfree>
 8004c76:	4629      	mov	r1, r5
 8004c78:	4648      	mov	r0, r9
 8004c7a:	f000 fcaf 	bl	80055dc <_Bfree>
 8004c7e:	e0b0      	b.n	8004de2 <_dtoa_r+0x62a>
 8004c80:	07e2      	lsls	r2, r4, #31
 8004c82:	d505      	bpl.n	8004c90 <_dtoa_r+0x4d8>
 8004c84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c88:	f7fb fc26 	bl	80004d8 <__aeabi_dmul>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	3601      	adds	r6, #1
 8004c90:	1064      	asrs	r4, r4, #1
 8004c92:	3508      	adds	r5, #8
 8004c94:	e762      	b.n	8004b5c <_dtoa_r+0x3a4>
 8004c96:	2602      	movs	r6, #2
 8004c98:	e765      	b.n	8004b66 <_dtoa_r+0x3ae>
 8004c9a:	46b8      	mov	r8, r7
 8004c9c:	9c08      	ldr	r4, [sp, #32]
 8004c9e:	e784      	b.n	8004baa <_dtoa_r+0x3f2>
 8004ca0:	4b27      	ldr	r3, [pc, #156]	@ (8004d40 <_dtoa_r+0x588>)
 8004ca2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004ca4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004ca8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004cac:	4454      	add	r4, sl
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	d054      	beq.n	8004d5c <_dtoa_r+0x5a4>
 8004cb2:	2000      	movs	r0, #0
 8004cb4:	4928      	ldr	r1, [pc, #160]	@ (8004d58 <_dtoa_r+0x5a0>)
 8004cb6:	f7fb fd39 	bl	800072c <__aeabi_ddiv>
 8004cba:	4633      	mov	r3, r6
 8004cbc:	462a      	mov	r2, r5
 8004cbe:	f7fb fa53 	bl	8000168 <__aeabi_dsub>
 8004cc2:	4656      	mov	r6, sl
 8004cc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004cc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ccc:	f7fb feb4 	bl	8000a38 <__aeabi_d2iz>
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	f7fb fb97 	bl	8000404 <__aeabi_i2d>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	460b      	mov	r3, r1
 8004cda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004cde:	f7fb fa43 	bl	8000168 <__aeabi_dsub>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	3530      	adds	r5, #48	@ 0x30
 8004ce8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cec:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004cf0:	f806 5b01 	strb.w	r5, [r6], #1
 8004cf4:	f7fb fe62 	bl	80009bc <__aeabi_dcmplt>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	d172      	bne.n	8004de2 <_dtoa_r+0x62a>
 8004cfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d00:	2000      	movs	r0, #0
 8004d02:	4911      	ldr	r1, [pc, #68]	@ (8004d48 <_dtoa_r+0x590>)
 8004d04:	f7fb fa30 	bl	8000168 <__aeabi_dsub>
 8004d08:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004d0c:	f7fb fe56 	bl	80009bc <__aeabi_dcmplt>
 8004d10:	2800      	cmp	r0, #0
 8004d12:	f040 80b4 	bne.w	8004e7e <_dtoa_r+0x6c6>
 8004d16:	42a6      	cmp	r6, r4
 8004d18:	f43f af70 	beq.w	8004bfc <_dtoa_r+0x444>
 8004d1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004d20:	2200      	movs	r2, #0
 8004d22:	4b0a      	ldr	r3, [pc, #40]	@ (8004d4c <_dtoa_r+0x594>)
 8004d24:	f7fb fbd8 	bl	80004d8 <__aeabi_dmul>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <_dtoa_r+0x594>)
 8004d34:	f7fb fbd0 	bl	80004d8 <__aeabi_dmul>
 8004d38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004d3c:	e7c4      	b.n	8004cc8 <_dtoa_r+0x510>
 8004d3e:	bf00      	nop
 8004d40:	08006968 	.word	0x08006968
 8004d44:	08006940 	.word	0x08006940
 8004d48:	3ff00000 	.word	0x3ff00000
 8004d4c:	40240000 	.word	0x40240000
 8004d50:	401c0000 	.word	0x401c0000
 8004d54:	40140000 	.word	0x40140000
 8004d58:	3fe00000 	.word	0x3fe00000
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4628      	mov	r0, r5
 8004d60:	f7fb fbba 	bl	80004d8 <__aeabi_dmul>
 8004d64:	4656      	mov	r6, sl
 8004d66:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8004d6a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004d6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d70:	f7fb fe62 	bl	8000a38 <__aeabi_d2iz>
 8004d74:	4605      	mov	r5, r0
 8004d76:	f7fb fb45 	bl	8000404 <__aeabi_i2d>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d82:	f7fb f9f1 	bl	8000168 <__aeabi_dsub>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	3530      	adds	r5, #48	@ 0x30
 8004d8c:	f806 5b01 	strb.w	r5, [r6], #1
 8004d90:	42a6      	cmp	r6, r4
 8004d92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004d96:	f04f 0200 	mov.w	r2, #0
 8004d9a:	d124      	bne.n	8004de6 <_dtoa_r+0x62e>
 8004d9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8004da0:	4bae      	ldr	r3, [pc, #696]	@ (800505c <_dtoa_r+0x8a4>)
 8004da2:	f7fb f9e3 	bl	800016c <__adddf3>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dae:	f7fb fe23 	bl	80009f8 <__aeabi_dcmpgt>
 8004db2:	2800      	cmp	r0, #0
 8004db4:	d163      	bne.n	8004e7e <_dtoa_r+0x6c6>
 8004db6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8004dba:	2000      	movs	r0, #0
 8004dbc:	49a7      	ldr	r1, [pc, #668]	@ (800505c <_dtoa_r+0x8a4>)
 8004dbe:	f7fb f9d3 	bl	8000168 <__aeabi_dsub>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	460b      	mov	r3, r1
 8004dc6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dca:	f7fb fdf7 	bl	80009bc <__aeabi_dcmplt>
 8004dce:	2800      	cmp	r0, #0
 8004dd0:	f43f af14 	beq.w	8004bfc <_dtoa_r+0x444>
 8004dd4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004dd6:	1e73      	subs	r3, r6, #1
 8004dd8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004dda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004dde:	2b30      	cmp	r3, #48	@ 0x30
 8004de0:	d0f8      	beq.n	8004dd4 <_dtoa_r+0x61c>
 8004de2:	4647      	mov	r7, r8
 8004de4:	e03b      	b.n	8004e5e <_dtoa_r+0x6a6>
 8004de6:	4b9e      	ldr	r3, [pc, #632]	@ (8005060 <_dtoa_r+0x8a8>)
 8004de8:	f7fb fb76 	bl	80004d8 <__aeabi_dmul>
 8004dec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004df0:	e7bc      	b.n	8004d6c <_dtoa_r+0x5b4>
 8004df2:	4656      	mov	r6, sl
 8004df4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8004df8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	4629      	mov	r1, r5
 8004e00:	f7fb fc94 	bl	800072c <__aeabi_ddiv>
 8004e04:	f7fb fe18 	bl	8000a38 <__aeabi_d2iz>
 8004e08:	4680      	mov	r8, r0
 8004e0a:	f7fb fafb 	bl	8000404 <__aeabi_i2d>
 8004e0e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e12:	f7fb fb61 	bl	80004d8 <__aeabi_dmul>
 8004e16:	4602      	mov	r2, r0
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	f7fb f9a3 	bl	8000168 <__aeabi_dsub>
 8004e22:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004e26:	9d08      	ldr	r5, [sp, #32]
 8004e28:	f806 4b01 	strb.w	r4, [r6], #1
 8004e2c:	eba6 040a 	sub.w	r4, r6, sl
 8004e30:	42a5      	cmp	r5, r4
 8004e32:	4602      	mov	r2, r0
 8004e34:	460b      	mov	r3, r1
 8004e36:	d133      	bne.n	8004ea0 <_dtoa_r+0x6e8>
 8004e38:	f7fb f998 	bl	800016c <__adddf3>
 8004e3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e40:	4604      	mov	r4, r0
 8004e42:	460d      	mov	r5, r1
 8004e44:	f7fb fdd8 	bl	80009f8 <__aeabi_dcmpgt>
 8004e48:	b9c0      	cbnz	r0, 8004e7c <_dtoa_r+0x6c4>
 8004e4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e4e:	4620      	mov	r0, r4
 8004e50:	4629      	mov	r1, r5
 8004e52:	f7fb fda9 	bl	80009a8 <__aeabi_dcmpeq>
 8004e56:	b110      	cbz	r0, 8004e5e <_dtoa_r+0x6a6>
 8004e58:	f018 0f01 	tst.w	r8, #1
 8004e5c:	d10e      	bne.n	8004e7c <_dtoa_r+0x6c4>
 8004e5e:	4648      	mov	r0, r9
 8004e60:	9903      	ldr	r1, [sp, #12]
 8004e62:	f000 fbbb 	bl	80055dc <_Bfree>
 8004e66:	2300      	movs	r3, #0
 8004e68:	7033      	strb	r3, [r6, #0]
 8004e6a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8004e6c:	3701      	adds	r7, #1
 8004e6e:	601f      	str	r7, [r3, #0]
 8004e70:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	f000 824b 	beq.w	800530e <_dtoa_r+0xb56>
 8004e78:	601e      	str	r6, [r3, #0]
 8004e7a:	e248      	b.n	800530e <_dtoa_r+0xb56>
 8004e7c:	46b8      	mov	r8, r7
 8004e7e:	4633      	mov	r3, r6
 8004e80:	461e      	mov	r6, r3
 8004e82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e86:	2a39      	cmp	r2, #57	@ 0x39
 8004e88:	d106      	bne.n	8004e98 <_dtoa_r+0x6e0>
 8004e8a:	459a      	cmp	sl, r3
 8004e8c:	d1f8      	bne.n	8004e80 <_dtoa_r+0x6c8>
 8004e8e:	2230      	movs	r2, #48	@ 0x30
 8004e90:	f108 0801 	add.w	r8, r8, #1
 8004e94:	f88a 2000 	strb.w	r2, [sl]
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	3201      	adds	r2, #1
 8004e9c:	701a      	strb	r2, [r3, #0]
 8004e9e:	e7a0      	b.n	8004de2 <_dtoa_r+0x62a>
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	4b6f      	ldr	r3, [pc, #444]	@ (8005060 <_dtoa_r+0x8a8>)
 8004ea4:	f7fb fb18 	bl	80004d8 <__aeabi_dmul>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	2300      	movs	r3, #0
 8004eac:	4604      	mov	r4, r0
 8004eae:	460d      	mov	r5, r1
 8004eb0:	f7fb fd7a 	bl	80009a8 <__aeabi_dcmpeq>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d09f      	beq.n	8004df8 <_dtoa_r+0x640>
 8004eb8:	e7d1      	b.n	8004e5e <_dtoa_r+0x6a6>
 8004eba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004ebc:	2a00      	cmp	r2, #0
 8004ebe:	f000 80ea 	beq.w	8005096 <_dtoa_r+0x8de>
 8004ec2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004ec4:	2a01      	cmp	r2, #1
 8004ec6:	f300 80cd 	bgt.w	8005064 <_dtoa_r+0x8ac>
 8004eca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004ecc:	2a00      	cmp	r2, #0
 8004ece:	f000 80c1 	beq.w	8005054 <_dtoa_r+0x89c>
 8004ed2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004ed6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8004ed8:	9e04      	ldr	r6, [sp, #16]
 8004eda:	9a04      	ldr	r2, [sp, #16]
 8004edc:	2101      	movs	r1, #1
 8004ede:	441a      	add	r2, r3
 8004ee0:	9204      	str	r2, [sp, #16]
 8004ee2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ee4:	4648      	mov	r0, r9
 8004ee6:	441a      	add	r2, r3
 8004ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8004eea:	f000 fc2b 	bl	8005744 <__i2b>
 8004eee:	4605      	mov	r5, r0
 8004ef0:	b166      	cbz	r6, 8004f0c <_dtoa_r+0x754>
 8004ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	dd09      	ble.n	8004f0c <_dtoa_r+0x754>
 8004ef8:	42b3      	cmp	r3, r6
 8004efa:	bfa8      	it	ge
 8004efc:	4633      	movge	r3, r6
 8004efe:	9a04      	ldr	r2, [sp, #16]
 8004f00:	1af6      	subs	r6, r6, r3
 8004f02:	1ad2      	subs	r2, r2, r3
 8004f04:	9204      	str	r2, [sp, #16]
 8004f06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f0e:	b30b      	cbz	r3, 8004f54 <_dtoa_r+0x79c>
 8004f10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	f000 80c6 	beq.w	80050a4 <_dtoa_r+0x8ec>
 8004f18:	2c00      	cmp	r4, #0
 8004f1a:	f000 80c0 	beq.w	800509e <_dtoa_r+0x8e6>
 8004f1e:	4629      	mov	r1, r5
 8004f20:	4622      	mov	r2, r4
 8004f22:	4648      	mov	r0, r9
 8004f24:	f000 fcc6 	bl	80058b4 <__pow5mult>
 8004f28:	9a03      	ldr	r2, [sp, #12]
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4605      	mov	r5, r0
 8004f2e:	4648      	mov	r0, r9
 8004f30:	f000 fc1e 	bl	8005770 <__multiply>
 8004f34:	9903      	ldr	r1, [sp, #12]
 8004f36:	4680      	mov	r8, r0
 8004f38:	4648      	mov	r0, r9
 8004f3a:	f000 fb4f 	bl	80055dc <_Bfree>
 8004f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004f40:	1b1b      	subs	r3, r3, r4
 8004f42:	930a      	str	r3, [sp, #40]	@ 0x28
 8004f44:	f000 80b1 	beq.w	80050aa <_dtoa_r+0x8f2>
 8004f48:	4641      	mov	r1, r8
 8004f4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f4c:	4648      	mov	r0, r9
 8004f4e:	f000 fcb1 	bl	80058b4 <__pow5mult>
 8004f52:	9003      	str	r0, [sp, #12]
 8004f54:	2101      	movs	r1, #1
 8004f56:	4648      	mov	r0, r9
 8004f58:	f000 fbf4 	bl	8005744 <__i2b>
 8004f5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f5e:	4604      	mov	r4, r0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 81d8 	beq.w	8005316 <_dtoa_r+0xb5e>
 8004f66:	461a      	mov	r2, r3
 8004f68:	4601      	mov	r1, r0
 8004f6a:	4648      	mov	r0, r9
 8004f6c:	f000 fca2 	bl	80058b4 <__pow5mult>
 8004f70:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8004f72:	4604      	mov	r4, r0
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f300 809f 	bgt.w	80050b8 <_dtoa_r+0x900>
 8004f7a:	9b06      	ldr	r3, [sp, #24]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	f040 8097 	bne.w	80050b0 <_dtoa_r+0x8f8>
 8004f82:	9b07      	ldr	r3, [sp, #28]
 8004f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f040 8093 	bne.w	80050b4 <_dtoa_r+0x8fc>
 8004f8e:	9b07      	ldr	r3, [sp, #28]
 8004f90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f94:	0d1b      	lsrs	r3, r3, #20
 8004f96:	051b      	lsls	r3, r3, #20
 8004f98:	b133      	cbz	r3, 8004fa8 <_dtoa_r+0x7f0>
 8004f9a:	9b04      	ldr	r3, [sp, #16]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	9304      	str	r3, [sp, #16]
 8004fa0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	930a      	str	r3, [sp, #40]	@ 0x28
 8004faa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	f000 81b8 	beq.w	8005322 <_dtoa_r+0xb6a>
 8004fb2:	6923      	ldr	r3, [r4, #16]
 8004fb4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004fb8:	6918      	ldr	r0, [r3, #16]
 8004fba:	f000 fb77 	bl	80056ac <__hi0bits>
 8004fbe:	f1c0 0020 	rsb	r0, r0, #32
 8004fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc4:	4418      	add	r0, r3
 8004fc6:	f010 001f 	ands.w	r0, r0, #31
 8004fca:	f000 8082 	beq.w	80050d2 <_dtoa_r+0x91a>
 8004fce:	f1c0 0320 	rsb	r3, r0, #32
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	dd73      	ble.n	80050be <_dtoa_r+0x906>
 8004fd6:	9b04      	ldr	r3, [sp, #16]
 8004fd8:	f1c0 001c 	rsb	r0, r0, #28
 8004fdc:	4403      	add	r3, r0
 8004fde:	9304      	str	r3, [sp, #16]
 8004fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe2:	4406      	add	r6, r0
 8004fe4:	4403      	add	r3, r0
 8004fe6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fe8:	9b04      	ldr	r3, [sp, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dd05      	ble.n	8004ffa <_dtoa_r+0x842>
 8004fee:	461a      	mov	r2, r3
 8004ff0:	4648      	mov	r0, r9
 8004ff2:	9903      	ldr	r1, [sp, #12]
 8004ff4:	f000 fcb8 	bl	8005968 <__lshift>
 8004ff8:	9003      	str	r0, [sp, #12]
 8004ffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	dd05      	ble.n	800500c <_dtoa_r+0x854>
 8005000:	4621      	mov	r1, r4
 8005002:	461a      	mov	r2, r3
 8005004:	4648      	mov	r0, r9
 8005006:	f000 fcaf 	bl	8005968 <__lshift>
 800500a:	4604      	mov	r4, r0
 800500c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d061      	beq.n	80050d6 <_dtoa_r+0x91e>
 8005012:	4621      	mov	r1, r4
 8005014:	9803      	ldr	r0, [sp, #12]
 8005016:	f000 fd13 	bl	8005a40 <__mcmp>
 800501a:	2800      	cmp	r0, #0
 800501c:	da5b      	bge.n	80050d6 <_dtoa_r+0x91e>
 800501e:	2300      	movs	r3, #0
 8005020:	220a      	movs	r2, #10
 8005022:	4648      	mov	r0, r9
 8005024:	9903      	ldr	r1, [sp, #12]
 8005026:	f000 fafb 	bl	8005620 <__multadd>
 800502a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800502c:	f107 38ff 	add.w	r8, r7, #4294967295
 8005030:	9003      	str	r0, [sp, #12]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f000 8177 	beq.w	8005326 <_dtoa_r+0xb6e>
 8005038:	4629      	mov	r1, r5
 800503a:	2300      	movs	r3, #0
 800503c:	220a      	movs	r2, #10
 800503e:	4648      	mov	r0, r9
 8005040:	f000 faee 	bl	8005620 <__multadd>
 8005044:	f1bb 0f00 	cmp.w	fp, #0
 8005048:	4605      	mov	r5, r0
 800504a:	dc6f      	bgt.n	800512c <_dtoa_r+0x974>
 800504c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800504e:	2b02      	cmp	r3, #2
 8005050:	dc49      	bgt.n	80050e6 <_dtoa_r+0x92e>
 8005052:	e06b      	b.n	800512c <_dtoa_r+0x974>
 8005054:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005056:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800505a:	e73c      	b.n	8004ed6 <_dtoa_r+0x71e>
 800505c:	3fe00000 	.word	0x3fe00000
 8005060:	40240000 	.word	0x40240000
 8005064:	9b08      	ldr	r3, [sp, #32]
 8005066:	1e5c      	subs	r4, r3, #1
 8005068:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800506a:	42a3      	cmp	r3, r4
 800506c:	db09      	blt.n	8005082 <_dtoa_r+0x8ca>
 800506e:	1b1c      	subs	r4, r3, r4
 8005070:	9b08      	ldr	r3, [sp, #32]
 8005072:	2b00      	cmp	r3, #0
 8005074:	f6bf af30 	bge.w	8004ed8 <_dtoa_r+0x720>
 8005078:	9b04      	ldr	r3, [sp, #16]
 800507a:	9a08      	ldr	r2, [sp, #32]
 800507c:	1a9e      	subs	r6, r3, r2
 800507e:	2300      	movs	r3, #0
 8005080:	e72b      	b.n	8004eda <_dtoa_r+0x722>
 8005082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005084:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005086:	1ae3      	subs	r3, r4, r3
 8005088:	441a      	add	r2, r3
 800508a:	940a      	str	r4, [sp, #40]	@ 0x28
 800508c:	9e04      	ldr	r6, [sp, #16]
 800508e:	2400      	movs	r4, #0
 8005090:	9b08      	ldr	r3, [sp, #32]
 8005092:	920e      	str	r2, [sp, #56]	@ 0x38
 8005094:	e721      	b.n	8004eda <_dtoa_r+0x722>
 8005096:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005098:	9e04      	ldr	r6, [sp, #16]
 800509a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800509c:	e728      	b.n	8004ef0 <_dtoa_r+0x738>
 800509e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80050a2:	e751      	b.n	8004f48 <_dtoa_r+0x790>
 80050a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80050a6:	9903      	ldr	r1, [sp, #12]
 80050a8:	e750      	b.n	8004f4c <_dtoa_r+0x794>
 80050aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80050ae:	e751      	b.n	8004f54 <_dtoa_r+0x79c>
 80050b0:	2300      	movs	r3, #0
 80050b2:	e779      	b.n	8004fa8 <_dtoa_r+0x7f0>
 80050b4:	9b06      	ldr	r3, [sp, #24]
 80050b6:	e777      	b.n	8004fa8 <_dtoa_r+0x7f0>
 80050b8:	2300      	movs	r3, #0
 80050ba:	930a      	str	r3, [sp, #40]	@ 0x28
 80050bc:	e779      	b.n	8004fb2 <_dtoa_r+0x7fa>
 80050be:	d093      	beq.n	8004fe8 <_dtoa_r+0x830>
 80050c0:	9a04      	ldr	r2, [sp, #16]
 80050c2:	331c      	adds	r3, #28
 80050c4:	441a      	add	r2, r3
 80050c6:	9204      	str	r2, [sp, #16]
 80050c8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050ca:	441e      	add	r6, r3
 80050cc:	441a      	add	r2, r3
 80050ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80050d0:	e78a      	b.n	8004fe8 <_dtoa_r+0x830>
 80050d2:	4603      	mov	r3, r0
 80050d4:	e7f4      	b.n	80050c0 <_dtoa_r+0x908>
 80050d6:	9b08      	ldr	r3, [sp, #32]
 80050d8:	46b8      	mov	r8, r7
 80050da:	2b00      	cmp	r3, #0
 80050dc:	dc20      	bgt.n	8005120 <_dtoa_r+0x968>
 80050de:	469b      	mov	fp, r3
 80050e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	dd1e      	ble.n	8005124 <_dtoa_r+0x96c>
 80050e6:	f1bb 0f00 	cmp.w	fp, #0
 80050ea:	f47f adb1 	bne.w	8004c50 <_dtoa_r+0x498>
 80050ee:	4621      	mov	r1, r4
 80050f0:	465b      	mov	r3, fp
 80050f2:	2205      	movs	r2, #5
 80050f4:	4648      	mov	r0, r9
 80050f6:	f000 fa93 	bl	8005620 <__multadd>
 80050fa:	4601      	mov	r1, r0
 80050fc:	4604      	mov	r4, r0
 80050fe:	9803      	ldr	r0, [sp, #12]
 8005100:	f000 fc9e 	bl	8005a40 <__mcmp>
 8005104:	2800      	cmp	r0, #0
 8005106:	f77f ada3 	ble.w	8004c50 <_dtoa_r+0x498>
 800510a:	4656      	mov	r6, sl
 800510c:	2331      	movs	r3, #49	@ 0x31
 800510e:	f108 0801 	add.w	r8, r8, #1
 8005112:	f806 3b01 	strb.w	r3, [r6], #1
 8005116:	e59f      	b.n	8004c58 <_dtoa_r+0x4a0>
 8005118:	46b8      	mov	r8, r7
 800511a:	9c08      	ldr	r4, [sp, #32]
 800511c:	4625      	mov	r5, r4
 800511e:	e7f4      	b.n	800510a <_dtoa_r+0x952>
 8005120:	f8dd b020 	ldr.w	fp, [sp, #32]
 8005124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005126:	2b00      	cmp	r3, #0
 8005128:	f000 8101 	beq.w	800532e <_dtoa_r+0xb76>
 800512c:	2e00      	cmp	r6, #0
 800512e:	dd05      	ble.n	800513c <_dtoa_r+0x984>
 8005130:	4629      	mov	r1, r5
 8005132:	4632      	mov	r2, r6
 8005134:	4648      	mov	r0, r9
 8005136:	f000 fc17 	bl	8005968 <__lshift>
 800513a:	4605      	mov	r5, r0
 800513c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800513e:	2b00      	cmp	r3, #0
 8005140:	d05c      	beq.n	80051fc <_dtoa_r+0xa44>
 8005142:	4648      	mov	r0, r9
 8005144:	6869      	ldr	r1, [r5, #4]
 8005146:	f000 fa09 	bl	800555c <_Balloc>
 800514a:	4606      	mov	r6, r0
 800514c:	b928      	cbnz	r0, 800515a <_dtoa_r+0x9a2>
 800514e:	4602      	mov	r2, r0
 8005150:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005154:	4b80      	ldr	r3, [pc, #512]	@ (8005358 <_dtoa_r+0xba0>)
 8005156:	f7ff bb43 	b.w	80047e0 <_dtoa_r+0x28>
 800515a:	692a      	ldr	r2, [r5, #16]
 800515c:	f105 010c 	add.w	r1, r5, #12
 8005160:	3202      	adds	r2, #2
 8005162:	0092      	lsls	r2, r2, #2
 8005164:	300c      	adds	r0, #12
 8005166:	f000 ff9d 	bl	80060a4 <memcpy>
 800516a:	2201      	movs	r2, #1
 800516c:	4631      	mov	r1, r6
 800516e:	4648      	mov	r0, r9
 8005170:	f000 fbfa 	bl	8005968 <__lshift>
 8005174:	462f      	mov	r7, r5
 8005176:	4605      	mov	r5, r0
 8005178:	f10a 0301 	add.w	r3, sl, #1
 800517c:	9304      	str	r3, [sp, #16]
 800517e:	eb0a 030b 	add.w	r3, sl, fp
 8005182:	930a      	str	r3, [sp, #40]	@ 0x28
 8005184:	9b06      	ldr	r3, [sp, #24]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	9309      	str	r3, [sp, #36]	@ 0x24
 800518c:	9b04      	ldr	r3, [sp, #16]
 800518e:	4621      	mov	r1, r4
 8005190:	9803      	ldr	r0, [sp, #12]
 8005192:	f103 3bff 	add.w	fp, r3, #4294967295
 8005196:	f7ff fa86 	bl	80046a6 <quorem>
 800519a:	4603      	mov	r3, r0
 800519c:	4639      	mov	r1, r7
 800519e:	3330      	adds	r3, #48	@ 0x30
 80051a0:	9006      	str	r0, [sp, #24]
 80051a2:	9803      	ldr	r0, [sp, #12]
 80051a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80051a6:	f000 fc4b 	bl	8005a40 <__mcmp>
 80051aa:	462a      	mov	r2, r5
 80051ac:	9008      	str	r0, [sp, #32]
 80051ae:	4621      	mov	r1, r4
 80051b0:	4648      	mov	r0, r9
 80051b2:	f000 fc61 	bl	8005a78 <__mdiff>
 80051b6:	68c2      	ldr	r2, [r0, #12]
 80051b8:	4606      	mov	r6, r0
 80051ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051bc:	bb02      	cbnz	r2, 8005200 <_dtoa_r+0xa48>
 80051be:	4601      	mov	r1, r0
 80051c0:	9803      	ldr	r0, [sp, #12]
 80051c2:	f000 fc3d 	bl	8005a40 <__mcmp>
 80051c6:	4602      	mov	r2, r0
 80051c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051ca:	4631      	mov	r1, r6
 80051cc:	4648      	mov	r0, r9
 80051ce:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 80051d2:	f000 fa03 	bl	80055dc <_Bfree>
 80051d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80051d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80051da:	9e04      	ldr	r6, [sp, #16]
 80051dc:	ea42 0103 	orr.w	r1, r2, r3
 80051e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051e2:	4319      	orrs	r1, r3
 80051e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80051e6:	d10d      	bne.n	8005204 <_dtoa_r+0xa4c>
 80051e8:	2b39      	cmp	r3, #57	@ 0x39
 80051ea:	d027      	beq.n	800523c <_dtoa_r+0xa84>
 80051ec:	9a08      	ldr	r2, [sp, #32]
 80051ee:	2a00      	cmp	r2, #0
 80051f0:	dd01      	ble.n	80051f6 <_dtoa_r+0xa3e>
 80051f2:	9b06      	ldr	r3, [sp, #24]
 80051f4:	3331      	adds	r3, #49	@ 0x31
 80051f6:	f88b 3000 	strb.w	r3, [fp]
 80051fa:	e52e      	b.n	8004c5a <_dtoa_r+0x4a2>
 80051fc:	4628      	mov	r0, r5
 80051fe:	e7b9      	b.n	8005174 <_dtoa_r+0x9bc>
 8005200:	2201      	movs	r2, #1
 8005202:	e7e2      	b.n	80051ca <_dtoa_r+0xa12>
 8005204:	9908      	ldr	r1, [sp, #32]
 8005206:	2900      	cmp	r1, #0
 8005208:	db04      	blt.n	8005214 <_dtoa_r+0xa5c>
 800520a:	9820      	ldr	r0, [sp, #128]	@ 0x80
 800520c:	4301      	orrs	r1, r0
 800520e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005210:	4301      	orrs	r1, r0
 8005212:	d120      	bne.n	8005256 <_dtoa_r+0xa9e>
 8005214:	2a00      	cmp	r2, #0
 8005216:	ddee      	ble.n	80051f6 <_dtoa_r+0xa3e>
 8005218:	2201      	movs	r2, #1
 800521a:	9903      	ldr	r1, [sp, #12]
 800521c:	4648      	mov	r0, r9
 800521e:	9304      	str	r3, [sp, #16]
 8005220:	f000 fba2 	bl	8005968 <__lshift>
 8005224:	4621      	mov	r1, r4
 8005226:	9003      	str	r0, [sp, #12]
 8005228:	f000 fc0a 	bl	8005a40 <__mcmp>
 800522c:	2800      	cmp	r0, #0
 800522e:	9b04      	ldr	r3, [sp, #16]
 8005230:	dc02      	bgt.n	8005238 <_dtoa_r+0xa80>
 8005232:	d1e0      	bne.n	80051f6 <_dtoa_r+0xa3e>
 8005234:	07da      	lsls	r2, r3, #31
 8005236:	d5de      	bpl.n	80051f6 <_dtoa_r+0xa3e>
 8005238:	2b39      	cmp	r3, #57	@ 0x39
 800523a:	d1da      	bne.n	80051f2 <_dtoa_r+0xa3a>
 800523c:	2339      	movs	r3, #57	@ 0x39
 800523e:	f88b 3000 	strb.w	r3, [fp]
 8005242:	4633      	mov	r3, r6
 8005244:	461e      	mov	r6, r3
 8005246:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800524a:	3b01      	subs	r3, #1
 800524c:	2a39      	cmp	r2, #57	@ 0x39
 800524e:	d04e      	beq.n	80052ee <_dtoa_r+0xb36>
 8005250:	3201      	adds	r2, #1
 8005252:	701a      	strb	r2, [r3, #0]
 8005254:	e501      	b.n	8004c5a <_dtoa_r+0x4a2>
 8005256:	2a00      	cmp	r2, #0
 8005258:	dd03      	ble.n	8005262 <_dtoa_r+0xaaa>
 800525a:	2b39      	cmp	r3, #57	@ 0x39
 800525c:	d0ee      	beq.n	800523c <_dtoa_r+0xa84>
 800525e:	3301      	adds	r3, #1
 8005260:	e7c9      	b.n	80051f6 <_dtoa_r+0xa3e>
 8005262:	9a04      	ldr	r2, [sp, #16]
 8005264:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005266:	f802 3c01 	strb.w	r3, [r2, #-1]
 800526a:	428a      	cmp	r2, r1
 800526c:	d028      	beq.n	80052c0 <_dtoa_r+0xb08>
 800526e:	2300      	movs	r3, #0
 8005270:	220a      	movs	r2, #10
 8005272:	9903      	ldr	r1, [sp, #12]
 8005274:	4648      	mov	r0, r9
 8005276:	f000 f9d3 	bl	8005620 <__multadd>
 800527a:	42af      	cmp	r7, r5
 800527c:	9003      	str	r0, [sp, #12]
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	f04f 020a 	mov.w	r2, #10
 8005286:	4639      	mov	r1, r7
 8005288:	4648      	mov	r0, r9
 800528a:	d107      	bne.n	800529c <_dtoa_r+0xae4>
 800528c:	f000 f9c8 	bl	8005620 <__multadd>
 8005290:	4607      	mov	r7, r0
 8005292:	4605      	mov	r5, r0
 8005294:	9b04      	ldr	r3, [sp, #16]
 8005296:	3301      	adds	r3, #1
 8005298:	9304      	str	r3, [sp, #16]
 800529a:	e777      	b.n	800518c <_dtoa_r+0x9d4>
 800529c:	f000 f9c0 	bl	8005620 <__multadd>
 80052a0:	4629      	mov	r1, r5
 80052a2:	4607      	mov	r7, r0
 80052a4:	2300      	movs	r3, #0
 80052a6:	220a      	movs	r2, #10
 80052a8:	4648      	mov	r0, r9
 80052aa:	f000 f9b9 	bl	8005620 <__multadd>
 80052ae:	4605      	mov	r5, r0
 80052b0:	e7f0      	b.n	8005294 <_dtoa_r+0xadc>
 80052b2:	f1bb 0f00 	cmp.w	fp, #0
 80052b6:	bfcc      	ite	gt
 80052b8:	465e      	movgt	r6, fp
 80052ba:	2601      	movle	r6, #1
 80052bc:	2700      	movs	r7, #0
 80052be:	4456      	add	r6, sl
 80052c0:	2201      	movs	r2, #1
 80052c2:	9903      	ldr	r1, [sp, #12]
 80052c4:	4648      	mov	r0, r9
 80052c6:	9304      	str	r3, [sp, #16]
 80052c8:	f000 fb4e 	bl	8005968 <__lshift>
 80052cc:	4621      	mov	r1, r4
 80052ce:	9003      	str	r0, [sp, #12]
 80052d0:	f000 fbb6 	bl	8005a40 <__mcmp>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	dcb4      	bgt.n	8005242 <_dtoa_r+0xa8a>
 80052d8:	d102      	bne.n	80052e0 <_dtoa_r+0xb28>
 80052da:	9b04      	ldr	r3, [sp, #16]
 80052dc:	07db      	lsls	r3, r3, #31
 80052de:	d4b0      	bmi.n	8005242 <_dtoa_r+0xa8a>
 80052e0:	4633      	mov	r3, r6
 80052e2:	461e      	mov	r6, r3
 80052e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80052e8:	2a30      	cmp	r2, #48	@ 0x30
 80052ea:	d0fa      	beq.n	80052e2 <_dtoa_r+0xb2a>
 80052ec:	e4b5      	b.n	8004c5a <_dtoa_r+0x4a2>
 80052ee:	459a      	cmp	sl, r3
 80052f0:	d1a8      	bne.n	8005244 <_dtoa_r+0xa8c>
 80052f2:	2331      	movs	r3, #49	@ 0x31
 80052f4:	f108 0801 	add.w	r8, r8, #1
 80052f8:	f88a 3000 	strb.w	r3, [sl]
 80052fc:	e4ad      	b.n	8004c5a <_dtoa_r+0x4a2>
 80052fe:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005300:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800535c <_dtoa_r+0xba4>
 8005304:	b11b      	cbz	r3, 800530e <_dtoa_r+0xb56>
 8005306:	f10a 0308 	add.w	r3, sl, #8
 800530a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800530c:	6013      	str	r3, [r2, #0]
 800530e:	4650      	mov	r0, sl
 8005310:	b017      	add	sp, #92	@ 0x5c
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005318:	2b01      	cmp	r3, #1
 800531a:	f77f ae2e 	ble.w	8004f7a <_dtoa_r+0x7c2>
 800531e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005320:	930a      	str	r3, [sp, #40]	@ 0x28
 8005322:	2001      	movs	r0, #1
 8005324:	e64d      	b.n	8004fc2 <_dtoa_r+0x80a>
 8005326:	f1bb 0f00 	cmp.w	fp, #0
 800532a:	f77f aed9 	ble.w	80050e0 <_dtoa_r+0x928>
 800532e:	4656      	mov	r6, sl
 8005330:	4621      	mov	r1, r4
 8005332:	9803      	ldr	r0, [sp, #12]
 8005334:	f7ff f9b7 	bl	80046a6 <quorem>
 8005338:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800533c:	f806 3b01 	strb.w	r3, [r6], #1
 8005340:	eba6 020a 	sub.w	r2, r6, sl
 8005344:	4593      	cmp	fp, r2
 8005346:	ddb4      	ble.n	80052b2 <_dtoa_r+0xafa>
 8005348:	2300      	movs	r3, #0
 800534a:	220a      	movs	r2, #10
 800534c:	4648      	mov	r0, r9
 800534e:	9903      	ldr	r1, [sp, #12]
 8005350:	f000 f966 	bl	8005620 <__multadd>
 8005354:	9003      	str	r0, [sp, #12]
 8005356:	e7eb      	b.n	8005330 <_dtoa_r+0xb78>
 8005358:	0800686e 	.word	0x0800686e
 800535c:	080067f2 	.word	0x080067f2

08005360 <_free_r>:
 8005360:	b538      	push	{r3, r4, r5, lr}
 8005362:	4605      	mov	r5, r0
 8005364:	2900      	cmp	r1, #0
 8005366:	d040      	beq.n	80053ea <_free_r+0x8a>
 8005368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800536c:	1f0c      	subs	r4, r1, #4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bfb8      	it	lt
 8005372:	18e4      	addlt	r4, r4, r3
 8005374:	f000 f8e6 	bl	8005544 <__malloc_lock>
 8005378:	4a1c      	ldr	r2, [pc, #112]	@ (80053ec <_free_r+0x8c>)
 800537a:	6813      	ldr	r3, [r2, #0]
 800537c:	b933      	cbnz	r3, 800538c <_free_r+0x2c>
 800537e:	6063      	str	r3, [r4, #4]
 8005380:	6014      	str	r4, [r2, #0]
 8005382:	4628      	mov	r0, r5
 8005384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005388:	f000 b8e2 	b.w	8005550 <__malloc_unlock>
 800538c:	42a3      	cmp	r3, r4
 800538e:	d908      	bls.n	80053a2 <_free_r+0x42>
 8005390:	6820      	ldr	r0, [r4, #0]
 8005392:	1821      	adds	r1, r4, r0
 8005394:	428b      	cmp	r3, r1
 8005396:	bf01      	itttt	eq
 8005398:	6819      	ldreq	r1, [r3, #0]
 800539a:	685b      	ldreq	r3, [r3, #4]
 800539c:	1809      	addeq	r1, r1, r0
 800539e:	6021      	streq	r1, [r4, #0]
 80053a0:	e7ed      	b.n	800537e <_free_r+0x1e>
 80053a2:	461a      	mov	r2, r3
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	b10b      	cbz	r3, 80053ac <_free_r+0x4c>
 80053a8:	42a3      	cmp	r3, r4
 80053aa:	d9fa      	bls.n	80053a2 <_free_r+0x42>
 80053ac:	6811      	ldr	r1, [r2, #0]
 80053ae:	1850      	adds	r0, r2, r1
 80053b0:	42a0      	cmp	r0, r4
 80053b2:	d10b      	bne.n	80053cc <_free_r+0x6c>
 80053b4:	6820      	ldr	r0, [r4, #0]
 80053b6:	4401      	add	r1, r0
 80053b8:	1850      	adds	r0, r2, r1
 80053ba:	4283      	cmp	r3, r0
 80053bc:	6011      	str	r1, [r2, #0]
 80053be:	d1e0      	bne.n	8005382 <_free_r+0x22>
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4408      	add	r0, r1
 80053c6:	6010      	str	r0, [r2, #0]
 80053c8:	6053      	str	r3, [r2, #4]
 80053ca:	e7da      	b.n	8005382 <_free_r+0x22>
 80053cc:	d902      	bls.n	80053d4 <_free_r+0x74>
 80053ce:	230c      	movs	r3, #12
 80053d0:	602b      	str	r3, [r5, #0]
 80053d2:	e7d6      	b.n	8005382 <_free_r+0x22>
 80053d4:	6820      	ldr	r0, [r4, #0]
 80053d6:	1821      	adds	r1, r4, r0
 80053d8:	428b      	cmp	r3, r1
 80053da:	bf01      	itttt	eq
 80053dc:	6819      	ldreq	r1, [r3, #0]
 80053de:	685b      	ldreq	r3, [r3, #4]
 80053e0:	1809      	addeq	r1, r1, r0
 80053e2:	6021      	streq	r1, [r4, #0]
 80053e4:	6063      	str	r3, [r4, #4]
 80053e6:	6054      	str	r4, [r2, #4]
 80053e8:	e7cb      	b.n	8005382 <_free_r+0x22>
 80053ea:	bd38      	pop	{r3, r4, r5, pc}
 80053ec:	200003e0 	.word	0x200003e0

080053f0 <malloc>:
 80053f0:	4b02      	ldr	r3, [pc, #8]	@ (80053fc <malloc+0xc>)
 80053f2:	4601      	mov	r1, r0
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	f000 b825 	b.w	8005444 <_malloc_r>
 80053fa:	bf00      	nop
 80053fc:	2000001c 	.word	0x2000001c

08005400 <sbrk_aligned>:
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	4e0f      	ldr	r6, [pc, #60]	@ (8005440 <sbrk_aligned+0x40>)
 8005404:	460c      	mov	r4, r1
 8005406:	6831      	ldr	r1, [r6, #0]
 8005408:	4605      	mov	r5, r0
 800540a:	b911      	cbnz	r1, 8005412 <sbrk_aligned+0x12>
 800540c:	f000 fe3a 	bl	8006084 <_sbrk_r>
 8005410:	6030      	str	r0, [r6, #0]
 8005412:	4621      	mov	r1, r4
 8005414:	4628      	mov	r0, r5
 8005416:	f000 fe35 	bl	8006084 <_sbrk_r>
 800541a:	1c43      	adds	r3, r0, #1
 800541c:	d103      	bne.n	8005426 <sbrk_aligned+0x26>
 800541e:	f04f 34ff 	mov.w	r4, #4294967295
 8005422:	4620      	mov	r0, r4
 8005424:	bd70      	pop	{r4, r5, r6, pc}
 8005426:	1cc4      	adds	r4, r0, #3
 8005428:	f024 0403 	bic.w	r4, r4, #3
 800542c:	42a0      	cmp	r0, r4
 800542e:	d0f8      	beq.n	8005422 <sbrk_aligned+0x22>
 8005430:	1a21      	subs	r1, r4, r0
 8005432:	4628      	mov	r0, r5
 8005434:	f000 fe26 	bl	8006084 <_sbrk_r>
 8005438:	3001      	adds	r0, #1
 800543a:	d1f2      	bne.n	8005422 <sbrk_aligned+0x22>
 800543c:	e7ef      	b.n	800541e <sbrk_aligned+0x1e>
 800543e:	bf00      	nop
 8005440:	200003dc 	.word	0x200003dc

08005444 <_malloc_r>:
 8005444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005448:	1ccd      	adds	r5, r1, #3
 800544a:	f025 0503 	bic.w	r5, r5, #3
 800544e:	3508      	adds	r5, #8
 8005450:	2d0c      	cmp	r5, #12
 8005452:	bf38      	it	cc
 8005454:	250c      	movcc	r5, #12
 8005456:	2d00      	cmp	r5, #0
 8005458:	4606      	mov	r6, r0
 800545a:	db01      	blt.n	8005460 <_malloc_r+0x1c>
 800545c:	42a9      	cmp	r1, r5
 800545e:	d904      	bls.n	800546a <_malloc_r+0x26>
 8005460:	230c      	movs	r3, #12
 8005462:	6033      	str	r3, [r6, #0]
 8005464:	2000      	movs	r0, #0
 8005466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800546a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005540 <_malloc_r+0xfc>
 800546e:	f000 f869 	bl	8005544 <__malloc_lock>
 8005472:	f8d8 3000 	ldr.w	r3, [r8]
 8005476:	461c      	mov	r4, r3
 8005478:	bb44      	cbnz	r4, 80054cc <_malloc_r+0x88>
 800547a:	4629      	mov	r1, r5
 800547c:	4630      	mov	r0, r6
 800547e:	f7ff ffbf 	bl	8005400 <sbrk_aligned>
 8005482:	1c43      	adds	r3, r0, #1
 8005484:	4604      	mov	r4, r0
 8005486:	d158      	bne.n	800553a <_malloc_r+0xf6>
 8005488:	f8d8 4000 	ldr.w	r4, [r8]
 800548c:	4627      	mov	r7, r4
 800548e:	2f00      	cmp	r7, #0
 8005490:	d143      	bne.n	800551a <_malloc_r+0xd6>
 8005492:	2c00      	cmp	r4, #0
 8005494:	d04b      	beq.n	800552e <_malloc_r+0xea>
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	4639      	mov	r1, r7
 800549a:	4630      	mov	r0, r6
 800549c:	eb04 0903 	add.w	r9, r4, r3
 80054a0:	f000 fdf0 	bl	8006084 <_sbrk_r>
 80054a4:	4581      	cmp	r9, r0
 80054a6:	d142      	bne.n	800552e <_malloc_r+0xea>
 80054a8:	6821      	ldr	r1, [r4, #0]
 80054aa:	4630      	mov	r0, r6
 80054ac:	1a6d      	subs	r5, r5, r1
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7ff ffa6 	bl	8005400 <sbrk_aligned>
 80054b4:	3001      	adds	r0, #1
 80054b6:	d03a      	beq.n	800552e <_malloc_r+0xea>
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	442b      	add	r3, r5
 80054bc:	6023      	str	r3, [r4, #0]
 80054be:	f8d8 3000 	ldr.w	r3, [r8]
 80054c2:	685a      	ldr	r2, [r3, #4]
 80054c4:	bb62      	cbnz	r2, 8005520 <_malloc_r+0xdc>
 80054c6:	f8c8 7000 	str.w	r7, [r8]
 80054ca:	e00f      	b.n	80054ec <_malloc_r+0xa8>
 80054cc:	6822      	ldr	r2, [r4, #0]
 80054ce:	1b52      	subs	r2, r2, r5
 80054d0:	d420      	bmi.n	8005514 <_malloc_r+0xd0>
 80054d2:	2a0b      	cmp	r2, #11
 80054d4:	d917      	bls.n	8005506 <_malloc_r+0xc2>
 80054d6:	1961      	adds	r1, r4, r5
 80054d8:	42a3      	cmp	r3, r4
 80054da:	6025      	str	r5, [r4, #0]
 80054dc:	bf18      	it	ne
 80054de:	6059      	strne	r1, [r3, #4]
 80054e0:	6863      	ldr	r3, [r4, #4]
 80054e2:	bf08      	it	eq
 80054e4:	f8c8 1000 	streq.w	r1, [r8]
 80054e8:	5162      	str	r2, [r4, r5]
 80054ea:	604b      	str	r3, [r1, #4]
 80054ec:	4630      	mov	r0, r6
 80054ee:	f000 f82f 	bl	8005550 <__malloc_unlock>
 80054f2:	f104 000b 	add.w	r0, r4, #11
 80054f6:	1d23      	adds	r3, r4, #4
 80054f8:	f020 0007 	bic.w	r0, r0, #7
 80054fc:	1ac2      	subs	r2, r0, r3
 80054fe:	bf1c      	itt	ne
 8005500:	1a1b      	subne	r3, r3, r0
 8005502:	50a3      	strne	r3, [r4, r2]
 8005504:	e7af      	b.n	8005466 <_malloc_r+0x22>
 8005506:	6862      	ldr	r2, [r4, #4]
 8005508:	42a3      	cmp	r3, r4
 800550a:	bf0c      	ite	eq
 800550c:	f8c8 2000 	streq.w	r2, [r8]
 8005510:	605a      	strne	r2, [r3, #4]
 8005512:	e7eb      	b.n	80054ec <_malloc_r+0xa8>
 8005514:	4623      	mov	r3, r4
 8005516:	6864      	ldr	r4, [r4, #4]
 8005518:	e7ae      	b.n	8005478 <_malloc_r+0x34>
 800551a:	463c      	mov	r4, r7
 800551c:	687f      	ldr	r7, [r7, #4]
 800551e:	e7b6      	b.n	800548e <_malloc_r+0x4a>
 8005520:	461a      	mov	r2, r3
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	42a3      	cmp	r3, r4
 8005526:	d1fb      	bne.n	8005520 <_malloc_r+0xdc>
 8005528:	2300      	movs	r3, #0
 800552a:	6053      	str	r3, [r2, #4]
 800552c:	e7de      	b.n	80054ec <_malloc_r+0xa8>
 800552e:	230c      	movs	r3, #12
 8005530:	4630      	mov	r0, r6
 8005532:	6033      	str	r3, [r6, #0]
 8005534:	f000 f80c 	bl	8005550 <__malloc_unlock>
 8005538:	e794      	b.n	8005464 <_malloc_r+0x20>
 800553a:	6005      	str	r5, [r0, #0]
 800553c:	e7d6      	b.n	80054ec <_malloc_r+0xa8>
 800553e:	bf00      	nop
 8005540:	200003e0 	.word	0x200003e0

08005544 <__malloc_lock>:
 8005544:	4801      	ldr	r0, [pc, #4]	@ (800554c <__malloc_lock+0x8>)
 8005546:	f7ff b89e 	b.w	8004686 <__retarget_lock_acquire_recursive>
 800554a:	bf00      	nop
 800554c:	200003d8 	.word	0x200003d8

08005550 <__malloc_unlock>:
 8005550:	4801      	ldr	r0, [pc, #4]	@ (8005558 <__malloc_unlock+0x8>)
 8005552:	f7ff b899 	b.w	8004688 <__retarget_lock_release_recursive>
 8005556:	bf00      	nop
 8005558:	200003d8 	.word	0x200003d8

0800555c <_Balloc>:
 800555c:	b570      	push	{r4, r5, r6, lr}
 800555e:	69c6      	ldr	r6, [r0, #28]
 8005560:	4604      	mov	r4, r0
 8005562:	460d      	mov	r5, r1
 8005564:	b976      	cbnz	r6, 8005584 <_Balloc+0x28>
 8005566:	2010      	movs	r0, #16
 8005568:	f7ff ff42 	bl	80053f0 <malloc>
 800556c:	4602      	mov	r2, r0
 800556e:	61e0      	str	r0, [r4, #28]
 8005570:	b920      	cbnz	r0, 800557c <_Balloc+0x20>
 8005572:	216b      	movs	r1, #107	@ 0x6b
 8005574:	4b17      	ldr	r3, [pc, #92]	@ (80055d4 <_Balloc+0x78>)
 8005576:	4818      	ldr	r0, [pc, #96]	@ (80055d8 <_Balloc+0x7c>)
 8005578:	f000 fda2 	bl	80060c0 <__assert_func>
 800557c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005580:	6006      	str	r6, [r0, #0]
 8005582:	60c6      	str	r6, [r0, #12]
 8005584:	69e6      	ldr	r6, [r4, #28]
 8005586:	68f3      	ldr	r3, [r6, #12]
 8005588:	b183      	cbz	r3, 80055ac <_Balloc+0x50>
 800558a:	69e3      	ldr	r3, [r4, #28]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005592:	b9b8      	cbnz	r0, 80055c4 <_Balloc+0x68>
 8005594:	2101      	movs	r1, #1
 8005596:	fa01 f605 	lsl.w	r6, r1, r5
 800559a:	1d72      	adds	r2, r6, #5
 800559c:	4620      	mov	r0, r4
 800559e:	0092      	lsls	r2, r2, #2
 80055a0:	f000 fdac 	bl	80060fc <_calloc_r>
 80055a4:	b160      	cbz	r0, 80055c0 <_Balloc+0x64>
 80055a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80055aa:	e00e      	b.n	80055ca <_Balloc+0x6e>
 80055ac:	2221      	movs	r2, #33	@ 0x21
 80055ae:	2104      	movs	r1, #4
 80055b0:	4620      	mov	r0, r4
 80055b2:	f000 fda3 	bl	80060fc <_calloc_r>
 80055b6:	69e3      	ldr	r3, [r4, #28]
 80055b8:	60f0      	str	r0, [r6, #12]
 80055ba:	68db      	ldr	r3, [r3, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e4      	bne.n	800558a <_Balloc+0x2e>
 80055c0:	2000      	movs	r0, #0
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	6802      	ldr	r2, [r0, #0]
 80055c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80055ca:	2300      	movs	r3, #0
 80055cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80055d0:	e7f7      	b.n	80055c2 <_Balloc+0x66>
 80055d2:	bf00      	nop
 80055d4:	080067ff 	.word	0x080067ff
 80055d8:	0800687f 	.word	0x0800687f

080055dc <_Bfree>:
 80055dc:	b570      	push	{r4, r5, r6, lr}
 80055de:	69c6      	ldr	r6, [r0, #28]
 80055e0:	4605      	mov	r5, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	b976      	cbnz	r6, 8005604 <_Bfree+0x28>
 80055e6:	2010      	movs	r0, #16
 80055e8:	f7ff ff02 	bl	80053f0 <malloc>
 80055ec:	4602      	mov	r2, r0
 80055ee:	61e8      	str	r0, [r5, #28]
 80055f0:	b920      	cbnz	r0, 80055fc <_Bfree+0x20>
 80055f2:	218f      	movs	r1, #143	@ 0x8f
 80055f4:	4b08      	ldr	r3, [pc, #32]	@ (8005618 <_Bfree+0x3c>)
 80055f6:	4809      	ldr	r0, [pc, #36]	@ (800561c <_Bfree+0x40>)
 80055f8:	f000 fd62 	bl	80060c0 <__assert_func>
 80055fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005600:	6006      	str	r6, [r0, #0]
 8005602:	60c6      	str	r6, [r0, #12]
 8005604:	b13c      	cbz	r4, 8005616 <_Bfree+0x3a>
 8005606:	69eb      	ldr	r3, [r5, #28]
 8005608:	6862      	ldr	r2, [r4, #4]
 800560a:	68db      	ldr	r3, [r3, #12]
 800560c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005610:	6021      	str	r1, [r4, #0]
 8005612:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005616:	bd70      	pop	{r4, r5, r6, pc}
 8005618:	080067ff 	.word	0x080067ff
 800561c:	0800687f 	.word	0x0800687f

08005620 <__multadd>:
 8005620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005624:	4607      	mov	r7, r0
 8005626:	460c      	mov	r4, r1
 8005628:	461e      	mov	r6, r3
 800562a:	2000      	movs	r0, #0
 800562c:	690d      	ldr	r5, [r1, #16]
 800562e:	f101 0c14 	add.w	ip, r1, #20
 8005632:	f8dc 3000 	ldr.w	r3, [ip]
 8005636:	3001      	adds	r0, #1
 8005638:	b299      	uxth	r1, r3
 800563a:	fb02 6101 	mla	r1, r2, r1, r6
 800563e:	0c1e      	lsrs	r6, r3, #16
 8005640:	0c0b      	lsrs	r3, r1, #16
 8005642:	fb02 3306 	mla	r3, r2, r6, r3
 8005646:	b289      	uxth	r1, r1
 8005648:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800564c:	4285      	cmp	r5, r0
 800564e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005652:	f84c 1b04 	str.w	r1, [ip], #4
 8005656:	dcec      	bgt.n	8005632 <__multadd+0x12>
 8005658:	b30e      	cbz	r6, 800569e <__multadd+0x7e>
 800565a:	68a3      	ldr	r3, [r4, #8]
 800565c:	42ab      	cmp	r3, r5
 800565e:	dc19      	bgt.n	8005694 <__multadd+0x74>
 8005660:	6861      	ldr	r1, [r4, #4]
 8005662:	4638      	mov	r0, r7
 8005664:	3101      	adds	r1, #1
 8005666:	f7ff ff79 	bl	800555c <_Balloc>
 800566a:	4680      	mov	r8, r0
 800566c:	b928      	cbnz	r0, 800567a <__multadd+0x5a>
 800566e:	4602      	mov	r2, r0
 8005670:	21ba      	movs	r1, #186	@ 0xba
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <__multadd+0x84>)
 8005674:	480c      	ldr	r0, [pc, #48]	@ (80056a8 <__multadd+0x88>)
 8005676:	f000 fd23 	bl	80060c0 <__assert_func>
 800567a:	6922      	ldr	r2, [r4, #16]
 800567c:	f104 010c 	add.w	r1, r4, #12
 8005680:	3202      	adds	r2, #2
 8005682:	0092      	lsls	r2, r2, #2
 8005684:	300c      	adds	r0, #12
 8005686:	f000 fd0d 	bl	80060a4 <memcpy>
 800568a:	4621      	mov	r1, r4
 800568c:	4638      	mov	r0, r7
 800568e:	f7ff ffa5 	bl	80055dc <_Bfree>
 8005692:	4644      	mov	r4, r8
 8005694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005698:	3501      	adds	r5, #1
 800569a:	615e      	str	r6, [r3, #20]
 800569c:	6125      	str	r5, [r4, #16]
 800569e:	4620      	mov	r0, r4
 80056a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a4:	0800686e 	.word	0x0800686e
 80056a8:	0800687f 	.word	0x0800687f

080056ac <__hi0bits>:
 80056ac:	4603      	mov	r3, r0
 80056ae:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80056b2:	bf3a      	itte	cc
 80056b4:	0403      	lslcc	r3, r0, #16
 80056b6:	2010      	movcc	r0, #16
 80056b8:	2000      	movcs	r0, #0
 80056ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80056be:	bf3c      	itt	cc
 80056c0:	021b      	lslcc	r3, r3, #8
 80056c2:	3008      	addcc	r0, #8
 80056c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056c8:	bf3c      	itt	cc
 80056ca:	011b      	lslcc	r3, r3, #4
 80056cc:	3004      	addcc	r0, #4
 80056ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056d2:	bf3c      	itt	cc
 80056d4:	009b      	lslcc	r3, r3, #2
 80056d6:	3002      	addcc	r0, #2
 80056d8:	2b00      	cmp	r3, #0
 80056da:	db05      	blt.n	80056e8 <__hi0bits+0x3c>
 80056dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80056e0:	f100 0001 	add.w	r0, r0, #1
 80056e4:	bf08      	it	eq
 80056e6:	2020      	moveq	r0, #32
 80056e8:	4770      	bx	lr

080056ea <__lo0bits>:
 80056ea:	6803      	ldr	r3, [r0, #0]
 80056ec:	4602      	mov	r2, r0
 80056ee:	f013 0007 	ands.w	r0, r3, #7
 80056f2:	d00b      	beq.n	800570c <__lo0bits+0x22>
 80056f4:	07d9      	lsls	r1, r3, #31
 80056f6:	d421      	bmi.n	800573c <__lo0bits+0x52>
 80056f8:	0798      	lsls	r0, r3, #30
 80056fa:	bf49      	itett	mi
 80056fc:	085b      	lsrmi	r3, r3, #1
 80056fe:	089b      	lsrpl	r3, r3, #2
 8005700:	2001      	movmi	r0, #1
 8005702:	6013      	strmi	r3, [r2, #0]
 8005704:	bf5c      	itt	pl
 8005706:	2002      	movpl	r0, #2
 8005708:	6013      	strpl	r3, [r2, #0]
 800570a:	4770      	bx	lr
 800570c:	b299      	uxth	r1, r3
 800570e:	b909      	cbnz	r1, 8005714 <__lo0bits+0x2a>
 8005710:	2010      	movs	r0, #16
 8005712:	0c1b      	lsrs	r3, r3, #16
 8005714:	b2d9      	uxtb	r1, r3
 8005716:	b909      	cbnz	r1, 800571c <__lo0bits+0x32>
 8005718:	3008      	adds	r0, #8
 800571a:	0a1b      	lsrs	r3, r3, #8
 800571c:	0719      	lsls	r1, r3, #28
 800571e:	bf04      	itt	eq
 8005720:	091b      	lsreq	r3, r3, #4
 8005722:	3004      	addeq	r0, #4
 8005724:	0799      	lsls	r1, r3, #30
 8005726:	bf04      	itt	eq
 8005728:	089b      	lsreq	r3, r3, #2
 800572a:	3002      	addeq	r0, #2
 800572c:	07d9      	lsls	r1, r3, #31
 800572e:	d403      	bmi.n	8005738 <__lo0bits+0x4e>
 8005730:	085b      	lsrs	r3, r3, #1
 8005732:	f100 0001 	add.w	r0, r0, #1
 8005736:	d003      	beq.n	8005740 <__lo0bits+0x56>
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	4770      	bx	lr
 800573c:	2000      	movs	r0, #0
 800573e:	4770      	bx	lr
 8005740:	2020      	movs	r0, #32
 8005742:	4770      	bx	lr

08005744 <__i2b>:
 8005744:	b510      	push	{r4, lr}
 8005746:	460c      	mov	r4, r1
 8005748:	2101      	movs	r1, #1
 800574a:	f7ff ff07 	bl	800555c <_Balloc>
 800574e:	4602      	mov	r2, r0
 8005750:	b928      	cbnz	r0, 800575e <__i2b+0x1a>
 8005752:	f240 1145 	movw	r1, #325	@ 0x145
 8005756:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <__i2b+0x24>)
 8005758:	4804      	ldr	r0, [pc, #16]	@ (800576c <__i2b+0x28>)
 800575a:	f000 fcb1 	bl	80060c0 <__assert_func>
 800575e:	2301      	movs	r3, #1
 8005760:	6144      	str	r4, [r0, #20]
 8005762:	6103      	str	r3, [r0, #16]
 8005764:	bd10      	pop	{r4, pc}
 8005766:	bf00      	nop
 8005768:	0800686e 	.word	0x0800686e
 800576c:	0800687f 	.word	0x0800687f

08005770 <__multiply>:
 8005770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005774:	4617      	mov	r7, r2
 8005776:	690a      	ldr	r2, [r1, #16]
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4689      	mov	r9, r1
 800577c:	429a      	cmp	r2, r3
 800577e:	bfa2      	ittt	ge
 8005780:	463b      	movge	r3, r7
 8005782:	460f      	movge	r7, r1
 8005784:	4699      	movge	r9, r3
 8005786:	693d      	ldr	r5, [r7, #16]
 8005788:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	eb05 060a 	add.w	r6, r5, sl
 8005794:	42b3      	cmp	r3, r6
 8005796:	b085      	sub	sp, #20
 8005798:	bfb8      	it	lt
 800579a:	3101      	addlt	r1, #1
 800579c:	f7ff fede 	bl	800555c <_Balloc>
 80057a0:	b930      	cbnz	r0, 80057b0 <__multiply+0x40>
 80057a2:	4602      	mov	r2, r0
 80057a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80057a8:	4b40      	ldr	r3, [pc, #256]	@ (80058ac <__multiply+0x13c>)
 80057aa:	4841      	ldr	r0, [pc, #260]	@ (80058b0 <__multiply+0x140>)
 80057ac:	f000 fc88 	bl	80060c0 <__assert_func>
 80057b0:	f100 0414 	add.w	r4, r0, #20
 80057b4:	4623      	mov	r3, r4
 80057b6:	2200      	movs	r2, #0
 80057b8:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80057bc:	4573      	cmp	r3, lr
 80057be:	d320      	bcc.n	8005802 <__multiply+0x92>
 80057c0:	f107 0814 	add.w	r8, r7, #20
 80057c4:	f109 0114 	add.w	r1, r9, #20
 80057c8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80057cc:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80057d0:	9302      	str	r3, [sp, #8]
 80057d2:	1beb      	subs	r3, r5, r7
 80057d4:	3b15      	subs	r3, #21
 80057d6:	f023 0303 	bic.w	r3, r3, #3
 80057da:	3304      	adds	r3, #4
 80057dc:	3715      	adds	r7, #21
 80057de:	42bd      	cmp	r5, r7
 80057e0:	bf38      	it	cc
 80057e2:	2304      	movcc	r3, #4
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	9b02      	ldr	r3, [sp, #8]
 80057e8:	9103      	str	r1, [sp, #12]
 80057ea:	428b      	cmp	r3, r1
 80057ec:	d80c      	bhi.n	8005808 <__multiply+0x98>
 80057ee:	2e00      	cmp	r6, #0
 80057f0:	dd03      	ble.n	80057fa <__multiply+0x8a>
 80057f2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d055      	beq.n	80058a6 <__multiply+0x136>
 80057fa:	6106      	str	r6, [r0, #16]
 80057fc:	b005      	add	sp, #20
 80057fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005802:	f843 2b04 	str.w	r2, [r3], #4
 8005806:	e7d9      	b.n	80057bc <__multiply+0x4c>
 8005808:	f8b1 a000 	ldrh.w	sl, [r1]
 800580c:	f1ba 0f00 	cmp.w	sl, #0
 8005810:	d01f      	beq.n	8005852 <__multiply+0xe2>
 8005812:	46c4      	mov	ip, r8
 8005814:	46a1      	mov	r9, r4
 8005816:	2700      	movs	r7, #0
 8005818:	f85c 2b04 	ldr.w	r2, [ip], #4
 800581c:	f8d9 3000 	ldr.w	r3, [r9]
 8005820:	fa1f fb82 	uxth.w	fp, r2
 8005824:	b29b      	uxth	r3, r3
 8005826:	fb0a 330b 	mla	r3, sl, fp, r3
 800582a:	443b      	add	r3, r7
 800582c:	f8d9 7000 	ldr.w	r7, [r9]
 8005830:	0c12      	lsrs	r2, r2, #16
 8005832:	0c3f      	lsrs	r7, r7, #16
 8005834:	fb0a 7202 	mla	r2, sl, r2, r7
 8005838:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800583c:	b29b      	uxth	r3, r3
 800583e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005842:	4565      	cmp	r5, ip
 8005844:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005848:	f849 3b04 	str.w	r3, [r9], #4
 800584c:	d8e4      	bhi.n	8005818 <__multiply+0xa8>
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	50e7      	str	r7, [r4, r3]
 8005852:	9b03      	ldr	r3, [sp, #12]
 8005854:	3104      	adds	r1, #4
 8005856:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800585a:	f1b9 0f00 	cmp.w	r9, #0
 800585e:	d020      	beq.n	80058a2 <__multiply+0x132>
 8005860:	4647      	mov	r7, r8
 8005862:	46a4      	mov	ip, r4
 8005864:	f04f 0a00 	mov.w	sl, #0
 8005868:	6823      	ldr	r3, [r4, #0]
 800586a:	f8b7 b000 	ldrh.w	fp, [r7]
 800586e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005872:	b29b      	uxth	r3, r3
 8005874:	fb09 220b 	mla	r2, r9, fp, r2
 8005878:	4452      	add	r2, sl
 800587a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800587e:	f84c 3b04 	str.w	r3, [ip], #4
 8005882:	f857 3b04 	ldr.w	r3, [r7], #4
 8005886:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800588a:	f8bc 3000 	ldrh.w	r3, [ip]
 800588e:	42bd      	cmp	r5, r7
 8005890:	fb09 330a 	mla	r3, r9, sl, r3
 8005894:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005898:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800589c:	d8e5      	bhi.n	800586a <__multiply+0xfa>
 800589e:	9a01      	ldr	r2, [sp, #4]
 80058a0:	50a3      	str	r3, [r4, r2]
 80058a2:	3404      	adds	r4, #4
 80058a4:	e79f      	b.n	80057e6 <__multiply+0x76>
 80058a6:	3e01      	subs	r6, #1
 80058a8:	e7a1      	b.n	80057ee <__multiply+0x7e>
 80058aa:	bf00      	nop
 80058ac:	0800686e 	.word	0x0800686e
 80058b0:	0800687f 	.word	0x0800687f

080058b4 <__pow5mult>:
 80058b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b8:	4615      	mov	r5, r2
 80058ba:	f012 0203 	ands.w	r2, r2, #3
 80058be:	4607      	mov	r7, r0
 80058c0:	460e      	mov	r6, r1
 80058c2:	d007      	beq.n	80058d4 <__pow5mult+0x20>
 80058c4:	4c25      	ldr	r4, [pc, #148]	@ (800595c <__pow5mult+0xa8>)
 80058c6:	3a01      	subs	r2, #1
 80058c8:	2300      	movs	r3, #0
 80058ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80058ce:	f7ff fea7 	bl	8005620 <__multadd>
 80058d2:	4606      	mov	r6, r0
 80058d4:	10ad      	asrs	r5, r5, #2
 80058d6:	d03d      	beq.n	8005954 <__pow5mult+0xa0>
 80058d8:	69fc      	ldr	r4, [r7, #28]
 80058da:	b97c      	cbnz	r4, 80058fc <__pow5mult+0x48>
 80058dc:	2010      	movs	r0, #16
 80058de:	f7ff fd87 	bl	80053f0 <malloc>
 80058e2:	4602      	mov	r2, r0
 80058e4:	61f8      	str	r0, [r7, #28]
 80058e6:	b928      	cbnz	r0, 80058f4 <__pow5mult+0x40>
 80058e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80058ec:	4b1c      	ldr	r3, [pc, #112]	@ (8005960 <__pow5mult+0xac>)
 80058ee:	481d      	ldr	r0, [pc, #116]	@ (8005964 <__pow5mult+0xb0>)
 80058f0:	f000 fbe6 	bl	80060c0 <__assert_func>
 80058f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80058f8:	6004      	str	r4, [r0, #0]
 80058fa:	60c4      	str	r4, [r0, #12]
 80058fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005900:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005904:	b94c      	cbnz	r4, 800591a <__pow5mult+0x66>
 8005906:	f240 2171 	movw	r1, #625	@ 0x271
 800590a:	4638      	mov	r0, r7
 800590c:	f7ff ff1a 	bl	8005744 <__i2b>
 8005910:	2300      	movs	r3, #0
 8005912:	4604      	mov	r4, r0
 8005914:	f8c8 0008 	str.w	r0, [r8, #8]
 8005918:	6003      	str	r3, [r0, #0]
 800591a:	f04f 0900 	mov.w	r9, #0
 800591e:	07eb      	lsls	r3, r5, #31
 8005920:	d50a      	bpl.n	8005938 <__pow5mult+0x84>
 8005922:	4631      	mov	r1, r6
 8005924:	4622      	mov	r2, r4
 8005926:	4638      	mov	r0, r7
 8005928:	f7ff ff22 	bl	8005770 <__multiply>
 800592c:	4680      	mov	r8, r0
 800592e:	4631      	mov	r1, r6
 8005930:	4638      	mov	r0, r7
 8005932:	f7ff fe53 	bl	80055dc <_Bfree>
 8005936:	4646      	mov	r6, r8
 8005938:	106d      	asrs	r5, r5, #1
 800593a:	d00b      	beq.n	8005954 <__pow5mult+0xa0>
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	b938      	cbnz	r0, 8005950 <__pow5mult+0x9c>
 8005940:	4622      	mov	r2, r4
 8005942:	4621      	mov	r1, r4
 8005944:	4638      	mov	r0, r7
 8005946:	f7ff ff13 	bl	8005770 <__multiply>
 800594a:	6020      	str	r0, [r4, #0]
 800594c:	f8c0 9000 	str.w	r9, [r0]
 8005950:	4604      	mov	r4, r0
 8005952:	e7e4      	b.n	800591e <__pow5mult+0x6a>
 8005954:	4630      	mov	r0, r6
 8005956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800595a:	bf00      	nop
 800595c:	08006930 	.word	0x08006930
 8005960:	080067ff 	.word	0x080067ff
 8005964:	0800687f 	.word	0x0800687f

08005968 <__lshift>:
 8005968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800596c:	460c      	mov	r4, r1
 800596e:	4607      	mov	r7, r0
 8005970:	4691      	mov	r9, r2
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	6849      	ldr	r1, [r1, #4]
 8005976:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800597a:	68a3      	ldr	r3, [r4, #8]
 800597c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005980:	f108 0601 	add.w	r6, r8, #1
 8005984:	42b3      	cmp	r3, r6
 8005986:	db0b      	blt.n	80059a0 <__lshift+0x38>
 8005988:	4638      	mov	r0, r7
 800598a:	f7ff fde7 	bl	800555c <_Balloc>
 800598e:	4605      	mov	r5, r0
 8005990:	b948      	cbnz	r0, 80059a6 <__lshift+0x3e>
 8005992:	4602      	mov	r2, r0
 8005994:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005998:	4b27      	ldr	r3, [pc, #156]	@ (8005a38 <__lshift+0xd0>)
 800599a:	4828      	ldr	r0, [pc, #160]	@ (8005a3c <__lshift+0xd4>)
 800599c:	f000 fb90 	bl	80060c0 <__assert_func>
 80059a0:	3101      	adds	r1, #1
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	e7ee      	b.n	8005984 <__lshift+0x1c>
 80059a6:	2300      	movs	r3, #0
 80059a8:	f100 0114 	add.w	r1, r0, #20
 80059ac:	f100 0210 	add.w	r2, r0, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	4553      	cmp	r3, sl
 80059b4:	db33      	blt.n	8005a1e <__lshift+0xb6>
 80059b6:	6920      	ldr	r0, [r4, #16]
 80059b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80059bc:	f104 0314 	add.w	r3, r4, #20
 80059c0:	f019 091f 	ands.w	r9, r9, #31
 80059c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80059c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80059cc:	d02b      	beq.n	8005a26 <__lshift+0xbe>
 80059ce:	468a      	mov	sl, r1
 80059d0:	2200      	movs	r2, #0
 80059d2:	f1c9 0e20 	rsb	lr, r9, #32
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	fa00 f009 	lsl.w	r0, r0, r9
 80059dc:	4310      	orrs	r0, r2
 80059de:	f84a 0b04 	str.w	r0, [sl], #4
 80059e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80059e6:	459c      	cmp	ip, r3
 80059e8:	fa22 f20e 	lsr.w	r2, r2, lr
 80059ec:	d8f3      	bhi.n	80059d6 <__lshift+0x6e>
 80059ee:	ebac 0304 	sub.w	r3, ip, r4
 80059f2:	3b15      	subs	r3, #21
 80059f4:	f023 0303 	bic.w	r3, r3, #3
 80059f8:	3304      	adds	r3, #4
 80059fa:	f104 0015 	add.w	r0, r4, #21
 80059fe:	4560      	cmp	r0, ip
 8005a00:	bf88      	it	hi
 8005a02:	2304      	movhi	r3, #4
 8005a04:	50ca      	str	r2, [r1, r3]
 8005a06:	b10a      	cbz	r2, 8005a0c <__lshift+0xa4>
 8005a08:	f108 0602 	add.w	r6, r8, #2
 8005a0c:	3e01      	subs	r6, #1
 8005a0e:	4638      	mov	r0, r7
 8005a10:	4621      	mov	r1, r4
 8005a12:	612e      	str	r6, [r5, #16]
 8005a14:	f7ff fde2 	bl	80055dc <_Bfree>
 8005a18:	4628      	mov	r0, r5
 8005a1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a1e:	f842 0f04 	str.w	r0, [r2, #4]!
 8005a22:	3301      	adds	r3, #1
 8005a24:	e7c5      	b.n	80059b2 <__lshift+0x4a>
 8005a26:	3904      	subs	r1, #4
 8005a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a2c:	459c      	cmp	ip, r3
 8005a2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8005a32:	d8f9      	bhi.n	8005a28 <__lshift+0xc0>
 8005a34:	e7ea      	b.n	8005a0c <__lshift+0xa4>
 8005a36:	bf00      	nop
 8005a38:	0800686e 	.word	0x0800686e
 8005a3c:	0800687f 	.word	0x0800687f

08005a40 <__mcmp>:
 8005a40:	4603      	mov	r3, r0
 8005a42:	690a      	ldr	r2, [r1, #16]
 8005a44:	6900      	ldr	r0, [r0, #16]
 8005a46:	b530      	push	{r4, r5, lr}
 8005a48:	1a80      	subs	r0, r0, r2
 8005a4a:	d10e      	bne.n	8005a6a <__mcmp+0x2a>
 8005a4c:	3314      	adds	r3, #20
 8005a4e:	3114      	adds	r1, #20
 8005a50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005a54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005a58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005a5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005a60:	4295      	cmp	r5, r2
 8005a62:	d003      	beq.n	8005a6c <__mcmp+0x2c>
 8005a64:	d205      	bcs.n	8005a72 <__mcmp+0x32>
 8005a66:	f04f 30ff 	mov.w	r0, #4294967295
 8005a6a:	bd30      	pop	{r4, r5, pc}
 8005a6c:	42a3      	cmp	r3, r4
 8005a6e:	d3f3      	bcc.n	8005a58 <__mcmp+0x18>
 8005a70:	e7fb      	b.n	8005a6a <__mcmp+0x2a>
 8005a72:	2001      	movs	r0, #1
 8005a74:	e7f9      	b.n	8005a6a <__mcmp+0x2a>
	...

08005a78 <__mdiff>:
 8005a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a7c:	4689      	mov	r9, r1
 8005a7e:	4606      	mov	r6, r0
 8005a80:	4611      	mov	r1, r2
 8005a82:	4648      	mov	r0, r9
 8005a84:	4614      	mov	r4, r2
 8005a86:	f7ff ffdb 	bl	8005a40 <__mcmp>
 8005a8a:	1e05      	subs	r5, r0, #0
 8005a8c:	d112      	bne.n	8005ab4 <__mdiff+0x3c>
 8005a8e:	4629      	mov	r1, r5
 8005a90:	4630      	mov	r0, r6
 8005a92:	f7ff fd63 	bl	800555c <_Balloc>
 8005a96:	4602      	mov	r2, r0
 8005a98:	b928      	cbnz	r0, 8005aa6 <__mdiff+0x2e>
 8005a9a:	f240 2137 	movw	r1, #567	@ 0x237
 8005a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8005b98 <__mdiff+0x120>)
 8005aa0:	483e      	ldr	r0, [pc, #248]	@ (8005b9c <__mdiff+0x124>)
 8005aa2:	f000 fb0d 	bl	80060c0 <__assert_func>
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005aac:	4610      	mov	r0, r2
 8005aae:	b003      	add	sp, #12
 8005ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab4:	bfbc      	itt	lt
 8005ab6:	464b      	movlt	r3, r9
 8005ab8:	46a1      	movlt	r9, r4
 8005aba:	4630      	mov	r0, r6
 8005abc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005ac0:	bfba      	itte	lt
 8005ac2:	461c      	movlt	r4, r3
 8005ac4:	2501      	movlt	r5, #1
 8005ac6:	2500      	movge	r5, #0
 8005ac8:	f7ff fd48 	bl	800555c <_Balloc>
 8005acc:	4602      	mov	r2, r0
 8005ace:	b918      	cbnz	r0, 8005ad8 <__mdiff+0x60>
 8005ad0:	f240 2145 	movw	r1, #581	@ 0x245
 8005ad4:	4b30      	ldr	r3, [pc, #192]	@ (8005b98 <__mdiff+0x120>)
 8005ad6:	e7e3      	b.n	8005aa0 <__mdiff+0x28>
 8005ad8:	f100 0b14 	add.w	fp, r0, #20
 8005adc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005ae0:	f109 0310 	add.w	r3, r9, #16
 8005ae4:	60c5      	str	r5, [r0, #12]
 8005ae6:	f04f 0c00 	mov.w	ip, #0
 8005aea:	f109 0514 	add.w	r5, r9, #20
 8005aee:	46d9      	mov	r9, fp
 8005af0:	6926      	ldr	r6, [r4, #16]
 8005af2:	f104 0e14 	add.w	lr, r4, #20
 8005af6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005afa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	9b01      	ldr	r3, [sp, #4]
 8005b02:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005b06:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005b0a:	b281      	uxth	r1, r0
 8005b0c:	9301      	str	r3, [sp, #4]
 8005b0e:	fa1f f38a 	uxth.w	r3, sl
 8005b12:	1a5b      	subs	r3, r3, r1
 8005b14:	0c00      	lsrs	r0, r0, #16
 8005b16:	4463      	add	r3, ip
 8005b18:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005b1c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005b26:	4576      	cmp	r6, lr
 8005b28:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b2c:	f849 3b04 	str.w	r3, [r9], #4
 8005b30:	d8e6      	bhi.n	8005b00 <__mdiff+0x88>
 8005b32:	1b33      	subs	r3, r6, r4
 8005b34:	3b15      	subs	r3, #21
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	3415      	adds	r4, #21
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	42a6      	cmp	r6, r4
 8005b40:	bf38      	it	cc
 8005b42:	2304      	movcc	r3, #4
 8005b44:	441d      	add	r5, r3
 8005b46:	445b      	add	r3, fp
 8005b48:	461e      	mov	r6, r3
 8005b4a:	462c      	mov	r4, r5
 8005b4c:	4544      	cmp	r4, r8
 8005b4e:	d30e      	bcc.n	8005b6e <__mdiff+0xf6>
 8005b50:	f108 0103 	add.w	r1, r8, #3
 8005b54:	1b49      	subs	r1, r1, r5
 8005b56:	f021 0103 	bic.w	r1, r1, #3
 8005b5a:	3d03      	subs	r5, #3
 8005b5c:	45a8      	cmp	r8, r5
 8005b5e:	bf38      	it	cc
 8005b60:	2100      	movcc	r1, #0
 8005b62:	440b      	add	r3, r1
 8005b64:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b68:	b199      	cbz	r1, 8005b92 <__mdiff+0x11a>
 8005b6a:	6117      	str	r7, [r2, #16]
 8005b6c:	e79e      	b.n	8005aac <__mdiff+0x34>
 8005b6e:	46e6      	mov	lr, ip
 8005b70:	f854 1b04 	ldr.w	r1, [r4], #4
 8005b74:	fa1f fc81 	uxth.w	ip, r1
 8005b78:	44f4      	add	ip, lr
 8005b7a:	0c08      	lsrs	r0, r1, #16
 8005b7c:	4471      	add	r1, lr
 8005b7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005b82:	b289      	uxth	r1, r1
 8005b84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b8c:	f846 1b04 	str.w	r1, [r6], #4
 8005b90:	e7dc      	b.n	8005b4c <__mdiff+0xd4>
 8005b92:	3f01      	subs	r7, #1
 8005b94:	e7e6      	b.n	8005b64 <__mdiff+0xec>
 8005b96:	bf00      	nop
 8005b98:	0800686e 	.word	0x0800686e
 8005b9c:	0800687f 	.word	0x0800687f

08005ba0 <__d2b>:
 8005ba0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	4690      	mov	r8, r2
 8005ba8:	4699      	mov	r9, r3
 8005baa:	9e08      	ldr	r6, [sp, #32]
 8005bac:	f7ff fcd6 	bl	800555c <_Balloc>
 8005bb0:	4604      	mov	r4, r0
 8005bb2:	b930      	cbnz	r0, 8005bc2 <__d2b+0x22>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	f240 310f 	movw	r1, #783	@ 0x30f
 8005bba:	4b23      	ldr	r3, [pc, #140]	@ (8005c48 <__d2b+0xa8>)
 8005bbc:	4823      	ldr	r0, [pc, #140]	@ (8005c4c <__d2b+0xac>)
 8005bbe:	f000 fa7f 	bl	80060c0 <__assert_func>
 8005bc2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005bc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005bca:	b10d      	cbz	r5, 8005bd0 <__d2b+0x30>
 8005bcc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bd0:	9301      	str	r3, [sp, #4]
 8005bd2:	f1b8 0300 	subs.w	r3, r8, #0
 8005bd6:	d024      	beq.n	8005c22 <__d2b+0x82>
 8005bd8:	4668      	mov	r0, sp
 8005bda:	9300      	str	r3, [sp, #0]
 8005bdc:	f7ff fd85 	bl	80056ea <__lo0bits>
 8005be0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005be4:	b1d8      	cbz	r0, 8005c1e <__d2b+0x7e>
 8005be6:	f1c0 0320 	rsb	r3, r0, #32
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	40c2      	lsrs	r2, r0
 8005bf2:	6163      	str	r3, [r4, #20]
 8005bf4:	9201      	str	r2, [sp, #4]
 8005bf6:	9b01      	ldr	r3, [sp, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	bf0c      	ite	eq
 8005bfc:	2201      	moveq	r2, #1
 8005bfe:	2202      	movne	r2, #2
 8005c00:	61a3      	str	r3, [r4, #24]
 8005c02:	6122      	str	r2, [r4, #16]
 8005c04:	b1ad      	cbz	r5, 8005c32 <__d2b+0x92>
 8005c06:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005c0a:	4405      	add	r5, r0
 8005c0c:	6035      	str	r5, [r6, #0]
 8005c0e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005c12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c14:	6018      	str	r0, [r3, #0]
 8005c16:	4620      	mov	r0, r4
 8005c18:	b002      	add	sp, #8
 8005c1a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8005c1e:	6161      	str	r1, [r4, #20]
 8005c20:	e7e9      	b.n	8005bf6 <__d2b+0x56>
 8005c22:	a801      	add	r0, sp, #4
 8005c24:	f7ff fd61 	bl	80056ea <__lo0bits>
 8005c28:	9b01      	ldr	r3, [sp, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	6163      	str	r3, [r4, #20]
 8005c2e:	3020      	adds	r0, #32
 8005c30:	e7e7      	b.n	8005c02 <__d2b+0x62>
 8005c32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005c36:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005c3a:	6030      	str	r0, [r6, #0]
 8005c3c:	6918      	ldr	r0, [r3, #16]
 8005c3e:	f7ff fd35 	bl	80056ac <__hi0bits>
 8005c42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005c46:	e7e4      	b.n	8005c12 <__d2b+0x72>
 8005c48:	0800686e 	.word	0x0800686e
 8005c4c:	0800687f 	.word	0x0800687f

08005c50 <__ssputs_r>:
 8005c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c54:	461f      	mov	r7, r3
 8005c56:	688e      	ldr	r6, [r1, #8]
 8005c58:	4682      	mov	sl, r0
 8005c5a:	42be      	cmp	r6, r7
 8005c5c:	460c      	mov	r4, r1
 8005c5e:	4690      	mov	r8, r2
 8005c60:	680b      	ldr	r3, [r1, #0]
 8005c62:	d82d      	bhi.n	8005cc0 <__ssputs_r+0x70>
 8005c64:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c68:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005c6c:	d026      	beq.n	8005cbc <__ssputs_r+0x6c>
 8005c6e:	6965      	ldr	r5, [r4, #20]
 8005c70:	6909      	ldr	r1, [r1, #16]
 8005c72:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c76:	eba3 0901 	sub.w	r9, r3, r1
 8005c7a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c7e:	1c7b      	adds	r3, r7, #1
 8005c80:	444b      	add	r3, r9
 8005c82:	106d      	asrs	r5, r5, #1
 8005c84:	429d      	cmp	r5, r3
 8005c86:	bf38      	it	cc
 8005c88:	461d      	movcc	r5, r3
 8005c8a:	0553      	lsls	r3, r2, #21
 8005c8c:	d527      	bpl.n	8005cde <__ssputs_r+0x8e>
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7ff fbd8 	bl	8005444 <_malloc_r>
 8005c94:	4606      	mov	r6, r0
 8005c96:	b360      	cbz	r0, 8005cf2 <__ssputs_r+0xa2>
 8005c98:	464a      	mov	r2, r9
 8005c9a:	6921      	ldr	r1, [r4, #16]
 8005c9c:	f000 fa02 	bl	80060a4 <memcpy>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	6126      	str	r6, [r4, #16]
 8005cae:	444e      	add	r6, r9
 8005cb0:	6026      	str	r6, [r4, #0]
 8005cb2:	463e      	mov	r6, r7
 8005cb4:	6165      	str	r5, [r4, #20]
 8005cb6:	eba5 0509 	sub.w	r5, r5, r9
 8005cba:	60a5      	str	r5, [r4, #8]
 8005cbc:	42be      	cmp	r6, r7
 8005cbe:	d900      	bls.n	8005cc2 <__ssputs_r+0x72>
 8005cc0:	463e      	mov	r6, r7
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	4641      	mov	r1, r8
 8005cc6:	6820      	ldr	r0, [r4, #0]
 8005cc8:	f000 f9c2 	bl	8006050 <memmove>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	68a3      	ldr	r3, [r4, #8]
 8005cd0:	1b9b      	subs	r3, r3, r6
 8005cd2:	60a3      	str	r3, [r4, #8]
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	4433      	add	r3, r6
 8005cd8:	6023      	str	r3, [r4, #0]
 8005cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cde:	462a      	mov	r2, r5
 8005ce0:	f000 fa32 	bl	8006148 <_realloc_r>
 8005ce4:	4606      	mov	r6, r0
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d1e0      	bne.n	8005cac <__ssputs_r+0x5c>
 8005cea:	4650      	mov	r0, sl
 8005cec:	6921      	ldr	r1, [r4, #16]
 8005cee:	f7ff fb37 	bl	8005360 <_free_r>
 8005cf2:	230c      	movs	r3, #12
 8005cf4:	f8ca 3000 	str.w	r3, [sl]
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8005cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	e7e9      	b.n	8005cda <__ssputs_r+0x8a>
	...

08005d08 <_svfiprintf_r>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	4698      	mov	r8, r3
 8005d0e:	898b      	ldrh	r3, [r1, #12]
 8005d10:	4607      	mov	r7, r0
 8005d12:	061b      	lsls	r3, r3, #24
 8005d14:	460d      	mov	r5, r1
 8005d16:	4614      	mov	r4, r2
 8005d18:	b09d      	sub	sp, #116	@ 0x74
 8005d1a:	d510      	bpl.n	8005d3e <_svfiprintf_r+0x36>
 8005d1c:	690b      	ldr	r3, [r1, #16]
 8005d1e:	b973      	cbnz	r3, 8005d3e <_svfiprintf_r+0x36>
 8005d20:	2140      	movs	r1, #64	@ 0x40
 8005d22:	f7ff fb8f 	bl	8005444 <_malloc_r>
 8005d26:	6028      	str	r0, [r5, #0]
 8005d28:	6128      	str	r0, [r5, #16]
 8005d2a:	b930      	cbnz	r0, 8005d3a <_svfiprintf_r+0x32>
 8005d2c:	230c      	movs	r3, #12
 8005d2e:	603b      	str	r3, [r7, #0]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	b01d      	add	sp, #116	@ 0x74
 8005d36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3a:	2340      	movs	r3, #64	@ 0x40
 8005d3c:	616b      	str	r3, [r5, #20]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d42:	2320      	movs	r3, #32
 8005d44:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d48:	2330      	movs	r3, #48	@ 0x30
 8005d4a:	f04f 0901 	mov.w	r9, #1
 8005d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d52:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005eec <_svfiprintf_r+0x1e4>
 8005d56:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d5a:	4623      	mov	r3, r4
 8005d5c:	469a      	mov	sl, r3
 8005d5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d62:	b10a      	cbz	r2, 8005d68 <_svfiprintf_r+0x60>
 8005d64:	2a25      	cmp	r2, #37	@ 0x25
 8005d66:	d1f9      	bne.n	8005d5c <_svfiprintf_r+0x54>
 8005d68:	ebba 0b04 	subs.w	fp, sl, r4
 8005d6c:	d00b      	beq.n	8005d86 <_svfiprintf_r+0x7e>
 8005d6e:	465b      	mov	r3, fp
 8005d70:	4622      	mov	r2, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	4638      	mov	r0, r7
 8005d76:	f7ff ff6b 	bl	8005c50 <__ssputs_r>
 8005d7a:	3001      	adds	r0, #1
 8005d7c:	f000 80a7 	beq.w	8005ece <_svfiprintf_r+0x1c6>
 8005d80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d82:	445a      	add	r2, fp
 8005d84:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d86:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 809f 	beq.w	8005ece <_svfiprintf_r+0x1c6>
 8005d90:	2300      	movs	r3, #0
 8005d92:	f04f 32ff 	mov.w	r2, #4294967295
 8005d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d9a:	f10a 0a01 	add.w	sl, sl, #1
 8005d9e:	9304      	str	r3, [sp, #16]
 8005da0:	9307      	str	r3, [sp, #28]
 8005da2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005da6:	931a      	str	r3, [sp, #104]	@ 0x68
 8005da8:	4654      	mov	r4, sl
 8005daa:	2205      	movs	r2, #5
 8005dac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db0:	484e      	ldr	r0, [pc, #312]	@ (8005eec <_svfiprintf_r+0x1e4>)
 8005db2:	f7fe fc6a 	bl	800468a <memchr>
 8005db6:	9a04      	ldr	r2, [sp, #16]
 8005db8:	b9d8      	cbnz	r0, 8005df2 <_svfiprintf_r+0xea>
 8005dba:	06d0      	lsls	r0, r2, #27
 8005dbc:	bf44      	itt	mi
 8005dbe:	2320      	movmi	r3, #32
 8005dc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dc4:	0711      	lsls	r1, r2, #28
 8005dc6:	bf44      	itt	mi
 8005dc8:	232b      	movmi	r3, #43	@ 0x2b
 8005dca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dce:	f89a 3000 	ldrb.w	r3, [sl]
 8005dd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dd4:	d015      	beq.n	8005e02 <_svfiprintf_r+0xfa>
 8005dd6:	4654      	mov	r4, sl
 8005dd8:	2000      	movs	r0, #0
 8005dda:	f04f 0c0a 	mov.w	ip, #10
 8005dde:	9a07      	ldr	r2, [sp, #28]
 8005de0:	4621      	mov	r1, r4
 8005de2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005de6:	3b30      	subs	r3, #48	@ 0x30
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d94b      	bls.n	8005e84 <_svfiprintf_r+0x17c>
 8005dec:	b1b0      	cbz	r0, 8005e1c <_svfiprintf_r+0x114>
 8005dee:	9207      	str	r2, [sp, #28]
 8005df0:	e014      	b.n	8005e1c <_svfiprintf_r+0x114>
 8005df2:	eba0 0308 	sub.w	r3, r0, r8
 8005df6:	fa09 f303 	lsl.w	r3, r9, r3
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	46a2      	mov	sl, r4
 8005dfe:	9304      	str	r3, [sp, #16]
 8005e00:	e7d2      	b.n	8005da8 <_svfiprintf_r+0xa0>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	1d19      	adds	r1, r3, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	9103      	str	r1, [sp, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	bfbb      	ittet	lt
 8005e0e:	425b      	neglt	r3, r3
 8005e10:	f042 0202 	orrlt.w	r2, r2, #2
 8005e14:	9307      	strge	r3, [sp, #28]
 8005e16:	9307      	strlt	r3, [sp, #28]
 8005e18:	bfb8      	it	lt
 8005e1a:	9204      	strlt	r2, [sp, #16]
 8005e1c:	7823      	ldrb	r3, [r4, #0]
 8005e1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e20:	d10a      	bne.n	8005e38 <_svfiprintf_r+0x130>
 8005e22:	7863      	ldrb	r3, [r4, #1]
 8005e24:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e26:	d132      	bne.n	8005e8e <_svfiprintf_r+0x186>
 8005e28:	9b03      	ldr	r3, [sp, #12]
 8005e2a:	3402      	adds	r4, #2
 8005e2c:	1d1a      	adds	r2, r3, #4
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	9203      	str	r2, [sp, #12]
 8005e32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e36:	9305      	str	r3, [sp, #20]
 8005e38:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005ef0 <_svfiprintf_r+0x1e8>
 8005e3c:	2203      	movs	r2, #3
 8005e3e:	4650      	mov	r0, sl
 8005e40:	7821      	ldrb	r1, [r4, #0]
 8005e42:	f7fe fc22 	bl	800468a <memchr>
 8005e46:	b138      	cbz	r0, 8005e58 <_svfiprintf_r+0x150>
 8005e48:	2240      	movs	r2, #64	@ 0x40
 8005e4a:	9b04      	ldr	r3, [sp, #16]
 8005e4c:	eba0 000a 	sub.w	r0, r0, sl
 8005e50:	4082      	lsls	r2, r0
 8005e52:	4313      	orrs	r3, r2
 8005e54:	3401      	adds	r4, #1
 8005e56:	9304      	str	r3, [sp, #16]
 8005e58:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e5c:	2206      	movs	r2, #6
 8005e5e:	4825      	ldr	r0, [pc, #148]	@ (8005ef4 <_svfiprintf_r+0x1ec>)
 8005e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e64:	f7fe fc11 	bl	800468a <memchr>
 8005e68:	2800      	cmp	r0, #0
 8005e6a:	d036      	beq.n	8005eda <_svfiprintf_r+0x1d2>
 8005e6c:	4b22      	ldr	r3, [pc, #136]	@ (8005ef8 <_svfiprintf_r+0x1f0>)
 8005e6e:	bb1b      	cbnz	r3, 8005eb8 <_svfiprintf_r+0x1b0>
 8005e70:	9b03      	ldr	r3, [sp, #12]
 8005e72:	3307      	adds	r3, #7
 8005e74:	f023 0307 	bic.w	r3, r3, #7
 8005e78:	3308      	adds	r3, #8
 8005e7a:	9303      	str	r3, [sp, #12]
 8005e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e7e:	4433      	add	r3, r6
 8005e80:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e82:	e76a      	b.n	8005d5a <_svfiprintf_r+0x52>
 8005e84:	460c      	mov	r4, r1
 8005e86:	2001      	movs	r0, #1
 8005e88:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e8c:	e7a8      	b.n	8005de0 <_svfiprintf_r+0xd8>
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f04f 0c0a 	mov.w	ip, #10
 8005e94:	4619      	mov	r1, r3
 8005e96:	3401      	adds	r4, #1
 8005e98:	9305      	str	r3, [sp, #20]
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ea0:	3a30      	subs	r2, #48	@ 0x30
 8005ea2:	2a09      	cmp	r2, #9
 8005ea4:	d903      	bls.n	8005eae <_svfiprintf_r+0x1a6>
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d0c6      	beq.n	8005e38 <_svfiprintf_r+0x130>
 8005eaa:	9105      	str	r1, [sp, #20]
 8005eac:	e7c4      	b.n	8005e38 <_svfiprintf_r+0x130>
 8005eae:	4604      	mov	r4, r0
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005eb6:	e7f0      	b.n	8005e9a <_svfiprintf_r+0x192>
 8005eb8:	ab03      	add	r3, sp, #12
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	462a      	mov	r2, r5
 8005ebe:	4638      	mov	r0, r7
 8005ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8005efc <_svfiprintf_r+0x1f4>)
 8005ec2:	a904      	add	r1, sp, #16
 8005ec4:	f7fd fe6a 	bl	8003b9c <_printf_float>
 8005ec8:	1c42      	adds	r2, r0, #1
 8005eca:	4606      	mov	r6, r0
 8005ecc:	d1d6      	bne.n	8005e7c <_svfiprintf_r+0x174>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	065b      	lsls	r3, r3, #25
 8005ed2:	f53f af2d 	bmi.w	8005d30 <_svfiprintf_r+0x28>
 8005ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ed8:	e72c      	b.n	8005d34 <_svfiprintf_r+0x2c>
 8005eda:	ab03      	add	r3, sp, #12
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	4b06      	ldr	r3, [pc, #24]	@ (8005efc <_svfiprintf_r+0x1f4>)
 8005ee4:	a904      	add	r1, sp, #16
 8005ee6:	f7fe f8f7 	bl	80040d8 <_printf_i>
 8005eea:	e7ed      	b.n	8005ec8 <_svfiprintf_r+0x1c0>
 8005eec:	080068d8 	.word	0x080068d8
 8005ef0:	080068de 	.word	0x080068de
 8005ef4:	080068e2 	.word	0x080068e2
 8005ef8:	08003b9d 	.word	0x08003b9d
 8005efc:	08005c51 	.word	0x08005c51

08005f00 <__sflush_r>:
 8005f00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f06:	0716      	lsls	r6, r2, #28
 8005f08:	4605      	mov	r5, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	d454      	bmi.n	8005fb8 <__sflush_r+0xb8>
 8005f0e:	684b      	ldr	r3, [r1, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	dc02      	bgt.n	8005f1a <__sflush_r+0x1a>
 8005f14:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	dd48      	ble.n	8005fac <__sflush_r+0xac>
 8005f1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	d045      	beq.n	8005fac <__sflush_r+0xac>
 8005f20:	2300      	movs	r3, #0
 8005f22:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005f26:	682f      	ldr	r7, [r5, #0]
 8005f28:	6a21      	ldr	r1, [r4, #32]
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	d030      	beq.n	8005f90 <__sflush_r+0x90>
 8005f2e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005f30:	89a3      	ldrh	r3, [r4, #12]
 8005f32:	0759      	lsls	r1, r3, #29
 8005f34:	d505      	bpl.n	8005f42 <__sflush_r+0x42>
 8005f36:	6863      	ldr	r3, [r4, #4]
 8005f38:	1ad2      	subs	r2, r2, r3
 8005f3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005f3c:	b10b      	cbz	r3, 8005f42 <__sflush_r+0x42>
 8005f3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005f40:	1ad2      	subs	r2, r2, r3
 8005f42:	2300      	movs	r3, #0
 8005f44:	4628      	mov	r0, r5
 8005f46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005f48:	6a21      	ldr	r1, [r4, #32]
 8005f4a:	47b0      	blx	r6
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	d106      	bne.n	8005f60 <__sflush_r+0x60>
 8005f52:	6829      	ldr	r1, [r5, #0]
 8005f54:	291d      	cmp	r1, #29
 8005f56:	d82b      	bhi.n	8005fb0 <__sflush_r+0xb0>
 8005f58:	4a28      	ldr	r2, [pc, #160]	@ (8005ffc <__sflush_r+0xfc>)
 8005f5a:	40ca      	lsrs	r2, r1
 8005f5c:	07d6      	lsls	r6, r2, #31
 8005f5e:	d527      	bpl.n	8005fb0 <__sflush_r+0xb0>
 8005f60:	2200      	movs	r2, #0
 8005f62:	6062      	str	r2, [r4, #4]
 8005f64:	6922      	ldr	r2, [r4, #16]
 8005f66:	04d9      	lsls	r1, r3, #19
 8005f68:	6022      	str	r2, [r4, #0]
 8005f6a:	d504      	bpl.n	8005f76 <__sflush_r+0x76>
 8005f6c:	1c42      	adds	r2, r0, #1
 8005f6e:	d101      	bne.n	8005f74 <__sflush_r+0x74>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b903      	cbnz	r3, 8005f76 <__sflush_r+0x76>
 8005f74:	6560      	str	r0, [r4, #84]	@ 0x54
 8005f76:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f78:	602f      	str	r7, [r5, #0]
 8005f7a:	b1b9      	cbz	r1, 8005fac <__sflush_r+0xac>
 8005f7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005f80:	4299      	cmp	r1, r3
 8005f82:	d002      	beq.n	8005f8a <__sflush_r+0x8a>
 8005f84:	4628      	mov	r0, r5
 8005f86:	f7ff f9eb 	bl	8005360 <_free_r>
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005f8e:	e00d      	b.n	8005fac <__sflush_r+0xac>
 8005f90:	2301      	movs	r3, #1
 8005f92:	4628      	mov	r0, r5
 8005f94:	47b0      	blx	r6
 8005f96:	4602      	mov	r2, r0
 8005f98:	1c50      	adds	r0, r2, #1
 8005f9a:	d1c9      	bne.n	8005f30 <__sflush_r+0x30>
 8005f9c:	682b      	ldr	r3, [r5, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0c6      	beq.n	8005f30 <__sflush_r+0x30>
 8005fa2:	2b1d      	cmp	r3, #29
 8005fa4:	d001      	beq.n	8005faa <__sflush_r+0xaa>
 8005fa6:	2b16      	cmp	r3, #22
 8005fa8:	d11d      	bne.n	8005fe6 <__sflush_r+0xe6>
 8005faa:	602f      	str	r7, [r5, #0]
 8005fac:	2000      	movs	r0, #0
 8005fae:	e021      	b.n	8005ff4 <__sflush_r+0xf4>
 8005fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fb4:	b21b      	sxth	r3, r3
 8005fb6:	e01a      	b.n	8005fee <__sflush_r+0xee>
 8005fb8:	690f      	ldr	r7, [r1, #16]
 8005fba:	2f00      	cmp	r7, #0
 8005fbc:	d0f6      	beq.n	8005fac <__sflush_r+0xac>
 8005fbe:	0793      	lsls	r3, r2, #30
 8005fc0:	bf18      	it	ne
 8005fc2:	2300      	movne	r3, #0
 8005fc4:	680e      	ldr	r6, [r1, #0]
 8005fc6:	bf08      	it	eq
 8005fc8:	694b      	ldreq	r3, [r1, #20]
 8005fca:	1bf6      	subs	r6, r6, r7
 8005fcc:	600f      	str	r7, [r1, #0]
 8005fce:	608b      	str	r3, [r1, #8]
 8005fd0:	2e00      	cmp	r6, #0
 8005fd2:	ddeb      	ble.n	8005fac <__sflush_r+0xac>
 8005fd4:	4633      	mov	r3, r6
 8005fd6:	463a      	mov	r2, r7
 8005fd8:	4628      	mov	r0, r5
 8005fda:	6a21      	ldr	r1, [r4, #32]
 8005fdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005fe0:	47e0      	blx	ip
 8005fe2:	2800      	cmp	r0, #0
 8005fe4:	dc07      	bgt.n	8005ff6 <__sflush_r+0xf6>
 8005fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005fee:	f04f 30ff 	mov.w	r0, #4294967295
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff6:	4407      	add	r7, r0
 8005ff8:	1a36      	subs	r6, r6, r0
 8005ffa:	e7e9      	b.n	8005fd0 <__sflush_r+0xd0>
 8005ffc:	20400001 	.word	0x20400001

08006000 <_fflush_r>:
 8006000:	b538      	push	{r3, r4, r5, lr}
 8006002:	690b      	ldr	r3, [r1, #16]
 8006004:	4605      	mov	r5, r0
 8006006:	460c      	mov	r4, r1
 8006008:	b913      	cbnz	r3, 8006010 <_fflush_r+0x10>
 800600a:	2500      	movs	r5, #0
 800600c:	4628      	mov	r0, r5
 800600e:	bd38      	pop	{r3, r4, r5, pc}
 8006010:	b118      	cbz	r0, 800601a <_fflush_r+0x1a>
 8006012:	6a03      	ldr	r3, [r0, #32]
 8006014:	b90b      	cbnz	r3, 800601a <_fflush_r+0x1a>
 8006016:	f7fe fa09 	bl	800442c <__sinit>
 800601a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f3      	beq.n	800600a <_fflush_r+0xa>
 8006022:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006024:	07d0      	lsls	r0, r2, #31
 8006026:	d404      	bmi.n	8006032 <_fflush_r+0x32>
 8006028:	0599      	lsls	r1, r3, #22
 800602a:	d402      	bmi.n	8006032 <_fflush_r+0x32>
 800602c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800602e:	f7fe fb2a 	bl	8004686 <__retarget_lock_acquire_recursive>
 8006032:	4628      	mov	r0, r5
 8006034:	4621      	mov	r1, r4
 8006036:	f7ff ff63 	bl	8005f00 <__sflush_r>
 800603a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800603c:	4605      	mov	r5, r0
 800603e:	07da      	lsls	r2, r3, #31
 8006040:	d4e4      	bmi.n	800600c <_fflush_r+0xc>
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	059b      	lsls	r3, r3, #22
 8006046:	d4e1      	bmi.n	800600c <_fflush_r+0xc>
 8006048:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800604a:	f7fe fb1d 	bl	8004688 <__retarget_lock_release_recursive>
 800604e:	e7dd      	b.n	800600c <_fflush_r+0xc>

08006050 <memmove>:
 8006050:	4288      	cmp	r0, r1
 8006052:	b510      	push	{r4, lr}
 8006054:	eb01 0402 	add.w	r4, r1, r2
 8006058:	d902      	bls.n	8006060 <memmove+0x10>
 800605a:	4284      	cmp	r4, r0
 800605c:	4623      	mov	r3, r4
 800605e:	d807      	bhi.n	8006070 <memmove+0x20>
 8006060:	1e43      	subs	r3, r0, #1
 8006062:	42a1      	cmp	r1, r4
 8006064:	d008      	beq.n	8006078 <memmove+0x28>
 8006066:	f811 2b01 	ldrb.w	r2, [r1], #1
 800606a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800606e:	e7f8      	b.n	8006062 <memmove+0x12>
 8006070:	4601      	mov	r1, r0
 8006072:	4402      	add	r2, r0
 8006074:	428a      	cmp	r2, r1
 8006076:	d100      	bne.n	800607a <memmove+0x2a>
 8006078:	bd10      	pop	{r4, pc}
 800607a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800607e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006082:	e7f7      	b.n	8006074 <memmove+0x24>

08006084 <_sbrk_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	2300      	movs	r3, #0
 8006088:	4d05      	ldr	r5, [pc, #20]	@ (80060a0 <_sbrk_r+0x1c>)
 800608a:	4604      	mov	r4, r0
 800608c:	4608      	mov	r0, r1
 800608e:	602b      	str	r3, [r5, #0]
 8006090:	f7fb fcd2 	bl	8001a38 <_sbrk>
 8006094:	1c43      	adds	r3, r0, #1
 8006096:	d102      	bne.n	800609e <_sbrk_r+0x1a>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	b103      	cbz	r3, 800609e <_sbrk_r+0x1a>
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bd38      	pop	{r3, r4, r5, pc}
 80060a0:	200003d4 	.word	0x200003d4

080060a4 <memcpy>:
 80060a4:	440a      	add	r2, r1
 80060a6:	4291      	cmp	r1, r2
 80060a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80060ac:	d100      	bne.n	80060b0 <memcpy+0xc>
 80060ae:	4770      	bx	lr
 80060b0:	b510      	push	{r4, lr}
 80060b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060b6:	4291      	cmp	r1, r2
 80060b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060bc:	d1f9      	bne.n	80060b2 <memcpy+0xe>
 80060be:	bd10      	pop	{r4, pc}

080060c0 <__assert_func>:
 80060c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060c2:	4614      	mov	r4, r2
 80060c4:	461a      	mov	r2, r3
 80060c6:	4b09      	ldr	r3, [pc, #36]	@ (80060ec <__assert_func+0x2c>)
 80060c8:	4605      	mov	r5, r0
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68d8      	ldr	r0, [r3, #12]
 80060ce:	b14c      	cbz	r4, 80060e4 <__assert_func+0x24>
 80060d0:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <__assert_func+0x30>)
 80060d2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80060d6:	9100      	str	r1, [sp, #0]
 80060d8:	462b      	mov	r3, r5
 80060da:	4906      	ldr	r1, [pc, #24]	@ (80060f4 <__assert_func+0x34>)
 80060dc:	f000 f870 	bl	80061c0 <fiprintf>
 80060e0:	f000 f880 	bl	80061e4 <abort>
 80060e4:	4b04      	ldr	r3, [pc, #16]	@ (80060f8 <__assert_func+0x38>)
 80060e6:	461c      	mov	r4, r3
 80060e8:	e7f3      	b.n	80060d2 <__assert_func+0x12>
 80060ea:	bf00      	nop
 80060ec:	2000001c 	.word	0x2000001c
 80060f0:	080068f3 	.word	0x080068f3
 80060f4:	08006900 	.word	0x08006900
 80060f8:	0800692e 	.word	0x0800692e

080060fc <_calloc_r>:
 80060fc:	b570      	push	{r4, r5, r6, lr}
 80060fe:	fba1 5402 	umull	r5, r4, r1, r2
 8006102:	b934      	cbnz	r4, 8006112 <_calloc_r+0x16>
 8006104:	4629      	mov	r1, r5
 8006106:	f7ff f99d 	bl	8005444 <_malloc_r>
 800610a:	4606      	mov	r6, r0
 800610c:	b928      	cbnz	r0, 800611a <_calloc_r+0x1e>
 800610e:	4630      	mov	r0, r6
 8006110:	bd70      	pop	{r4, r5, r6, pc}
 8006112:	220c      	movs	r2, #12
 8006114:	2600      	movs	r6, #0
 8006116:	6002      	str	r2, [r0, #0]
 8006118:	e7f9      	b.n	800610e <_calloc_r+0x12>
 800611a:	462a      	mov	r2, r5
 800611c:	4621      	mov	r1, r4
 800611e:	f7fe fa34 	bl	800458a <memset>
 8006122:	e7f4      	b.n	800610e <_calloc_r+0x12>

08006124 <__ascii_mbtowc>:
 8006124:	b082      	sub	sp, #8
 8006126:	b901      	cbnz	r1, 800612a <__ascii_mbtowc+0x6>
 8006128:	a901      	add	r1, sp, #4
 800612a:	b142      	cbz	r2, 800613e <__ascii_mbtowc+0x1a>
 800612c:	b14b      	cbz	r3, 8006142 <__ascii_mbtowc+0x1e>
 800612e:	7813      	ldrb	r3, [r2, #0]
 8006130:	600b      	str	r3, [r1, #0]
 8006132:	7812      	ldrb	r2, [r2, #0]
 8006134:	1e10      	subs	r0, r2, #0
 8006136:	bf18      	it	ne
 8006138:	2001      	movne	r0, #1
 800613a:	b002      	add	sp, #8
 800613c:	4770      	bx	lr
 800613e:	4610      	mov	r0, r2
 8006140:	e7fb      	b.n	800613a <__ascii_mbtowc+0x16>
 8006142:	f06f 0001 	mvn.w	r0, #1
 8006146:	e7f8      	b.n	800613a <__ascii_mbtowc+0x16>

08006148 <_realloc_r>:
 8006148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800614c:	4607      	mov	r7, r0
 800614e:	4614      	mov	r4, r2
 8006150:	460d      	mov	r5, r1
 8006152:	b921      	cbnz	r1, 800615e <_realloc_r+0x16>
 8006154:	4611      	mov	r1, r2
 8006156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800615a:	f7ff b973 	b.w	8005444 <_malloc_r>
 800615e:	b92a      	cbnz	r2, 800616c <_realloc_r+0x24>
 8006160:	f7ff f8fe 	bl	8005360 <_free_r>
 8006164:	4625      	mov	r5, r4
 8006166:	4628      	mov	r0, r5
 8006168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616c:	f000 f841 	bl	80061f2 <_malloc_usable_size_r>
 8006170:	4284      	cmp	r4, r0
 8006172:	4606      	mov	r6, r0
 8006174:	d802      	bhi.n	800617c <_realloc_r+0x34>
 8006176:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800617a:	d8f4      	bhi.n	8006166 <_realloc_r+0x1e>
 800617c:	4621      	mov	r1, r4
 800617e:	4638      	mov	r0, r7
 8006180:	f7ff f960 	bl	8005444 <_malloc_r>
 8006184:	4680      	mov	r8, r0
 8006186:	b908      	cbnz	r0, 800618c <_realloc_r+0x44>
 8006188:	4645      	mov	r5, r8
 800618a:	e7ec      	b.n	8006166 <_realloc_r+0x1e>
 800618c:	42b4      	cmp	r4, r6
 800618e:	4622      	mov	r2, r4
 8006190:	4629      	mov	r1, r5
 8006192:	bf28      	it	cs
 8006194:	4632      	movcs	r2, r6
 8006196:	f7ff ff85 	bl	80060a4 <memcpy>
 800619a:	4629      	mov	r1, r5
 800619c:	4638      	mov	r0, r7
 800619e:	f7ff f8df 	bl	8005360 <_free_r>
 80061a2:	e7f1      	b.n	8006188 <_realloc_r+0x40>

080061a4 <__ascii_wctomb>:
 80061a4:	4603      	mov	r3, r0
 80061a6:	4608      	mov	r0, r1
 80061a8:	b141      	cbz	r1, 80061bc <__ascii_wctomb+0x18>
 80061aa:	2aff      	cmp	r2, #255	@ 0xff
 80061ac:	d904      	bls.n	80061b8 <__ascii_wctomb+0x14>
 80061ae:	228a      	movs	r2, #138	@ 0x8a
 80061b0:	f04f 30ff 	mov.w	r0, #4294967295
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	4770      	bx	lr
 80061b8:	2001      	movs	r0, #1
 80061ba:	700a      	strb	r2, [r1, #0]
 80061bc:	4770      	bx	lr
	...

080061c0 <fiprintf>:
 80061c0:	b40e      	push	{r1, r2, r3}
 80061c2:	b503      	push	{r0, r1, lr}
 80061c4:	4601      	mov	r1, r0
 80061c6:	ab03      	add	r3, sp, #12
 80061c8:	4805      	ldr	r0, [pc, #20]	@ (80061e0 <fiprintf+0x20>)
 80061ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80061ce:	6800      	ldr	r0, [r0, #0]
 80061d0:	9301      	str	r3, [sp, #4]
 80061d2:	f000 f83d 	bl	8006250 <_vfiprintf_r>
 80061d6:	b002      	add	sp, #8
 80061d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061dc:	b003      	add	sp, #12
 80061de:	4770      	bx	lr
 80061e0:	2000001c 	.word	0x2000001c

080061e4 <abort>:
 80061e4:	2006      	movs	r0, #6
 80061e6:	b508      	push	{r3, lr}
 80061e8:	f000 fa06 	bl	80065f8 <raise>
 80061ec:	2001      	movs	r0, #1
 80061ee:	f7fb fbae 	bl	800194e <_exit>

080061f2 <_malloc_usable_size_r>:
 80061f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f6:	1f18      	subs	r0, r3, #4
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bfbc      	itt	lt
 80061fc:	580b      	ldrlt	r3, [r1, r0]
 80061fe:	18c0      	addlt	r0, r0, r3
 8006200:	4770      	bx	lr

08006202 <__sfputc_r>:
 8006202:	6893      	ldr	r3, [r2, #8]
 8006204:	b410      	push	{r4}
 8006206:	3b01      	subs	r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	6093      	str	r3, [r2, #8]
 800620c:	da07      	bge.n	800621e <__sfputc_r+0x1c>
 800620e:	6994      	ldr	r4, [r2, #24]
 8006210:	42a3      	cmp	r3, r4
 8006212:	db01      	blt.n	8006218 <__sfputc_r+0x16>
 8006214:	290a      	cmp	r1, #10
 8006216:	d102      	bne.n	800621e <__sfputc_r+0x1c>
 8006218:	bc10      	pop	{r4}
 800621a:	f000 b931 	b.w	8006480 <__swbuf_r>
 800621e:	6813      	ldr	r3, [r2, #0]
 8006220:	1c58      	adds	r0, r3, #1
 8006222:	6010      	str	r0, [r2, #0]
 8006224:	7019      	strb	r1, [r3, #0]
 8006226:	4608      	mov	r0, r1
 8006228:	bc10      	pop	{r4}
 800622a:	4770      	bx	lr

0800622c <__sfputs_r>:
 800622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800622e:	4606      	mov	r6, r0
 8006230:	460f      	mov	r7, r1
 8006232:	4614      	mov	r4, r2
 8006234:	18d5      	adds	r5, r2, r3
 8006236:	42ac      	cmp	r4, r5
 8006238:	d101      	bne.n	800623e <__sfputs_r+0x12>
 800623a:	2000      	movs	r0, #0
 800623c:	e007      	b.n	800624e <__sfputs_r+0x22>
 800623e:	463a      	mov	r2, r7
 8006240:	4630      	mov	r0, r6
 8006242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006246:	f7ff ffdc 	bl	8006202 <__sfputc_r>
 800624a:	1c43      	adds	r3, r0, #1
 800624c:	d1f3      	bne.n	8006236 <__sfputs_r+0xa>
 800624e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006250 <_vfiprintf_r>:
 8006250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006254:	460d      	mov	r5, r1
 8006256:	4614      	mov	r4, r2
 8006258:	4698      	mov	r8, r3
 800625a:	4606      	mov	r6, r0
 800625c:	b09d      	sub	sp, #116	@ 0x74
 800625e:	b118      	cbz	r0, 8006268 <_vfiprintf_r+0x18>
 8006260:	6a03      	ldr	r3, [r0, #32]
 8006262:	b90b      	cbnz	r3, 8006268 <_vfiprintf_r+0x18>
 8006264:	f7fe f8e2 	bl	800442c <__sinit>
 8006268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800626a:	07d9      	lsls	r1, r3, #31
 800626c:	d405      	bmi.n	800627a <_vfiprintf_r+0x2a>
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	059a      	lsls	r2, r3, #22
 8006272:	d402      	bmi.n	800627a <_vfiprintf_r+0x2a>
 8006274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006276:	f7fe fa06 	bl	8004686 <__retarget_lock_acquire_recursive>
 800627a:	89ab      	ldrh	r3, [r5, #12]
 800627c:	071b      	lsls	r3, r3, #28
 800627e:	d501      	bpl.n	8006284 <_vfiprintf_r+0x34>
 8006280:	692b      	ldr	r3, [r5, #16]
 8006282:	b99b      	cbnz	r3, 80062ac <_vfiprintf_r+0x5c>
 8006284:	4629      	mov	r1, r5
 8006286:	4630      	mov	r0, r6
 8006288:	f000 f938 	bl	80064fc <__swsetup_r>
 800628c:	b170      	cbz	r0, 80062ac <_vfiprintf_r+0x5c>
 800628e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006290:	07dc      	lsls	r4, r3, #31
 8006292:	d504      	bpl.n	800629e <_vfiprintf_r+0x4e>
 8006294:	f04f 30ff 	mov.w	r0, #4294967295
 8006298:	b01d      	add	sp, #116	@ 0x74
 800629a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629e:	89ab      	ldrh	r3, [r5, #12]
 80062a0:	0598      	lsls	r0, r3, #22
 80062a2:	d4f7      	bmi.n	8006294 <_vfiprintf_r+0x44>
 80062a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80062a6:	f7fe f9ef 	bl	8004688 <__retarget_lock_release_recursive>
 80062aa:	e7f3      	b.n	8006294 <_vfiprintf_r+0x44>
 80062ac:	2300      	movs	r3, #0
 80062ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80062b0:	2320      	movs	r3, #32
 80062b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062b6:	2330      	movs	r3, #48	@ 0x30
 80062b8:	f04f 0901 	mov.w	r9, #1
 80062bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800646c <_vfiprintf_r+0x21c>
 80062c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062c8:	4623      	mov	r3, r4
 80062ca:	469a      	mov	sl, r3
 80062cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d0:	b10a      	cbz	r2, 80062d6 <_vfiprintf_r+0x86>
 80062d2:	2a25      	cmp	r2, #37	@ 0x25
 80062d4:	d1f9      	bne.n	80062ca <_vfiprintf_r+0x7a>
 80062d6:	ebba 0b04 	subs.w	fp, sl, r4
 80062da:	d00b      	beq.n	80062f4 <_vfiprintf_r+0xa4>
 80062dc:	465b      	mov	r3, fp
 80062de:	4622      	mov	r2, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff ffa2 	bl	800622c <__sfputs_r>
 80062e8:	3001      	adds	r0, #1
 80062ea:	f000 80a7 	beq.w	800643c <_vfiprintf_r+0x1ec>
 80062ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062f0:	445a      	add	r2, fp
 80062f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80062f4:	f89a 3000 	ldrb.w	r3, [sl]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 809f 	beq.w	800643c <_vfiprintf_r+0x1ec>
 80062fe:	2300      	movs	r3, #0
 8006300:	f04f 32ff 	mov.w	r2, #4294967295
 8006304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006308:	f10a 0a01 	add.w	sl, sl, #1
 800630c:	9304      	str	r3, [sp, #16]
 800630e:	9307      	str	r3, [sp, #28]
 8006310:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006314:	931a      	str	r3, [sp, #104]	@ 0x68
 8006316:	4654      	mov	r4, sl
 8006318:	2205      	movs	r2, #5
 800631a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631e:	4853      	ldr	r0, [pc, #332]	@ (800646c <_vfiprintf_r+0x21c>)
 8006320:	f7fe f9b3 	bl	800468a <memchr>
 8006324:	9a04      	ldr	r2, [sp, #16]
 8006326:	b9d8      	cbnz	r0, 8006360 <_vfiprintf_r+0x110>
 8006328:	06d1      	lsls	r1, r2, #27
 800632a:	bf44      	itt	mi
 800632c:	2320      	movmi	r3, #32
 800632e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006332:	0713      	lsls	r3, r2, #28
 8006334:	bf44      	itt	mi
 8006336:	232b      	movmi	r3, #43	@ 0x2b
 8006338:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800633c:	f89a 3000 	ldrb.w	r3, [sl]
 8006340:	2b2a      	cmp	r3, #42	@ 0x2a
 8006342:	d015      	beq.n	8006370 <_vfiprintf_r+0x120>
 8006344:	4654      	mov	r4, sl
 8006346:	2000      	movs	r0, #0
 8006348:	f04f 0c0a 	mov.w	ip, #10
 800634c:	9a07      	ldr	r2, [sp, #28]
 800634e:	4621      	mov	r1, r4
 8006350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006354:	3b30      	subs	r3, #48	@ 0x30
 8006356:	2b09      	cmp	r3, #9
 8006358:	d94b      	bls.n	80063f2 <_vfiprintf_r+0x1a2>
 800635a:	b1b0      	cbz	r0, 800638a <_vfiprintf_r+0x13a>
 800635c:	9207      	str	r2, [sp, #28]
 800635e:	e014      	b.n	800638a <_vfiprintf_r+0x13a>
 8006360:	eba0 0308 	sub.w	r3, r0, r8
 8006364:	fa09 f303 	lsl.w	r3, r9, r3
 8006368:	4313      	orrs	r3, r2
 800636a:	46a2      	mov	sl, r4
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	e7d2      	b.n	8006316 <_vfiprintf_r+0xc6>
 8006370:	9b03      	ldr	r3, [sp, #12]
 8006372:	1d19      	adds	r1, r3, #4
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	9103      	str	r1, [sp, #12]
 8006378:	2b00      	cmp	r3, #0
 800637a:	bfbb      	ittet	lt
 800637c:	425b      	neglt	r3, r3
 800637e:	f042 0202 	orrlt.w	r2, r2, #2
 8006382:	9307      	strge	r3, [sp, #28]
 8006384:	9307      	strlt	r3, [sp, #28]
 8006386:	bfb8      	it	lt
 8006388:	9204      	strlt	r2, [sp, #16]
 800638a:	7823      	ldrb	r3, [r4, #0]
 800638c:	2b2e      	cmp	r3, #46	@ 0x2e
 800638e:	d10a      	bne.n	80063a6 <_vfiprintf_r+0x156>
 8006390:	7863      	ldrb	r3, [r4, #1]
 8006392:	2b2a      	cmp	r3, #42	@ 0x2a
 8006394:	d132      	bne.n	80063fc <_vfiprintf_r+0x1ac>
 8006396:	9b03      	ldr	r3, [sp, #12]
 8006398:	3402      	adds	r4, #2
 800639a:	1d1a      	adds	r2, r3, #4
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	9203      	str	r2, [sp, #12]
 80063a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80063a4:	9305      	str	r3, [sp, #20]
 80063a6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006470 <_vfiprintf_r+0x220>
 80063aa:	2203      	movs	r2, #3
 80063ac:	4650      	mov	r0, sl
 80063ae:	7821      	ldrb	r1, [r4, #0]
 80063b0:	f7fe f96b 	bl	800468a <memchr>
 80063b4:	b138      	cbz	r0, 80063c6 <_vfiprintf_r+0x176>
 80063b6:	2240      	movs	r2, #64	@ 0x40
 80063b8:	9b04      	ldr	r3, [sp, #16]
 80063ba:	eba0 000a 	sub.w	r0, r0, sl
 80063be:	4082      	lsls	r2, r0
 80063c0:	4313      	orrs	r3, r2
 80063c2:	3401      	adds	r4, #1
 80063c4:	9304      	str	r3, [sp, #16]
 80063c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063ca:	2206      	movs	r2, #6
 80063cc:	4829      	ldr	r0, [pc, #164]	@ (8006474 <_vfiprintf_r+0x224>)
 80063ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063d2:	f7fe f95a 	bl	800468a <memchr>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d03f      	beq.n	800645a <_vfiprintf_r+0x20a>
 80063da:	4b27      	ldr	r3, [pc, #156]	@ (8006478 <_vfiprintf_r+0x228>)
 80063dc:	bb1b      	cbnz	r3, 8006426 <_vfiprintf_r+0x1d6>
 80063de:	9b03      	ldr	r3, [sp, #12]
 80063e0:	3307      	adds	r3, #7
 80063e2:	f023 0307 	bic.w	r3, r3, #7
 80063e6:	3308      	adds	r3, #8
 80063e8:	9303      	str	r3, [sp, #12]
 80063ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063ec:	443b      	add	r3, r7
 80063ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80063f0:	e76a      	b.n	80062c8 <_vfiprintf_r+0x78>
 80063f2:	460c      	mov	r4, r1
 80063f4:	2001      	movs	r0, #1
 80063f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80063fa:	e7a8      	b.n	800634e <_vfiprintf_r+0xfe>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f04f 0c0a 	mov.w	ip, #10
 8006402:	4619      	mov	r1, r3
 8006404:	3401      	adds	r4, #1
 8006406:	9305      	str	r3, [sp, #20]
 8006408:	4620      	mov	r0, r4
 800640a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800640e:	3a30      	subs	r2, #48	@ 0x30
 8006410:	2a09      	cmp	r2, #9
 8006412:	d903      	bls.n	800641c <_vfiprintf_r+0x1cc>
 8006414:	2b00      	cmp	r3, #0
 8006416:	d0c6      	beq.n	80063a6 <_vfiprintf_r+0x156>
 8006418:	9105      	str	r1, [sp, #20]
 800641a:	e7c4      	b.n	80063a6 <_vfiprintf_r+0x156>
 800641c:	4604      	mov	r4, r0
 800641e:	2301      	movs	r3, #1
 8006420:	fb0c 2101 	mla	r1, ip, r1, r2
 8006424:	e7f0      	b.n	8006408 <_vfiprintf_r+0x1b8>
 8006426:	ab03      	add	r3, sp, #12
 8006428:	9300      	str	r3, [sp, #0]
 800642a:	462a      	mov	r2, r5
 800642c:	4630      	mov	r0, r6
 800642e:	4b13      	ldr	r3, [pc, #76]	@ (800647c <_vfiprintf_r+0x22c>)
 8006430:	a904      	add	r1, sp, #16
 8006432:	f7fd fbb3 	bl	8003b9c <_printf_float>
 8006436:	4607      	mov	r7, r0
 8006438:	1c78      	adds	r0, r7, #1
 800643a:	d1d6      	bne.n	80063ea <_vfiprintf_r+0x19a>
 800643c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800643e:	07d9      	lsls	r1, r3, #31
 8006440:	d405      	bmi.n	800644e <_vfiprintf_r+0x1fe>
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	059a      	lsls	r2, r3, #22
 8006446:	d402      	bmi.n	800644e <_vfiprintf_r+0x1fe>
 8006448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800644a:	f7fe f91d 	bl	8004688 <__retarget_lock_release_recursive>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	065b      	lsls	r3, r3, #25
 8006452:	f53f af1f 	bmi.w	8006294 <_vfiprintf_r+0x44>
 8006456:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006458:	e71e      	b.n	8006298 <_vfiprintf_r+0x48>
 800645a:	ab03      	add	r3, sp, #12
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	462a      	mov	r2, r5
 8006460:	4630      	mov	r0, r6
 8006462:	4b06      	ldr	r3, [pc, #24]	@ (800647c <_vfiprintf_r+0x22c>)
 8006464:	a904      	add	r1, sp, #16
 8006466:	f7fd fe37 	bl	80040d8 <_printf_i>
 800646a:	e7e4      	b.n	8006436 <_vfiprintf_r+0x1e6>
 800646c:	080068d8 	.word	0x080068d8
 8006470:	080068de 	.word	0x080068de
 8006474:	080068e2 	.word	0x080068e2
 8006478:	08003b9d 	.word	0x08003b9d
 800647c:	0800622d 	.word	0x0800622d

08006480 <__swbuf_r>:
 8006480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006482:	460e      	mov	r6, r1
 8006484:	4614      	mov	r4, r2
 8006486:	4605      	mov	r5, r0
 8006488:	b118      	cbz	r0, 8006492 <__swbuf_r+0x12>
 800648a:	6a03      	ldr	r3, [r0, #32]
 800648c:	b90b      	cbnz	r3, 8006492 <__swbuf_r+0x12>
 800648e:	f7fd ffcd 	bl	800442c <__sinit>
 8006492:	69a3      	ldr	r3, [r4, #24]
 8006494:	60a3      	str	r3, [r4, #8]
 8006496:	89a3      	ldrh	r3, [r4, #12]
 8006498:	071a      	lsls	r2, r3, #28
 800649a:	d501      	bpl.n	80064a0 <__swbuf_r+0x20>
 800649c:	6923      	ldr	r3, [r4, #16]
 800649e:	b943      	cbnz	r3, 80064b2 <__swbuf_r+0x32>
 80064a0:	4621      	mov	r1, r4
 80064a2:	4628      	mov	r0, r5
 80064a4:	f000 f82a 	bl	80064fc <__swsetup_r>
 80064a8:	b118      	cbz	r0, 80064b2 <__swbuf_r+0x32>
 80064aa:	f04f 37ff 	mov.w	r7, #4294967295
 80064ae:	4638      	mov	r0, r7
 80064b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	6922      	ldr	r2, [r4, #16]
 80064b6:	b2f6      	uxtb	r6, r6
 80064b8:	1a98      	subs	r0, r3, r2
 80064ba:	6963      	ldr	r3, [r4, #20]
 80064bc:	4637      	mov	r7, r6
 80064be:	4283      	cmp	r3, r0
 80064c0:	dc05      	bgt.n	80064ce <__swbuf_r+0x4e>
 80064c2:	4621      	mov	r1, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	f7ff fd9b 	bl	8006000 <_fflush_r>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d1ed      	bne.n	80064aa <__swbuf_r+0x2a>
 80064ce:	68a3      	ldr	r3, [r4, #8]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	60a3      	str	r3, [r4, #8]
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	1c5a      	adds	r2, r3, #1
 80064d8:	6022      	str	r2, [r4, #0]
 80064da:	701e      	strb	r6, [r3, #0]
 80064dc:	6962      	ldr	r2, [r4, #20]
 80064de:	1c43      	adds	r3, r0, #1
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d004      	beq.n	80064ee <__swbuf_r+0x6e>
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	07db      	lsls	r3, r3, #31
 80064e8:	d5e1      	bpl.n	80064ae <__swbuf_r+0x2e>
 80064ea:	2e0a      	cmp	r6, #10
 80064ec:	d1df      	bne.n	80064ae <__swbuf_r+0x2e>
 80064ee:	4621      	mov	r1, r4
 80064f0:	4628      	mov	r0, r5
 80064f2:	f7ff fd85 	bl	8006000 <_fflush_r>
 80064f6:	2800      	cmp	r0, #0
 80064f8:	d0d9      	beq.n	80064ae <__swbuf_r+0x2e>
 80064fa:	e7d6      	b.n	80064aa <__swbuf_r+0x2a>

080064fc <__swsetup_r>:
 80064fc:	b538      	push	{r3, r4, r5, lr}
 80064fe:	4b29      	ldr	r3, [pc, #164]	@ (80065a4 <__swsetup_r+0xa8>)
 8006500:	4605      	mov	r5, r0
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	460c      	mov	r4, r1
 8006506:	b118      	cbz	r0, 8006510 <__swsetup_r+0x14>
 8006508:	6a03      	ldr	r3, [r0, #32]
 800650a:	b90b      	cbnz	r3, 8006510 <__swsetup_r+0x14>
 800650c:	f7fd ff8e 	bl	800442c <__sinit>
 8006510:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006514:	0719      	lsls	r1, r3, #28
 8006516:	d422      	bmi.n	800655e <__swsetup_r+0x62>
 8006518:	06da      	lsls	r2, r3, #27
 800651a:	d407      	bmi.n	800652c <__swsetup_r+0x30>
 800651c:	2209      	movs	r2, #9
 800651e:	602a      	str	r2, [r5, #0]
 8006520:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	81a3      	strh	r3, [r4, #12]
 800652a:	e033      	b.n	8006594 <__swsetup_r+0x98>
 800652c:	0758      	lsls	r0, r3, #29
 800652e:	d512      	bpl.n	8006556 <__swsetup_r+0x5a>
 8006530:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006532:	b141      	cbz	r1, 8006546 <__swsetup_r+0x4a>
 8006534:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006538:	4299      	cmp	r1, r3
 800653a:	d002      	beq.n	8006542 <__swsetup_r+0x46>
 800653c:	4628      	mov	r0, r5
 800653e:	f7fe ff0f 	bl	8005360 <_free_r>
 8006542:	2300      	movs	r3, #0
 8006544:	6363      	str	r3, [r4, #52]	@ 0x34
 8006546:	89a3      	ldrh	r3, [r4, #12]
 8006548:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800654c:	81a3      	strh	r3, [r4, #12]
 800654e:	2300      	movs	r3, #0
 8006550:	6063      	str	r3, [r4, #4]
 8006552:	6923      	ldr	r3, [r4, #16]
 8006554:	6023      	str	r3, [r4, #0]
 8006556:	89a3      	ldrh	r3, [r4, #12]
 8006558:	f043 0308 	orr.w	r3, r3, #8
 800655c:	81a3      	strh	r3, [r4, #12]
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	b94b      	cbnz	r3, 8006576 <__swsetup_r+0x7a>
 8006562:	89a3      	ldrh	r3, [r4, #12]
 8006564:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800656c:	d003      	beq.n	8006576 <__swsetup_r+0x7a>
 800656e:	4621      	mov	r1, r4
 8006570:	4628      	mov	r0, r5
 8006572:	f000 f882 	bl	800667a <__smakebuf_r>
 8006576:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800657a:	f013 0201 	ands.w	r2, r3, #1
 800657e:	d00a      	beq.n	8006596 <__swsetup_r+0x9a>
 8006580:	2200      	movs	r2, #0
 8006582:	60a2      	str	r2, [r4, #8]
 8006584:	6962      	ldr	r2, [r4, #20]
 8006586:	4252      	negs	r2, r2
 8006588:	61a2      	str	r2, [r4, #24]
 800658a:	6922      	ldr	r2, [r4, #16]
 800658c:	b942      	cbnz	r2, 80065a0 <__swsetup_r+0xa4>
 800658e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006592:	d1c5      	bne.n	8006520 <__swsetup_r+0x24>
 8006594:	bd38      	pop	{r3, r4, r5, pc}
 8006596:	0799      	lsls	r1, r3, #30
 8006598:	bf58      	it	pl
 800659a:	6962      	ldrpl	r2, [r4, #20]
 800659c:	60a2      	str	r2, [r4, #8]
 800659e:	e7f4      	b.n	800658a <__swsetup_r+0x8e>
 80065a0:	2000      	movs	r0, #0
 80065a2:	e7f7      	b.n	8006594 <__swsetup_r+0x98>
 80065a4:	2000001c 	.word	0x2000001c

080065a8 <_raise_r>:
 80065a8:	291f      	cmp	r1, #31
 80065aa:	b538      	push	{r3, r4, r5, lr}
 80065ac:	4605      	mov	r5, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	d904      	bls.n	80065bc <_raise_r+0x14>
 80065b2:	2316      	movs	r3, #22
 80065b4:	6003      	str	r3, [r0, #0]
 80065b6:	f04f 30ff 	mov.w	r0, #4294967295
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065be:	b112      	cbz	r2, 80065c6 <_raise_r+0x1e>
 80065c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065c4:	b94b      	cbnz	r3, 80065da <_raise_r+0x32>
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f830 	bl	800662c <_getpid_r>
 80065cc:	4622      	mov	r2, r4
 80065ce:	4601      	mov	r1, r0
 80065d0:	4628      	mov	r0, r5
 80065d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065d6:	f000 b817 	b.w	8006608 <_kill_r>
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d00a      	beq.n	80065f4 <_raise_r+0x4c>
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	d103      	bne.n	80065ea <_raise_r+0x42>
 80065e2:	2316      	movs	r3, #22
 80065e4:	6003      	str	r3, [r0, #0]
 80065e6:	2001      	movs	r0, #1
 80065e8:	e7e7      	b.n	80065ba <_raise_r+0x12>
 80065ea:	2100      	movs	r1, #0
 80065ec:	4620      	mov	r0, r4
 80065ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80065f2:	4798      	blx	r3
 80065f4:	2000      	movs	r0, #0
 80065f6:	e7e0      	b.n	80065ba <_raise_r+0x12>

080065f8 <raise>:
 80065f8:	4b02      	ldr	r3, [pc, #8]	@ (8006604 <raise+0xc>)
 80065fa:	4601      	mov	r1, r0
 80065fc:	6818      	ldr	r0, [r3, #0]
 80065fe:	f7ff bfd3 	b.w	80065a8 <_raise_r>
 8006602:	bf00      	nop
 8006604:	2000001c 	.word	0x2000001c

08006608 <_kill_r>:
 8006608:	b538      	push	{r3, r4, r5, lr}
 800660a:	2300      	movs	r3, #0
 800660c:	4d06      	ldr	r5, [pc, #24]	@ (8006628 <_kill_r+0x20>)
 800660e:	4604      	mov	r4, r0
 8006610:	4608      	mov	r0, r1
 8006612:	4611      	mov	r1, r2
 8006614:	602b      	str	r3, [r5, #0]
 8006616:	f7fb f98a 	bl	800192e <_kill>
 800661a:	1c43      	adds	r3, r0, #1
 800661c:	d102      	bne.n	8006624 <_kill_r+0x1c>
 800661e:	682b      	ldr	r3, [r5, #0]
 8006620:	b103      	cbz	r3, 8006624 <_kill_r+0x1c>
 8006622:	6023      	str	r3, [r4, #0]
 8006624:	bd38      	pop	{r3, r4, r5, pc}
 8006626:	bf00      	nop
 8006628:	200003d4 	.word	0x200003d4

0800662c <_getpid_r>:
 800662c:	f7fb b978 	b.w	8001920 <_getpid>

08006630 <__swhatbuf_r>:
 8006630:	b570      	push	{r4, r5, r6, lr}
 8006632:	460c      	mov	r4, r1
 8006634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006638:	4615      	mov	r5, r2
 800663a:	2900      	cmp	r1, #0
 800663c:	461e      	mov	r6, r3
 800663e:	b096      	sub	sp, #88	@ 0x58
 8006640:	da0c      	bge.n	800665c <__swhatbuf_r+0x2c>
 8006642:	89a3      	ldrh	r3, [r4, #12]
 8006644:	2100      	movs	r1, #0
 8006646:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800664a:	bf14      	ite	ne
 800664c:	2340      	movne	r3, #64	@ 0x40
 800664e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006652:	2000      	movs	r0, #0
 8006654:	6031      	str	r1, [r6, #0]
 8006656:	602b      	str	r3, [r5, #0]
 8006658:	b016      	add	sp, #88	@ 0x58
 800665a:	bd70      	pop	{r4, r5, r6, pc}
 800665c:	466a      	mov	r2, sp
 800665e:	f000 f849 	bl	80066f4 <_fstat_r>
 8006662:	2800      	cmp	r0, #0
 8006664:	dbed      	blt.n	8006642 <__swhatbuf_r+0x12>
 8006666:	9901      	ldr	r1, [sp, #4]
 8006668:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800666c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006670:	4259      	negs	r1, r3
 8006672:	4159      	adcs	r1, r3
 8006674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006678:	e7eb      	b.n	8006652 <__swhatbuf_r+0x22>

0800667a <__smakebuf_r>:
 800667a:	898b      	ldrh	r3, [r1, #12]
 800667c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800667e:	079d      	lsls	r5, r3, #30
 8006680:	4606      	mov	r6, r0
 8006682:	460c      	mov	r4, r1
 8006684:	d507      	bpl.n	8006696 <__smakebuf_r+0x1c>
 8006686:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800668a:	6023      	str	r3, [r4, #0]
 800668c:	6123      	str	r3, [r4, #16]
 800668e:	2301      	movs	r3, #1
 8006690:	6163      	str	r3, [r4, #20]
 8006692:	b003      	add	sp, #12
 8006694:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006696:	466a      	mov	r2, sp
 8006698:	ab01      	add	r3, sp, #4
 800669a:	f7ff ffc9 	bl	8006630 <__swhatbuf_r>
 800669e:	9f00      	ldr	r7, [sp, #0]
 80066a0:	4605      	mov	r5, r0
 80066a2:	4639      	mov	r1, r7
 80066a4:	4630      	mov	r0, r6
 80066a6:	f7fe fecd 	bl	8005444 <_malloc_r>
 80066aa:	b948      	cbnz	r0, 80066c0 <__smakebuf_r+0x46>
 80066ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b0:	059a      	lsls	r2, r3, #22
 80066b2:	d4ee      	bmi.n	8006692 <__smakebuf_r+0x18>
 80066b4:	f023 0303 	bic.w	r3, r3, #3
 80066b8:	f043 0302 	orr.w	r3, r3, #2
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	e7e2      	b.n	8006686 <__smakebuf_r+0xc>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	9b01      	ldr	r3, [sp, #4]
 80066ce:	6020      	str	r0, [r4, #0]
 80066d0:	b15b      	cbz	r3, 80066ea <__smakebuf_r+0x70>
 80066d2:	4630      	mov	r0, r6
 80066d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066d8:	f000 f81e 	bl	8006718 <_isatty_r>
 80066dc:	b128      	cbz	r0, 80066ea <__smakebuf_r+0x70>
 80066de:	89a3      	ldrh	r3, [r4, #12]
 80066e0:	f023 0303 	bic.w	r3, r3, #3
 80066e4:	f043 0301 	orr.w	r3, r3, #1
 80066e8:	81a3      	strh	r3, [r4, #12]
 80066ea:	89a3      	ldrh	r3, [r4, #12]
 80066ec:	431d      	orrs	r5, r3
 80066ee:	81a5      	strh	r5, [r4, #12]
 80066f0:	e7cf      	b.n	8006692 <__smakebuf_r+0x18>
	...

080066f4 <_fstat_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	2300      	movs	r3, #0
 80066f8:	4d06      	ldr	r5, [pc, #24]	@ (8006714 <_fstat_r+0x20>)
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	4611      	mov	r1, r2
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	f7fb f973 	bl	80019ec <_fstat>
 8006706:	1c43      	adds	r3, r0, #1
 8006708:	d102      	bne.n	8006710 <_fstat_r+0x1c>
 800670a:	682b      	ldr	r3, [r5, #0]
 800670c:	b103      	cbz	r3, 8006710 <_fstat_r+0x1c>
 800670e:	6023      	str	r3, [r4, #0]
 8006710:	bd38      	pop	{r3, r4, r5, pc}
 8006712:	bf00      	nop
 8006714:	200003d4 	.word	0x200003d4

08006718 <_isatty_r>:
 8006718:	b538      	push	{r3, r4, r5, lr}
 800671a:	2300      	movs	r3, #0
 800671c:	4d05      	ldr	r5, [pc, #20]	@ (8006734 <_isatty_r+0x1c>)
 800671e:	4604      	mov	r4, r0
 8006720:	4608      	mov	r0, r1
 8006722:	602b      	str	r3, [r5, #0]
 8006724:	f7fb f971 	bl	8001a0a <_isatty>
 8006728:	1c43      	adds	r3, r0, #1
 800672a:	d102      	bne.n	8006732 <_isatty_r+0x1a>
 800672c:	682b      	ldr	r3, [r5, #0]
 800672e:	b103      	cbz	r3, 8006732 <_isatty_r+0x1a>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	bd38      	pop	{r3, r4, r5, pc}
 8006734:	200003d4 	.word	0x200003d4

08006738 <_init>:
 8006738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800673a:	bf00      	nop
 800673c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800673e:	bc08      	pop	{r3}
 8006740:	469e      	mov	lr, r3
 8006742:	4770      	bx	lr

08006744 <_fini>:
 8006744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006746:	bf00      	nop
 8006748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800674a:	bc08      	pop	{r3}
 800674c:	469e      	mov	lr, r3
 800674e:	4770      	bx	lr
